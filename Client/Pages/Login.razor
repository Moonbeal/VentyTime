@page "/login"
@using VentyTime.Shared.Models.Auth
@using System.ComponentModel.DataAnnotations
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex flex-column align-center justify-center" Style="min-height: calc(100vh - 64px);">
    <MudPaper Elevation="3" Class="pa-8 rounded-lg" Style="width: 100%; max-width: 400px;">
        <div class="d-flex flex-column align-center mb-8">
            <MudIcon Icon="@Icons.Material.Filled.EventNote" Color="Color.Primary" Size="Size.Large" Class="mb-4" Style="width: 64px; height: 64px;" />
            <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-2 font-weight-bold">Welcome Back</MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center">Sign in to continue to VentyTime</MudText>
        </div>

        <MudForm @ref="form" @bind-IsValid="@success">
            <MudText Typo="Typo.h4" Class="mb-4">Login</MudText>

            <MudTextField @bind-Value="loginRequest.Email"
                         Label="Email"
                         For="@(() => loginRequest.Email)"
                         Required="true"
                         RequiredError="Email is required!"
                         InputType="InputType.Email"
                         Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />

            <MudTextField @bind-Value="loginRequest.Password"
                         Label="Password"
                         For="@(() => loginRequest.Password)"
                         Required="true"
                         RequiredError="Password is required!"
                         InputType="@PasswordInput"
                         Adornment="Adornment.End"
                         AdornmentIcon="@PasswordInputIcon"
                         OnAdornmentClick="TogglePasswordVisibility" />

            <MudSelect T="UserRole" 
                      Label="Login As" 
                      @bind-Value="loginRequest.Role"
                      Required="true"
                      RequiredError="Please select how you want to login!"
                      Variant="Variant.Outlined"
                      Class="mt-4">
                <MudSelectItem Value="@(UserRole.User)">User</MudSelectItem>
                <MudSelectItem Value="@(UserRole.Organizer)">Organizer</MudSelectItem>
            </MudSelect>

            <div class="d-flex justify-space-between align-center mt-4">
                <MudButton Variant="Variant.Filled"
                          Color="Color.Primary"
                          DisableElevation="true"
                          OnClick="HandleLogin"
                          Class="ml-auto">
                    Login
                </MudButton>
            </div>

            <MudDivider Class="my-4" />

            <MudText Align="Align.Center">
                Don't have an account?
                <MudLink Href="/register">Register here</MudLink>
            </MudText>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    MudForm? form;
    bool success;
    private LoginRequest loginRequest = new();
    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task HandleLogin()
    {
        await form.Validate();

        if (form.IsValid)
        {
            var result = await UserService.LoginAsync(loginRequest);
            if (result)
            {
                NavigationManager.NavigateTo("/");
            }
        }
    }
}
