@page "/events/create"
@using VentyTime.Shared.Models
@inject IEventService EventService
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">
    <MudPaper Elevation="3" Class="pa-6 rounded-lg">
        <MudForm @ref="form" @bind-IsValid="@success">
            <div class="d-flex justify-space-between align-center mb-6">
                <MudText Typo="Typo.h3" Color="Color.Primary">Create Event</MudText>
            </div>

            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="eventModel.Title" 
                                Label="Event Title"
                                Required="true"
                                RequiredError="Title is required"
                                Variant="Variant.Outlined" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="eventModel.Description"
                                Label="Description"
                                Required="true"
                                RequiredError="Description is required"
                                Lines="3"
                                Variant="Variant.Outlined" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudDatePicker Date="@eventModel.StartDate"
                                 DateChanged="@((DateTime? date) => eventModel.StartDate = date ?? DateTime.Today)"
                                 Label="Start Date"
                                 Required="true"
                                 RequiredError="Start date is required"
                                 Variant="Variant.Outlined" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudTimePicker Time="@eventModel.StartTime"
                                 TimeChanged="@((TimeSpan? time) => eventModel.StartTime = time ?? DateTime.Now.TimeOfDay)"
                                 Label="Start Time"
                                 Required="true"
                                 RequiredError="Start time is required"
                                 Variant="Variant.Outlined" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="eventModel.Location"
                                Label="Location"
                                Required="true"
                                RequiredError="Location is required"
                                Variant="Variant.Outlined" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="eventModel.ImageUrl"
                                Label="Image URL"
                                Variant="Variant.Outlined" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="eventModel.Price"
                                Label="Price"
                                Required="true"
                                RequiredError="Price is required"
                                Variant="Variant.Outlined"
                                AdornmentText="$"
                                Adornment="Adornment.Start" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="eventModel.MaxAttendees"
                                Label="Maximum Attendees (0 for unlimited)"
                                Required="true"
                                RequiredError="Maximum attendees is required"
                                Variant="Variant.Outlined" />
                </MudItem>

                <MudItem xs="12">
                    <MudPaper Class="pa-4 mt-4">
                        <MudText Typo="Typo.h6" Class="mb-4">Event Preview</MudText>
                        @if (!string.IsNullOrEmpty(eventModel.ImageUrl))
                        {
                            <img src="@eventModel.ImageUrl"
                                 alt="Event preview"
                                 class="rounded-lg mb-4"
                                 style="object-fit: cover; height: 200px; width: 100%;" />
                        }
                        else
                        {
                            <div class="d-flex align-center justify-center rounded-lg mb-4" style="height: 200px; background-color: var(--mud-palette-background-grey)">
                                <MudIcon Icon="@Icons.Material.Filled.Image" Color="Color.Secondary" Size="Size.Large" />
                            </div>
                        }
                    </MudPaper>
                </MudItem>

                <MudItem xs="12" Class="d-flex justify-center mt-4">
                    <MudButton Variant="Variant.Filled"
                              Color="Color.Primary"
                              Size="Size.Large"
                              OnClick="CreateEventAsync"
                              Disabled="!success">
                        Create Event
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private MudForm? form;
    private bool success;
    private Event eventModel = new()
    {
        StartDate = DateTime.Today,
        StartTime = DateTime.Now.TimeOfDay,
        Price = 0,
        MaxAttendees = 0
    };

    private async Task CreateEventAsync()
    {
        try
        {
            var userId = await UserService.GetCurrentUserIdAsync();
            if (string.IsNullOrEmpty(userId))
            {
                Snackbar.Add("Please log in to create events", Severity.Warning);
                return;
            }

            eventModel.OrganizerId = userId;
            var result = await EventService.CreateEventAsync(eventModel);
            
            if (result != null)
            {
                Snackbar.Add("Event created successfully!", Severity.Success);
                NavigationManager.NavigateTo($"/events/{result.Id}");
            }
            else
            {
                Snackbar.Add("Failed to create event", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }
}
