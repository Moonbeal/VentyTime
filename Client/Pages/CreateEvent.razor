@page "/create-event"
@using VentyTime.Shared.Models
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@inject IEventService EventService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudPaper Class="pa-4">
        <MudForm @ref="form" Model="@eventModel" @bind-IsValid="@isValid">
            <MudText Typo="Typo.h4" Class="mb-4">Create New Event</MudText>

            <MudTextField @bind-Value="eventModel.Title"
                         Label="Title"
                         Required="true"
                         RequiredError="Title is required"
                         MaxLength="100"
                         Counter="100"
                         Class="mb-4" />

            <MudTextField @bind-Value="eventModel.Description"
                         Label="Description"
                         Required="true"
                         RequiredError="Description is required"
                         Lines="3"
                         MaxLength="500"
                         Counter="500"
                         Class="mb-4" />

            <MudSelect @bind-Value="eventModel.Category"
                      Label="Category"
                      Required="true"
                      RequiredError="Category is required"
                      Class="mb-4">
                <MudSelectItem Value="@("Conference")">Conference</MudSelectItem>
                <MudSelectItem Value="@("Workshop")">Workshop</MudSelectItem>
                <MudSelectItem Value="@("Meetup")">Meetup</MudSelectItem>
                <MudSelectItem Value="@("Social")">Social</MudSelectItem>
                <MudSelectItem Value="@("Other")">Other</MudSelectItem>
            </MudSelect>

            <MudTextField @bind-Value="eventModel.Location"
                         Label="Location"
                         Required="true"
                         RequiredError="Location is required"
                         Class="mb-4" />

            <MudDatePicker Date="@eventModel.StartDate"
                          DateChanged="@(date => OnDateChanged(date))"
                          Label="Date"
                          Required="true"
                          RequiredError="Date is required"
                          DisablePast="true"
                          DateFormat="dd/MM/yyyy"
                          Class="mb-4"
                          AdornmentColor="Color.Primary" />

            <MudTimePicker Time="@eventModel.StartDate.TimeOfDay"
                          TimeChanged="@(time => OnTimeChanged(time))"
                          Label="Time"
                          Required="true"
                          RequiredError="Time is required"
                          AmPm="false"
                          Class="mb-4"
                          AdornmentColor="Color.Primary" />

            <MudTextField @bind-Value="eventModel.ImageUrl"
                         Label="Image URL (optional)"
                         HelperText="Enter a URL for the event image"
                         Class="mb-4" />

            <div class="d-flex justify-space-between mt-6">
                <MudButton OnClick="@(() => NavigationManager.NavigateTo("/"))"
                          Variant="Variant.Outlined"
                          Color="Color.Secondary">
                    Cancel
                </MudButton>
                <MudButton OnClick="CreateEventAsync"
                          Variant="Variant.Filled"
                          Color="Color.Primary"
                          Disabled="@(!isValid || processing)">
                    @if (processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Creating...</MudText>
                    }
                    else
                    {
                        <MudText>Create Event</MudText>
                    }
                </MudButton>
            </div>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private Event eventModel = new()
    {
        StartDate = DateTime.Today,
        EndDate = DateTime.Today
    };
    private bool isValid;
    private bool processing;
    private MudForm form = default!;

    private void OnDateChanged(DateTime? date)
    {
        if (date.HasValue)
        {
            var time = eventModel.StartDate.TimeOfDay;
            eventModel.StartDate = date.Value.Date + time;
            eventModel.EndDate = eventModel.StartDate.AddHours(1);
        }
    }

    private void OnTimeChanged(TimeSpan? time)
    {
        if (time.HasValue)
        {
            eventModel.StartDate = eventModel.StartDate.Date + time.Value;
            eventModel.EndDate = eventModel.StartDate.AddHours(1);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? true)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        eventModel.OrganizerId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    }

    private async Task CreateEventAsync()
    {
        if (!isValid) return;

        try
        {
            processing = true;
            await form.Validate();

            if (form.IsValid)
            {
                var createdEvent = await EventService.CreateEventAsync(eventModel);
                Snackbar.Add("Event created successfully!", Severity.Success);
                NavigationManager.NavigateTo($"/events/{createdEvent.Id}");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating event: {ex.Message}", Severity.Error);
        }
        finally
        {
            processing = false;
        }
    }
}
