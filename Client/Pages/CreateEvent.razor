@page "/create-event"
@attribute [Authorize(Roles = "Admin, Organizer")]
@using VentyTime.Shared.Models
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Net.Http
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Components.Forms
@using VentyTime.Client.Extensions
@inject IEventService EventService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory ClientFactory

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudPaper Class="pa-4">
        <MudForm @ref="form" Model="@eventModel" @bind-IsValid="@isValid">
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h4" Class="mb-4">Create New Event</MudText>
                </MudItem>

                <MudItem xs="12" md="8">
                    <MudCard Class="mb-4">
                        <MudCardContent>
                            <MudTextField @bind-Value="eventModel.Title"
                                        Label="Event Title"
                                        Required="true"
                                        RequiredError="Title is required"
                                        MaxLength="100"
                                        Counter="100"
                                        Variant="Variant.Outlined"
                                        Class="mb-4" />

                            <MudTextField @bind-Value="eventModel.Description"
                                        Label="Event Description"
                                        Required="true"
                                        RequiredError="Description is required"
                                        Lines="4"
                                        MaxLength="1000"
                                        Counter="1000"
                                        Variant="Variant.Outlined"
                                        HelperText="Describe your event in detail"
                                        Class="mb-4" />

                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudSelect @bind-Value="eventModel.Category"
                                             Label="Category"
                                             Required="true"
                                             RequiredError="Category is required"
                                             Variant="Variant.Outlined"
                                             Class="mb-4">
                                        @foreach (var category in EventCategories.All)
                                        {
                                            <MudSelectItem Value="@category">@category</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudSelect @bind-Value="eventModel.Type"
                                             Label="Event Type"
                                             Required="true"
                                             RequiredError="Event type is required"
                                             Variant="Variant.Outlined"
                                             Class="mb-4">
                                        @foreach (var type in Enum.GetValues(typeof(EventType)))
                                        {
                                            <MudSelectItem Value="@((EventType)type)">@type.ToString()</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                            </MudGrid>

                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudNumericField @bind-Value="eventModel.Price"
                                                   Label="Price"
                                                   Required="true"
                                                   RequiredError="Price is required"
                                                   Min="0"
                                                   Format="N2"
                                                   AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                                                   Adornment="Adornment.Start"
                                                   Variant="Variant.Outlined"
                                                   Class="mb-4" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudNumericField @bind-Value="eventModel.MaxAttendees"
                                                   Label="Maximum Attendees"
                                                   Required="true"
                                                   RequiredError="Capacity is required"
                                                   Min="1"
                                                   Variant="Variant.Outlined"
                                                   HelperText="Set to 0 for unlimited"
                                                   Class="mb-4" />
                                </MudItem>
                            </MudGrid>

                            <MudTextField @bind-Value="eventModel.Location"
                                        Label="Location"
                                        Required="true"
                                        RequiredError="Location is required"
                                        Variant="Variant.Outlined"
                                        HelperText="Enter the full address or online meeting link"
                                        Class="mb-4" />

                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudDatePicker @bind-Date="startDate"
                                                 Label="Start Date"
                                                 Required="true"
                                                 RequiredError="Start date is required"
                                                 DisablePast="true"
                                                 DateFormat="dd/MM/yyyy"
                                                 Variant="Variant.Outlined"
                                                 Class="mb-4" />
                                    <MudTimePicker @bind-Time="startTime"
                                                 Label="Start Time"
                                                 Required="true"
                                                 RequiredError="Start time is required"
                                                 AmPm="false"
                                                 Variant="Variant.Outlined"
                                                 Class="mb-4" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudDatePicker @bind-Date="endDate"
                                                 Label="End Date"
                                                 Required="true"
                                                 RequiredError="End date is required"
                                                 DisablePast="true"
                                                 DateFormat="dd/MM/yyyy"
                                                 Variant="Variant.Outlined"
                                                 Class="mb-4" />
                                    <MudTimePicker @bind-Time="endTime"
                                                 Label="End Time"
                                                 Required="true"
                                                 RequiredError="End time is required"
                                                 AmPm="false"
                                                 Variant="Variant.Outlined"
                                                 Class="mb-4" />
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" md="4">
                    <MudCard Class="mb-4">
                        <MudCardContent>
                            <MudText Typo="Typo.h6" Class="mb-4">Event Image</MudText>
                            <InputFile id="fileInput" OnChange="@OnInputFileChanged" hidden />
                            <div class="d-flex flex-column gap-4 align-center justify-center py-4">
                                @if (!string.IsNullOrEmpty(eventModel.ImageUrl))
                                {
                                    <div class="d-flex flex-column gap-2">
                                        <MudImage Src="@eventModel.ImageUrl" Alt="Event image" Width="100" Height="200" Class="rounded-lg" />
                                        <MudButton OnClick="@HandleClearImage" 
                                                 Color="Color.Error" 
                                                 Variant="Variant.Text" 
                                                 StartIcon="@Icons.Material.Filled.Delete" 
                                                 Size="Size.Small">
                                            Remove Image
                                        </MudButton>
                                    </div>
                                }
                                else
                                {
                                    <MudPaper Height="200px" Width="100%" Class="d-flex flex-column align-center justify-center">
                                        <MudIcon Icon="@Icons.Material.Filled.AddPhotoAlternate" Size="Size.Large" Class="mb-2" />
                                        <MudButton HtmlTag="label"
                                                 For="fileInput"
                                                 Variant="Variant.Filled"
                                                 Color="Color.Primary"
                                                 StartIcon="@Icons.Material.Filled.CloudUpload">
                                            Upload Event Image
                                        </MudButton>
                                        <MudText Typo="Typo.caption" Class="mt-2">
                                            Max size: 5MB. Formats: JPG, PNG, GIF
                                        </MudText>
                                    </MudPaper>
                                }
                            </div>
                        </MudCardContent>
                    </MudCard>

                    <MudPaper Class="pa-4" Elevation="0">
                        <MudButton OnClick="@NavigateToEvents"
                                 Variant="Variant.Outlined"
                                 Color="Color.Secondary"
                                 FullWidth="true"
                                 Class="mb-4">
                            Cancel
                        </MudButton>
                        <MudButton OnClick="@CreateEventAsync"
                                 Variant="Variant.Filled"
                                 Color="Color.Primary"
                                 FullWidth="true"
                                 Disabled="@(!isValid)">
                            Create Event
                        </MudButton>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private Event eventModel = new()
    {
        StartDate = DateTime.Now.Date.AddDays(1).AddHours(12),
        EndDate = DateTime.Now.Date.AddDays(1).AddHours(13),
    };

    private MudForm? form;
    private bool isValid;
    private string errorMessage = string.Empty;
    private bool loading;

    private DateTime? startDate;
    private TimeSpan? startTime;
    private DateTime? endDate;
    private TimeSpan? endTime;

    protected override void OnInitialized()
    {
        startDate = eventModel.StartDate.Date;
        startTime = eventModel.StartDate.TimeOfDay;
        endDate = eventModel.EndDate.Date;
        endTime = eventModel.EndDate.TimeOfDay;
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file == null)
                return;

            if (file.Size > 5 * 1024 * 1024) // 5MB limit
            {
                Snackbar.Add("File is too large. Maximum size is 5MB.", Severity.Error);
                return;
            }

            var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif" };
            var extension = Path.GetExtension(file.Name).ToLowerInvariant();
            if (!allowedExtensions.Contains(extension))
            {
                Snackbar.Add($"Invalid file format. Allowed formats are: {string.Join(", ", allowedExtensions)}", Severity.Error);
                return;
            }

            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            content.Add(fileContent, "file", file.Name);

            var imageUrl = await EventService.UploadEventImage(content);
            if (!string.IsNullOrEmpty(imageUrl))
            {
                eventModel.ImageUrl = imageUrl;
                Snackbar.Add("Image uploaded successfully!", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error uploading image: {ex.Message}", Severity.Error);
        }
    }

    private void HandleClearImage()
    {
        ClearImage();
    }

    private void ClearImage()
    {
        eventModel.ImageUrl = null;
        StateHasChanged();
    }

    private bool ValidateDates()
    {
        if (!startDate.HasValue || !startTime.HasValue || !endDate.HasValue || !endTime.HasValue)
        {
            Snackbar.Add("Please select both start and end date/time", Severity.Warning);
            return false;
        }

        var startDateTime = startDate.Value.Date + startTime.Value;
        var endDateTime = endDate.Value.Date + endTime.Value;

        if (startDateTime < DateTime.Now)
        {
            Snackbar.Add("Start date cannot be in the past", Severity.Warning);
            return false;
        }

        if (endDateTime <= startDateTime)
        {
            Snackbar.Add("End date must be after start date", Severity.Warning);
            return false;
        }

        eventModel.StartDate = startDateTime;
        eventModel.EndDate = endDateTime;
        return true;
    }

    private async Task CreateEventAsync()
    {
        if (!ValidateDates())
            return;

        try
        {
            await form.Validate();

            if (form.IsValid)
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;
                var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

                if (string.IsNullOrEmpty(userId))
                {
                    Snackbar.Add("User not authenticated", Severity.Error);
                    return;
                }

                eventModel.CreatorId = userId;
                eventModel.OrganizerId = userId;

                try 
                {
                    await EventService.CreateEventAsync(eventModel);
                    Snackbar.Add("Event created successfully!", Severity.Success);
                    NavigationManager.NavigateTo("/events");
                }
                catch (HttpRequestException ex)
                {
                    var errorMessage = await ex.GetResponseBodyAsync();
                    Snackbar.Add($"Failed to create event: {errorMessage}", Severity.Error);
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Failed to create event: {ex.Message}", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating event: {ex.Message}", Severity.Error);
        }
    }

    private void NavigateToEvents()
    {
        NavigationManager.NavigateTo("/events");
    }
}
