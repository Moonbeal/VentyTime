@page "/create-event"
@using VentyTime.Shared.Models
@inject IEventService EventService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IUserService UserService
@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.Medium" Class="my-8">
    <MudPaper Elevation="3" Class="pa-6 rounded-lg">
        <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-6">Create New Event</MudText>

        <MudForm @ref="form" @bind-IsValid="@success">
            <MudGrid Spacing="3">
                <MudItem xs="12">
                    <MudTextField @bind-Value="eventModel.Title"
                                Label="Event Title"
                                Variant="Variant.Outlined"
                                Required="true"
                                RequiredError="Title is required!"
                                Immediate="true"
                                Counter="100"
                                MaxLength="100"
                                HelperText="Give your event a catchy title" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="eventModel.Description"
                                Label="Description"
                                Variant="Variant.Outlined"
                                Required="true"
                                RequiredError="Description is required!"
                                Lines="4"
                                Counter="500"
                                MaxLength="500"
                                HelperText="Describe your event in detail" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudSelect T="string" 
                              Label="Category" 
                              @bind-Value="eventModel.Category"
                              Required="true"
                              RequiredError="Category is required!"
                              AnchorOrigin="Origin.BottomCenter"
                              Variant="Variant.Outlined">
                        <MudSelectItem Value="@("Music")">Music</MudSelectItem>
                        <MudSelectItem Value="@("Sports")">Sports</MudSelectItem>
                        <MudSelectItem Value="@("Technology")">Technology</MudSelectItem>
                        <MudSelectItem Value="@("Food")">Food & Drinks</MudSelectItem>
                        <MudSelectItem Value="@("Art")">Art & Culture</MudSelectItem>
                        <MudSelectItem Value="@("Business")">Business</MudSelectItem>
                        <MudSelectItem Value="@("Other")">Other</MudSelectItem>
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="eventModel.Location"
                                Label="Location"
                                Variant="Variant.Outlined"
                                Required="true"
                                RequiredError="Location is required!"
                                Adornment="Adornment.Start"
                                AdornmentIcon="@Icons.Material.Filled.LocationOn" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudDatePicker @bind-Value="eventModel.StartDate"
                                 Label="Event Date"
                                 Required="true"
                                 RequiredError="Date is required!"
                                 DisablePastDates="true"
                                 Variant="Variant.Outlined" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudTimePicker @bind-Value="eventModel.StartTime"
                                 Label="Start Time"
                                 Required="true"
                                 RequiredError="Time is required!"
                                 AmPm="true"
                                 Variant="Variant.Outlined" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudNumericField @bind-Value="eventModel.Price"
                                   Label="Price ($)"
                                   Required="true"
                                   RequiredError="Price is required!"
                                   Min="0"
                                   Format="N2"
                                   Variant="Variant.Outlined"
                                   Adornment="Adornment.Start"
                                   AdornmentText="$"
                                   HelperText="Set to 0 for free events" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudNumericField @bind-Value="eventModel.MaxAttendees"
                                   Label="Capacity"
                                   Required="true"
                                   RequiredError="Capacity is required!"
                                   Min="0"
                                   Variant="Variant.Outlined"
                                   HelperText="Set to 0 for unlimited capacity" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField @bind-Value="eventModel.ImageUrl"
                                Label="Event Image URL"
                                Variant="Variant.Outlined"
                                HelperText="Add an image to make your event stand out"
                                Adornment="Adornment.Start"
                                AdornmentIcon="@Icons.Material.Filled.Image" />
                </MudItem>

                @if (!string.IsNullOrEmpty(eventModel.ImageUrl))
                {
                    <MudItem xs="12">
                        <MudPaper Elevation="0" Class="d-flex justify-center pa-4">
                            <MudImage Src="@eventModel.ImageUrl"
                                     Alt="Event preview"
                                     Elevation="25"
                                     Class="rounded-lg"
                                     ObjectFit="ObjectFit.Cover"
                                     Width="400"
                                     Height="250" />
                        </MudPaper>
                    </MudItem>
                }

                <MudItem xs="12" Class="d-flex justify-space-between align-center mt-4">
                    <MudButton OnClick="@(() => NavigationManager.NavigateTo("/events"))"
                              Variant="Variant.Outlined"
                              Color="Color.Secondary"
                              Size="Size.Large"
                              StartIcon="@Icons.Material.Filled.ArrowBack">
                        Back
                    </MudButton>

                    <MudButton OnClick="CreateEventAsync"
                              Disabled="!success"
                              Variant="Variant.Filled"
                              Color="Color.Primary"
                              Size="Size.Large"
                              EndIcon="@Icons.Material.Filled.Send">
                        Create Event
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private MudForm? form;
    private bool success;
    private Event eventModel = new()
    {
        StartDate = DateTime.Today,
        StartTime = DateTime.Now.TimeOfDay,
        Price = 0,
        MaxAttendees = 50,
        Category = "Other"
    };

    private async Task CreateEventAsync()
    {
        try
        {
            await form?.Validate();
            if (form?.IsValid ?? false)
            {
                var userId = await UserService.GetCurrentUserIdAsync();
                if (string.IsNullOrEmpty(userId))
                {
                    Snackbar.Add("Please log in to create events", Severity.Warning);
                    return;
                }

                eventModel.OrganizerId = userId;
                var result = await EventService.CreateEventAsync(eventModel);
                
                if (result != null)
                {
                    Snackbar.Add("Event created successfully!", Severity.Success);
                    NavigationManager.NavigateTo("/events");
                }
                else
                {
                    Snackbar.Add("Failed to create event", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }
}
