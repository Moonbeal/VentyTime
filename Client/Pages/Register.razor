@page "/register"
@using VentyTime.Shared.Models.Auth
@using System.ComponentModel.DataAnnotations
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex flex-column align-center justify-center" Style="min-height: calc(100vh - 64px);">
    <MudPaper Elevation="3" Class="pa-8 rounded-lg" Style="width: 100%; max-width: 500px;">
        <div class="d-flex flex-column align-center mb-8">
            <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Color="Color.Primary" Size="Size.Large" Class="mb-4" Style="width: 64px; height: 64px;" />
            <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-2 font-weight-bold">Create Account</MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center">Join VentyTime to create and discover amazing events</MudText>
        </div>
        
        <MudForm @ref="form" @bind-IsValid="@success">
            <MudText Typo="Typo.h4" Class="mb-4">Register</MudText>

            <MudTextField @bind-Value="registerRequest.Username"
                         Label="Username"
                         For="@(() => registerRequest.Username)"
                         Required="true"
                         RequiredError="Username is required!" 
                         Variant="Variant.Outlined"
                         Adornment="Adornment.Start"
                         AdornmentIcon="@Icons.Material.Filled.Person"
                         id="username"
                         name="username"
                         autocomplete="username"
                         Class="mb-4" />

            <MudTextField @bind-Value="registerRequest.Email"
                         Label="Email"
                         For="@(() => registerRequest.Email)"
                         Required="true"
                         RequiredError="Email is required!"
                         InputType="InputType.Email"
                         Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"
                         Variant="Variant.Outlined"
                         Adornment="Adornment.Start"
                         AdornmentIcon="@Icons.Material.Filled.Email"
                         id="email"
                         name="email"
                         autocomplete="email"
                         Class="mb-4" />

            <MudTextField @bind-Value="registerRequest.Password"
                         Label="Password"
                         For="@(() => registerRequest.Password)"
                         Required="true"
                         RequiredError="Password is required!"
                         InputType="@PasswordInput"
                         Adornment="Adornment.End"
                         AdornmentIcon="@PasswordInputIcon"
                         OnAdornmentClick="TogglePasswordVisibility"
                         Variant="Variant.Outlined"
                         id="password"
                         name="password"
                         autocomplete="new-password"
                         Class="mb-4" />

            <MudTextField @bind-Value="registerRequest.ConfirmPassword"
                         Label="Confirm Password"
                         For="@(() => registerRequest.ConfirmPassword)"
                         Required="true"
                         RequiredError="Password confirmation is required!"
                         InputType="@PasswordInput"
                         Adornment="Adornment.End"
                         AdornmentIcon="@PasswordInputIcon"
                         OnAdornmentClick="TogglePasswordVisibility"
                         Validation="@(new Func<string, IEnumerable<string>>(ConfirmPasswordValidation))"
                         Variant="Variant.Outlined"
                         id="confirmPassword"
                         name="confirmPassword"
                         autocomplete="new-password"
                         Class="mb-4" />

            <MudItem xs="12">
                <MudButton Variant="Variant.Filled"
                          Color="Color.Primary"
                          DisableElevation="true"
                          OnClick="HandleRegistration"
                          Class="ml-auto mt-4">
                    Create Account
                </MudButton>
            </MudItem>

            <MudDivider Class="my-4" />

            <div class="d-flex justify-center mt-6">
                <MudText Align="Align.Center">
                    Already have an account? 
                    <MudLink Href="/login" Color="Color.Primary">Sign in</MudLink>
                </MudText>
            </div>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    MudForm? form;
    bool success;
    private RegisterRequest registerRequest = new();
    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private IEnumerable<string> ConfirmPasswordValidation(string arg)
    {
        if (registerRequest.Password != arg)
            yield return "Passwords do not match";
    }

    private async Task HandleRegistration()
    {
        await form?.Validate();

        if (form?.IsValid ?? false)
        {
            var result = await UserService.RegisterAsync(registerRequest);
            if (result)
            {
                NavigationManager.NavigateTo("/");
            }
        }
    }
}
