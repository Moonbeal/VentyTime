@page "/register"
@using VentyTime.Shared.Models.Auth
@using System.ComponentModel.DataAnnotations
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex flex-column align-center justify-center" Style="min-height: calc(100vh - 64px);">
    <MudPaper Elevation="3" Class="pa-8 rounded-lg" Style="width: 100%; max-width: 500px;">
        <div class="d-flex flex-column align-center mb-8">
            <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Color="Color.Primary" Size="Size.Large" Class="mb-4" Style="width: 64px; height: 64px;" />
            <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-2 font-weight-bold">Create Account</MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center">Join VentyTime to create and discover amazing events</MudText>
        </div>
        
        <MudForm @ref="form" @bind-IsValid="@success">
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="registerRequest.FirstName"
                                Label="First Name"
                                For="@(() => registerRequest.FirstName)"
                                Required="true"
                                RequiredError="First name is required!"
                                Variant="Variant.Outlined"
                                id="firstName"
                                name="firstName"
                                autocomplete="given-name"
                                Class="mb-4" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="registerRequest.LastName"
                                Label="Last Name"
                                For="@(() => registerRequest.LastName)"
                                Required="true"
                                RequiredError="Last name is required!"
                                Variant="Variant.Outlined"
                                id="lastName"
                                name="lastName"
                                autocomplete="family-name"
                                Class="mb-4" />
                </MudItem>
            </MudGrid>

            <MudTextField @bind-Value="registerRequest.Email"
                         Label="Email"
                         For="@(() => registerRequest.Email)"
                         Required="true"
                         RequiredError="Email is required!"
                         InputType="InputType.Email"
                         Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"
                         Variant="Variant.Outlined"
                         Adornment="Adornment.Start"
                         AdornmentIcon="@Icons.Material.Filled.Email"
                         id="email"
                         name="email"
                         autocomplete="email"
                         Class="mb-4" />

            <MudTextField @bind-Value="registerRequest.Password"
                         Label="Password"
                         For="@(() => registerRequest.Password)"
                         Required="true"
                         RequiredError="Password is required!"
                         InputType="@PasswordInput"
                         Adornment="Adornment.End"
                         AdornmentIcon="@PasswordInputIcon"
                         OnAdornmentClick="TogglePasswordVisibility"
                         Variant="Variant.Outlined"
                         id="password"
                         name="password"
                         autocomplete="new-password"
                         HelperText="Password must be at least 6 characters long and contain uppercase, lowercase, number and special character"
                         Class="mb-4" />

            <MudTextField @bind-Value="registerRequest.ConfirmPassword"
                         Label="Confirm Password"
                         For="@(() => registerRequest.ConfirmPassword)"
                         Required="true"
                         RequiredError="Password confirmation is required!"
                         InputType="@PasswordInput"
                         Adornment="Adornment.End"
                         AdornmentIcon="@PasswordInputIcon"
                         OnAdornmentClick="TogglePasswordVisibility"
                         Validation="@(new Func<string, IEnumerable<string>>(ConfirmPasswordValidation))"
                         Variant="Variant.Outlined"
                         id="confirmPassword"
                         name="confirmPassword"
                         autocomplete="new-password"
                         Class="mb-4" />

            <div class="d-flex justify-center mt-6">
                <MudText>Already have an account?</MudText>
                <MudLink Href="/login" Underline="Underline.Always" Class="ml-2">Login here</MudLink>
            </div>

            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      Size="Size.Large"
                      FullWidth="true"
                      OnClick="HandleRegistration"
                      Disabled="@(!success)"
                      Class="mt-4">
                CREATE ACCOUNT
            </MudButton>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private RegisterRequest registerRequest = new();
    private bool success;
    private MudForm? form;

    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        if (PasswordInput == InputType.Password)
        {
            PasswordInput = InputType.Text;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
        }
        else
        {
            PasswordInput = InputType.Password;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
        }
    }

    private IEnumerable<string> ConfirmPasswordValidation(string confirmPassword)
    {
        if (confirmPassword != registerRequest.Password)
            yield return "Passwords do not match!";
    }

    private async Task HandleRegistration()
    {
        try
        {
            if (form != null)
            {
                await form.Validate();
                
                if (form.IsValid)
                {
                    var result = await AuthService.RegisterAsync(registerRequest);
                    if (result.Success)
                    {
                        Snackbar.Add("Registration successful! Please login.", Severity.Success);
                        NavigationManager.NavigateTo("/login");
                    }
                    else
                    {
                        Snackbar.Add(result.Message ?? "Registration failed. Please try again.", Severity.Error);
                    }
                }
                else
                {
                    Snackbar.Add("Please fix the validation errors.", Severity.Warning);
                }
            }
        }
        catch (Exception error)
        {
            Console.WriteLine($"Registration error: {error.Message}");
            Snackbar.Add("An unexpected error occurred. Please try again.", Severity.Error);
        }
    }
}
