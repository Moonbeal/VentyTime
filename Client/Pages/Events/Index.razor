@page "/home"
@using VentyTime.Shared.Models
@using VentyTime.Client.Services
@using VentyTime.Client.Components
@inject IEventService EventService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-0 px-0">
    <!-- Hero Section with Mood Matcher -->
    <MudPaper Class="hero-section position-relative overflow-hidden" Style="min-height: 60vh;">
        <MudContainer>
            <div class="hero-content d-flex flex-column justify-center" style="min-height: 60vh;">
                <MudText Typo="Typo.h2" Class="mb-4">Find Your Perfect Event</MudText>
                <MudText Typo="Typo.h5" Class="mb-8">Select your mood and discover events that match your vibe</MudText>
                
                <!-- Mood Matcher -->
                <MudText Typo="Typo.h5" Class="mb-4">How are you feeling today?</MudText>
                <div class="mood-matcher d-flex gap-4 flex-wrap">
                    @foreach (var mood in moods)
                    {
                        var moodClass = $"mood-item pa-4 d-flex flex-column align-center {(selectedMood == mood.Name ? "selected" : "")}";
                        <MudPaper @onclick="() => SelectMood(mood)" 
                                 Elevation="@(selectedMood == mood.Name ? 8 : 2)"
                                 Class="@moodClass">
                            <MudText Typo="Typo.h3" Class="mb-2">@mood.Emoji</MudText>
                            <MudText>@mood.Name</MudText>
                        </MudPaper>
                    }
                </div>
                
                <!-- View All Events Button -->
                <button @onclick="NavigateToHome" class="view-all-events-button">
                    VIEW ALL EVENTS ‚Üí
                </button>
            </div>
        </MudContainer>
        
        <!-- Animated Background -->
        <div class="hero-background"></div>
    </MudPaper>

    <!-- Trending Section -->
    <MudPaper Class="mt-4 pa-6">
        <MudText Typo="Typo.h5" Class="mb-4">Trending Now</MudText>
        <div class="trending-bubbles position-relative" style="height: 500px;">
            @foreach (var trend in trendingEvents)
            {
                var categoryClass = string.IsNullOrEmpty(trend.Category) ? "other" : trend.Category.ToLower();
                <div class="trending-bubble @categoryClass" 
                     style="--size:@(trend.Popularity)px;--x:@(trend.X)%;--y:@(trend.Y)%"
                     @onclick="() => ViewEvent(trend.Id)">
                    <span>@trend.Title</span>
                </div>
            }
        </div>
    </MudPaper>

    <!-- Weekend Timeline and Roulette -->
    <MudGrid Class="mt-4">
        <MudItem xs="12" md="8">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h5" Class="mb-4">This Weekend</MudText>
                <div class="weekend-timeline">
                    @foreach (var day in weekendEvents)
                    {
                        <div class="timeline-day">
                            <MudText Typo="Typo.h6">@day.Date.ToString("dddd")</MudText>
                            @foreach (var evt in day.Events)
                            {
                                <MudPaper Class="timeline-event pa-2 mb-2" @onclick="() => ViewEvent(evt.Id)">
                                    <MudText Typo="Typo.body1">@evt.Title</MudText>
                                    <MudText Typo="Typo.body2">@evt.Time</MudText>
                                </MudPaper>
                            }
                        </div>
                    }
                </div>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="4">
            <MudPaper Class="pa-4 d-flex flex-column align-center">
                <MudText Typo="Typo.h5" Class="mb-4">Feeling Lucky?</MudText>
                <div class="roulette-wheel" @onclick="SpinRoulette">
                    <div class="wheel-inner">
                        <div class="wheel-content">
                            <MudIcon Icon="@Icons.Material.Filled.Casino" Size="Size.Large" />
                        </div>
                    </div>
                </div>
                @if (selectedRandomEvent != null)
                {
                    <MudPaper Class="mt-4 pa-4 width-100">
                        <MudText Typo="Typo.h6">@selectedRandomEvent.Title</MudText>
                        <MudButton Color="Color.Primary" 
                                  Variant="Variant.Filled" 
                                  Class="mt-2"
                                  OnClick="@(() => ViewEvent(selectedRandomEvent.Id))">
                            View Event
                        </MudButton>
                    </MudPaper>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

<style>
    .hero-section {
        background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
        color: white;
        position: relative;
        overflow: hidden;
    }

    .hero-content {
        position: relative;
        z-index: 1;
    }

    .hero-background {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: radial-gradient(circle at center, rgba(255,255,255,0.1) 0%, transparent 70%);
        opacity: 0.5;
    }

    .view-all-events-button {
        display: block;
        width: 100%;
        max-width: 400px;
        margin: 2rem auto 0;
        padding: 1rem;
        background-color: #9155fd;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .view-all-events-button:hover {
        background-color: #804bdf;
    }

    .mood-matcher {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
        width: 100%;
        max-width: 800px;
        margin-left: auto;
        margin-right: auto;
    }

    .mood-item {
        cursor: pointer;
        transition: all 0.3s ease;
        border-radius: 8px;
        background-color: rgba(255, 255, 255, 0.1);
        padding: 1rem;
        text-align: center;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .mood-item .mud-typography {
        color: white;
    }

    .mood-item:hover {
        transform: translateY(-5px);
        background-color: rgba(255, 255, 255, 0.2);
    }

    .mood-item.selected {
        background-color: rgba(255, 255, 255, 0.3);
        transform: translateY(-5px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .mood-item .emoji {
        font-size: 2rem;
        margin-bottom: 0.5rem;
    }
</style>

@code {
    private List<EventDto> events = new();
    private string selectedMood = "";
    private readonly List<MoodOption> moods = new()
    {
        new MoodOption { Name = "Energetic", Emoji = "‚ö°" },
        new MoodOption { Name = "Creative", Emoji = "üé®" },
        new MoodOption { Name = "Relaxed", Emoji = "üåø" },
        new MoodOption { Name = "Social", Emoji = "üéâ" },
        new MoodOption { Name = "Focused", Emoji = "üéØ" },
        new MoodOption { Name = "Adventurous", Emoji = "üåé" },
        new MoodOption { Name = "Romantic", Emoji = "üíù" },
        new MoodOption { Name = "Intellectual", Emoji = "üß†" },
        new MoodOption { Name = "Mindful", Emoji = "üßò" },
        new MoodOption { Name = "Foodie", Emoji = "üçΩÔ∏è" },
        new MoodOption { Name = "Musical", Emoji = "üéµ" },
        new MoodOption { Name = "Sporty", Emoji = "‚öΩ" }
    };

    private EventDto? selectedRandomEvent;
    private bool isRouletteSpinning = false;

    private List<EventStory> eventStories = new();
    private List<TrendingEvent> trendingEvents = new();
    private List<WeekendDay> weekendEvents = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
        InitializeStories();
        InitializeTrendingEvents();
        InitializeWeekendEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            var result = await EventService.GetEventsAsync();
            events = result.Events?.ToList() ?? new List<EventDto>();
        }
        catch (Exception ex)
        {
            // Log the error or show a notification
            Console.WriteLine($"Error loading events: {ex.Message}");
            events = new List<EventDto>();
        }
    }

    private void InitializeStories()
    {
        eventStories = events.Where(e => !string.IsNullOrEmpty(e.Title))
            .Take(5)
            .Select(e => new EventStory
            {
                Id = e.Id,
                Title = e.Title!,
                ImageUrl = e.ImageUrl ?? "images/default-event.jpg",
                StartDate = e.StartDate
            }).ToList();
    }

    private void InitializeTrendingEvents()
    {
        Random rnd = new Random();
        trendingEvents = events.Where(e => !string.IsNullOrEmpty(e.Title))
            .Take(8)
            .Select(e => new TrendingEvent
            {
                Id = e.Id,
                Title = e.Title!,
                Category = e.Category ?? "Other",
                Popularity = rnd.Next(60, 120),
                X = rnd.Next(10, 90),
                Y = rnd.Next(10, 90)
            }).ToList();
    }

    private void InitializeWeekendEvents()
    {
        var weekend = events
            .Where(e => e.StartDate.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday && !string.IsNullOrEmpty(e.Title))
            .OrderBy(e => e.StartDate)
            .GroupBy(e => e.StartDate.Date)
            .Select(g => new WeekendDay
            {
                Date = g.Key,
                Events = g.Select(e => new WeekendEvent
                {
                    Id = e.Id,
                    Title = e.Title!,
                    Time = e.StartDate.ToString("HH:mm")
                }).ToList()
            }).ToList();

        weekendEvents = weekend;
    }

    private void SelectMood(MoodOption mood)
    {
        selectedMood = selectedMood == mood.Name ? "" : mood.Name;
    }

    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/events");
    }

    private void ViewStory(EventStory story)
    {
        NavigationManager.NavigateTo($"/events/{story.Id}");
    }

    private void ViewEvent(int eventId)
    {
        NavigationManager.NavigateTo($"/events/{eventId}");
    }

    private async Task SpinRoulette()
    {
        if (isRouletteSpinning) return;
        
        isRouletteSpinning = true;
        StateHasChanged();
        
        await Task.Delay(1000); // Simulating spin animation
        
        Random rnd = new Random();
        if (events.Any())
        {
            selectedRandomEvent = events[rnd.Next(events.Count)];
        }
        
        isRouletteSpinning = false;
        StateHasChanged();
    }

    private class MoodOption
    {
        public string Name { get; set; } = "";
        public string Emoji { get; set; } = "";
    }

    private class EventStory
    {
        public int Id { get; set; }
        public required string Title { get; set; }
        public required string ImageUrl { get; set; }
        public DateTime StartDate { get; set; }
    }

    private class TrendingEvent
    {
        public int Id { get; set; }
        public required string Title { get; set; }
        public required string Category { get; set; }
        public int Popularity { get; set; }
        public int X { get; set; }
        public int Y { get; set; }
    }

    private class WeekendDay
    {
        public DateTime Date { get; set; }
        public required List<WeekendEvent> Events { get; set; }
    }

    private class WeekendEvent
    {
        public int Id { get; set; }
        public required string Title { get; set; }
        public required string Time { get; set; }
    }
}
