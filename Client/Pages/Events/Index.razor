@page "/events"
@using VentyTime.Shared.Models
@using VentyTime.Client.Services
@using VentyTime.Client.Components
@inject IEventService EventService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-0 px-0">
    <!-- Hero Section with Mood Matcher -->
    <MudPaper Class="hero-section position-relative overflow-hidden" Style="min-height: 60vh;">
        <MudContainer>
            <div class="hero-content d-flex flex-column justify-center" style="min-height: 60vh;">
                <MudText Typo="Typo.h1" Class="mood-title mb-4">Discover Your Next Experience</MudText>
                <MudText Typo="Typo.h5" Class="mb-8">How do you feel today?</MudText>
                
                <!-- Mood Matcher -->
                <div class="mood-matcher d-flex gap-4 flex-wrap">
                    @foreach (var mood in moods)
                    {
                        <MudPaper @onclick="() => SelectMood(mood)" 
                                 Elevation="@(selectedMood == mood.Name ? 8 : 2)"
                                 Class="@($"mood-item pa-4 d-flex flex-column align-center {(selectedMood == mood.Name ? "selected" : "")}")">
                            <MudText Typo="Typo.h3" Class="mb-2">@mood.Emoji</MudText>
                            <MudText>@mood.Name</MudText>
                        </MudPaper>
                    }
                </div>
            </div>
        </MudContainer>
        
        <!-- Animated Background -->
        <div class="hero-background"></div>
    </MudPaper>

    <!-- Map and Stories Section -->
    <MudGrid Class="mt-4">
        <MudItem xs="12" md="8">
            <MudPaper Class="pa-4" Style="height: 500px;">
                <EventMap Events="@events" />
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" md="4">
            <MudPaper Class="pa-4" Style="height: 500px; overflow-y: auto;">
                <MudText Typo="Typo.h5" Class="mb-4">Event Stories</MudText>
                <div class="stories-container">
                    @foreach (var story in eventStories)
                    {
                        <MudPaper @onclick="() => ViewStory(story)" Class="story-item mb-4 position-relative">
                            <MudImage Src="@story.ImageUrl" Height="200" Width="100%" ObjectFit="ObjectFit.Cover" />
                            <div class="story-overlay d-flex flex-column justify-end pa-4">
                                <MudText Typo="Typo.h6" Class="text-white">@story.Title</MudText>
                                <MudText Typo="Typo.body2" Class="text-white">@story.StartDate.ToString("MMM dd")</MudText>
                            </div>
                        </MudPaper>
                    }
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <!-- Trending Section -->
    <MudPaper Class="mt-4 pa-6">
        <MudText Typo="Typo.h5" Class="mb-4">Trending Now</MudText>
        <div class="trending-bubbles position-relative" style="height: 200px;">
            @foreach (var trend in trendingEvents)
            {
                <div class="trending-bubble @trend.Category?.ToLower()"
                     style="@($"--size: {trend.Popularity}px; --x: {trend.X}%; --y: {trend.Y}%;")"
                     @onclick="() => ViewEvent(trend.Id)">
                    <span>@trend.Title</span>
                </div>
            }
        </div>
    </MudPaper>

    <!-- Weekend Timeline and Roulette -->
    <MudGrid Class="mt-4">
        <MudItem xs="12" md="8">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h5" Class="mb-4">This Weekend</MudText>
                <div class="weekend-timeline">
                    @foreach (var day in weekendEvents)
                    {
                        <div class="timeline-day">
                            <MudText Typo="Typo.h6">@day.Date.ToString("dddd")</MudText>
                            @foreach (var evt in day.Events)
                            {
                                <MudPaper Class="timeline-event pa-2 mb-2" @onclick="() => ViewEvent(evt.Id)">
                                    <MudText Typo="Typo.body1">@evt.Title</MudText>
                                    <MudText Typo="Typo.body2">@evt.Time</MudText>
                                </MudPaper>
                            }
                        </div>
                    }
                </div>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="4">
            <MudPaper Class="pa-4 d-flex flex-column align-center">
                <MudText Typo="Typo.h5" Class="mb-4">Feeling Lucky?</MudText>
                <div class="roulette-wheel" @onclick="SpinRoulette">
                    <div class="wheel-inner">
                        <div class="wheel-content">
                            <MudIcon Icon="@Icons.Material.Filled.Casino" Size="Size.Large" />
                        </div>
                    </div>
                </div>
                @if (selectedRandomEvent != null)
                {
                    <MudPaper Class="mt-4 pa-4 width-100">
                        <MudText Typo="Typo.h6">@selectedRandomEvent.Title</MudText>
                        <MudText Typo="Typo.body2">@selectedRandomEvent.Description</MudText>
                        <MudButton Color="Color.Primary" 
                                  Variant="Variant.Filled" 
                                  Class="mt-2"
                                  OnClick="@(() => ViewEvent(selectedRandomEvent.Id))">
                            View Event
                        </MudButton>
                    </MudPaper>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<EventDto> events = new();
    private string selectedMood = "";
    private EventDto? selectedRandomEvent;
    private bool isRouletteSpinning = false;

    private List<MoodOption> moods = new()
    {
        new() { Name = "Energetic", Emoji = "âš¡" },
        new() { Name = "Creative", Emoji = "ðŸŽ¨" },
        new() { Name = "Relaxed", Emoji = "ðŸŒ¿" },
        new() { Name = "Social", Emoji = "ðŸŽ‰" },
        new() { Name = "Focused", Emoji = "ðŸŽ¯" },
        new() { Name = "Adventurous", Emoji = "ðŸŒŽ" }
    };

    private List<EventStory> eventStories = new();
    private List<TrendingEvent> trendingEvents = new();
    private List<WeekendDay> weekendEvents = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
        InitializeStories();
        InitializeTrendingEvents();
        InitializeWeekendEvents();
    }

    private async Task LoadEvents()
    {
        var result = await EventService.GetEventsAsync(page: 1, pageSize: null, category: null, searchQuery: null, startDate: null, endDate: null);
        events = result.Events.ToList();
    }

    private void InitializeStories()
    {
        eventStories = events.Take(5).Select(e => new EventStory
        {
            Id = e.Id,
            Title = e.Title ?? "",
            ImageUrl = e.ImageUrl ?? "images/default-event.jpg",
            StartDate = e.StartDate
        }).ToList();
    }

    private void InitializeTrendingEvents()
    {
        Random rnd = new Random();
        trendingEvents = events.Take(8).Select(e => new TrendingEvent
        {
            Id = e.Id,
            Title = e.Title ?? "",
            Category = e.Category ?? "Other",
            Popularity = rnd.Next(60, 120),
            X = rnd.Next(10, 90),
            Y = rnd.Next(10, 90)
        }).ToList();
    }

    private void InitializeWeekendEvents()
    {
        var weekend = events
            .Where(e => e.StartDate.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday)
            .OrderBy(e => e.StartDate)
            .GroupBy(e => e.StartDate.Date)
            .Select(g => new WeekendDay
            {
                Date = g.Key,
                Events = g.Select(e => new WeekendEvent
                {
                    Id = e.Id,
                    Title = e.Title ?? "",
                    Time = e.StartDate.ToString("HH:mm")
                }).ToList()
            }).ToList();

        weekendEvents = weekend;
    }

    private async Task SelectMood(MoodOption mood)
    {
        selectedMood = mood.Name;
        // Implement mood-based filtering logic
        await Task.CompletedTask;
    }

    private void ViewStory(EventStory story)
    {
        NavigationManager.NavigateTo($"/events/{story.Id}");
    }

    private void ViewEvent(int eventId)
    {
        NavigationManager.NavigateTo($"/events/{eventId}");
    }

    private async Task SpinRoulette()
    {
        if (isRouletteSpinning) return;
        
        isRouletteSpinning = true;
        StateHasChanged();
        
        await Task.Delay(1000); // Simulating spin animation
        
        Random rnd = new Random();
        if (events.Any())
        {
            selectedRandomEvent = events[rnd.Next(events.Count)];
        }
        
        isRouletteSpinning = false;
        StateHasChanged();
    }

    private class MoodOption
    {
        public required string Name { get; set; }
        public required string Emoji { get; set; }
    }

    private class EventStory
    {
        public int Id { get; set; }
        public required string Title { get; set; }
        public required string ImageUrl { get; set; }
        public DateTime StartDate { get; set; }
    }

    private class TrendingEvent
    {
        public int Id { get; set; }
        public required string Title { get; set; }
        public required string Category { get; set; }
        public int Popularity { get; set; }
        public int X { get; set; }
        public int Y { get; set; }
    }

    private class WeekendDay
    {
        public DateTime Date { get; set; }
        public required List<WeekendEvent> Events { get; set; }
    }

    private class WeekendEvent
    {
        public int Id { get; set; }
        public required string Title { get; set; }
        public required string Time { get; set; }
    }
}
