@page "/"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using VentyTime.Shared.Models
@using VentyTime.Client.Services
@using MudBlazor
@using VentyTime.Client.Components
@using System.Timers

@inject IEventService EventService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>VentyTime - Discover Amazing Events</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <div class="hero-section">
        <MudGrid>
            <MudItem xs="12" md="6" Class="d-flex flex-column justify-center">
                <MudText Typo="Typo.h2" Class="mb-4">Find Your Next Adventure</MudText>
                <MudText Typo="Typo.h5" Class="mb-6">Discover, join, and create unforgettable events in your community</MudText>
                <div class="search-box mb-6">
                    <MudTextField @bind-Value="searchQuery" 
                                Placeholder="Search events..." 
                                Adornment="Adornment.Start"
                                AdornmentIcon="@Icons.Material.Filled.Search"
                                Class="mt-0"
                                Immediate="true"
                                OnKeyUp="@SearchEvents"
                                DebounceInterval="500" />
                </div>
                <div class="d-flex gap-4 flex-wrap">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" 
                              Class="px-8" OnClick="@(() => NavigationManager.NavigateTo("/events"))">
                        Browse Events
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Large"
                              OnClick="@(() => NavigationManager.NavigateTo("/create-event"))">
                        Create Event
                    </MudButton>
                </div>
            </MudItem>
        </MudGrid>
    </div>

    @if (isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (!string.IsNullOrEmpty(error))
    {
        <MudAlert Severity="Severity.Error">@error</MudAlert>
    }
    else
    {
        <MudTabs Elevation="0" Color="Color.Primary" Rounded="true" PanelClass="mt-6">
            <MudTabPanel Text="Featured Events">
                <MudGrid>
                    @foreach (var eventItem in events)
                    {
                        <MudItem xs="12" sm="6" md="4">
                            <MudCard Class="event-card" @onclick="@(() => NavigateToEventDetails(eventItem.Id))">
                                <MudCardMedia Image="@(string.IsNullOrEmpty(eventItem.ImageUrl) ? "/images/default-event.jpg" : eventItem.ImageUrl)" 
                                            Height="200" />
                                <MudCardContent>
                                    <MudText Typo="Typo.h6" Class="mb-2">@eventItem.Title</MudText>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">
                                        @eventItem.StartDate.ToShortDateString() at @eventItem.StartTime.ToString(@"hh\:mm")
                                    </MudText>
                                    <MudText Typo="Typo.body2" Class="text-truncate">@eventItem.Description</MudText>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton Variant="Variant.Text" Color="Color.Primary">Learn More</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </MudTabPanel>
        </MudTabs>
    }
</MudContainer>

@code {
    private List<Event> events = new();
    private List<Event> searchResults = new();
    private bool isLoading = true;
    private string? error;
    private string searchQuery = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            events = await EventService.GetUpcomingEventsAsync();
            isLoading = false;
        }
        catch (Exception ex)
        {
            error = "Error loading data: " + ex.Message;
            isLoading = false;
        }
    }

    private async Task SearchEvents(KeyboardEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            searchResults.Clear();
            return;
        }

        try
        {
            searchResults = await EventService.SearchEventsAsync(searchQuery);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error searching events: {ex.Message}", Severity.Error);
        }
    }

    private void NavigateToEventDetails(int eventId)
    {
        NavigationManager.NavigateTo($"/event/{eventId}");
    }
}
