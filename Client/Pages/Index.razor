@page "/"
@using VentyTime.Shared.Models
@using VentyTime.Client.Services
@using VentyTime.Client.Components
@using Microsoft.AspNetCore.Components.Authorization
@using System.Timers

@inject IEventService EventService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>VentyTime - Discover Amazing Events</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudGrid>
        <!-- Hero Section -->
        <MudItem xs="12">
            <div class="hero-section pa-8 mb-8">
                <MudText Typo="Typo.h2" Class="mb-4">Discover Amazing Events</MudText>
                <MudText Typo="Typo.h6" Class="mb-6">Find and join exciting events in your area</MudText>
                
                <MudTextField T="string" 
                             @bind-Value="searchQuery"
                             Placeholder="Search events..."
                             Variant="Variant.Outlined"
                             Class="mt-4 mb-4 search-field"
                             Adornment="Adornment.Start"
                             AdornmentIcon="@Icons.Material.Filled.Search"
                             AdornmentColor="Color.Primary"
                             OnKeyUp="@(async (e) => { if (e.Key == "Enter") await HandleSearch(); })" />
                
                <MudButton Class="explore-button" 
                           StartIcon="@Icons.Material.Filled.Explore" 
                           OnClick="@(() => NavigationManager.NavigateTo("/events"))">
                    EXPLORE EVENTS
                </MudButton>
            </div>
        </MudItem>

        @if (_isLoading)
        {
            <MudItem xs="12">
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
            </MudItem>
        }

        <!-- Quick Stats -->
        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Class="d-flex flex-column align-center pa-6 stats-card" Elevation="0">
                        <MudIcon Icon="@Icons.Material.Filled.Event" Color="Color.Primary" Size="Size.Large" Class="stats-icon" />
                        <MudText Typo="Typo.h3" Class="mt-4 stats-number">@searchResults.Count</MudText>
                        <MudText Typo="Typo.subtitle1" Class="stats-label">Total Events</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Class="d-flex flex-column align-center pa-6 stats-card" Elevation="0">
                        <MudIcon Icon="@Icons.Material.Filled.Today" Color="Color.Secondary" Size="Size.Large" Class="stats-icon" />
                        <MudText Typo="Typo.h3" Class="mt-4 stats-number">@searchResults.Count(e => e.StartDate.Date == DateTime.Today)</MudText>
                        <MudText Typo="Typo.subtitle1" Class="stats-label">Today's Events</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Class="d-flex flex-column align-center pa-6 stats-card" Elevation="0">
                        <MudIcon Icon="@Icons.Material.Filled.Upcoming" Color="Color.Info" Size="Size.Large" Class="stats-icon" />
                        <MudText Typo="Typo.h3" Class="mt-4 stats-number">@searchResults.Count(e => e.StartDate > DateTime.Today)</MudText>
                        <MudText Typo="Typo.subtitle1" Class="stats-label">Upcoming Events</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Class="d-flex flex-column align-center pa-6 stats-card" Elevation="0">
                        <MudIcon Icon="@Icons.Material.Filled.Favorite" Color="Color.Error" Size="Size.Large" Class="stats-icon" />
                        <MudText Typo="Typo.h3" Class="mt-4 stats-number">@searchResults.Count(e => e.IsFeatured)</MudText>
                        <MudText Typo="Typo.subtitle1" Class="stats-label">Featured Events</MudText>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>

        <!-- Quick Filters -->
        <MudItem xs="12">
            <div class="d-flex gap-2 flex-wrap">
                <MudChip Color="Color.Default"
                         Variant="@(selectedCategories.Count == 0 ? Variant.Filled : Variant.Outlined)"
                         OnClick="@(() => FilterByCategory(null))">
                    All Events
                </MudChip>
                @foreach (var category in EventCategories.All)
                {
                    <MudChip Color="Color.Primary"
                            Variant="@(selectedCategories.Contains(category) ? Variant.Filled : Variant.Outlined)"
                            OnClick="@(() => FilterByCategory(category))">
                        @category
                    </MudChip>
                }
            </div>
        </MudItem>

        <!-- Featured Events -->
        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="12" Class="d-flex justify-space-between align-center">
                    <MudText Typo="Typo.h5">Featured Events</MudText>
                    <MudButton Variant="Variant.Text" 
                              Color="Color.Primary"
                              OnClick="@(() => NavigationManager.NavigateTo("/events"))">
                        View All
                    </MudButton>
                </MudItem>

                @if (!_isLoading && (!searchResults?.Any() ?? true))
                {
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Info" Class="my-4">
                            No events found. Try adjusting your filters or check back later!
                        </MudAlert>
                    </MudItem>
                }
                else
                {
                    @foreach (var evt in searchResults.Take(4))
                    {
                        <MudItem xs="12" sm="6" md="3">
                            <MudCard Class="event-card">
                                @if (!string.IsNullOrEmpty(evt.ImageUrl))
                                {
                                    <MudCardMedia Image="@evt.ImageUrl" Height="200" />
                                }
                                else
                                {
                                    <MudCardMedia Class="event-placeholder" Height="200">
                                        <MudIcon Icon="@Icons.Material.Filled.Event" Size="Size.Large" />
                                    </MudCardMedia>
                                }
                                <MudCardContent>
                                    <MudText Typo="Typo.h6" Class="mb-2">@evt.Title</MudText>
                                    <MudText Typo="Typo.body2" Class="mb-2">@evt.Description?.Substring(0, Math.Min(100, evt.Description.Length))...</MudText>
                                    <div class="d-flex gap-2 mb-2">
                                        <MudChip Size="Size.Small" Color="@Color.Primary">@evt.Category</MudChip>
                                        <MudChip Size="Size.Small" Color="@Color.Secondary">@evt.Type</MudChip>
                                    </div>
                                    <MudText Typo="Typo.body2" Class="d-flex align-center gap-2">
                                        <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" />
                                        @evt.Location
                                    </MudText>
                                    <MudText Typo="Typo.body2" Class="d-flex align-center gap-2">
                                        <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" />
                                        @evt.StartDate.ToString("MMM dd, yyyy HH:mm")
                                    </MudText>
                                </MudCardContent>
                                <MudCardActions Class="d-flex justify-space-between">
                                    <MudButton Variant="Variant.Text" 
                                             Color="Color.Primary"
                                             OnClick="@(() => NavigateToEventDetails(evt.Id))">
                                        Details
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled" 
                                             Color="Color.Primary"
                                             OnClick="@(() => RegisterForEvent(evt.Id))"
                                             Disabled="_isLoading">
                                        Register
                                    </MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                }
            </MudGrid>
        </MudItem>

        <!-- Calendar Section -->
        <MudItem xs="12">
            <div class="events-calendar">
                <MudGrid>
                    <MudItem xs="12" md="4">
                        <MudText Typo="Typo.h5" Class="calendar-title mb-4">Events Calendar</MudText>
                        <MudDatePicker @bind-Date="selectedDate"
                                     Label="Select Date"
                                     DisableToolbar="true"
                                     Rounded="true"
                                     Class="mb-4" />
                        @{
                            var selectedDateEvents = searchResults
                                .Where(e => e.StartDate.Date == selectedDate?.Date)
                                .OrderBy(e => e.StartDate)
                                .ToList();
                        }
                        @if (!selectedDateEvents.Any())
                        {
                            <MudText Typo="Typo.body2" Class="mud-text-secondary">
                                No events scheduled for this date.
                            </MudText>
                        }
                        else
                        {
                            foreach (var evt in selectedDateEvents)
                            {
                                <MudPaper Class="pa-4 mb-2" Elevation="0">
                                    <MudText Typo="Typo.subtitle1">@evt.Title</MudText>
                                    <MudText Typo="Typo.body2">@evt.StartDate.ToString("HH:mm") - @evt.Location</MudText>
                                </MudPaper>
                            }
                        }
                    </MudItem>
                </MudGrid>
            </div>
        </MudItem>
    </MudGrid>
</MudContainer>

<style>
    .hero-section {
        background: linear-gradient(135deg, #9333EA 0%, #E11D48 100%);
        color: white;
        border-radius: var(--mud-default-borderradius);
        position: relative;
        overflow: hidden;
    }

    .hero-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('images/pattern.svg') center/cover;
        opacity: 0.1;
        pointer-events: none;
    }

    .search-field {
        max-width: 600px;
        margin: 0 auto;
        background-color: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: var(--mud-default-borderradius);
    }

    .search-field ::deep .mud-input {
        color: white;
    }

    .search-field ::deep .mud-input-outlined {
        border-color: rgba(255, 255, 255, 0.3);
    }

    .search-field ::deep .mud-input-outlined:hover {
        border-color: rgba(255, 255, 255, 0.5);
    }

    .explore-button {
        background-color: rgba(255, 255, 255, 0.2) !important;
        color: white !important;
        border: 2px solid rgba(255, 255, 255, 0.3) !important;
        transition: all 0.3s ease;
    }

    .explore-button:hover {
        background-color: white !important;
        color: var(--mud-palette-primary) !important;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .stats-card {
        background-color: var(--mud-palette-background);
        border: 1px solid var(--mud-palette-lines-default);
        transition: all 0.3s ease;
    }

    .stats-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }

    .stats-icon {
        font-size: 2.5rem;
    }

    .stats-number {
        font-weight: 600;
        color: var(--mud-palette-primary);
    }

    .stats-label {
        color: var(--mud-palette-text-secondary);
    }

    .event-card {
        height: 100%;
        display: flex;
        flex-direction: column;
        transition: all 0.3s ease;
    }

    .event-card:hover {
        transform: translateY(-2px);
        box-shadow: var(--mud-elevation-4);
    }

    .event-placeholder {
        background-color: var(--mud-palette-background-grey);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .event-placeholder .mud-icon {
        opacity: 0.5;
    }

    .events-calendar {
        background-color: var(--mud-palette-background);
        border: 1px solid var(--mud-palette-lines-default);
        border-radius: var(--mud-default-borderradius);
        padding: 2rem;
    }

    .calendar-title {
        color: var(--mud-palette-primary);
    }
</style>

@code {
    private List<Event> events = new();
    private List<Event> searchResults = new();
    private string searchQuery = "";
    private bool _isLoading = false;
    private DateTime? selectedDate = DateTime.Today;
    private HashSet<string> selectedCategories = new();
    private int totalCount;

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            _isLoading = true;
            StateHasChanged();
            var result = await EventService.GetEventsAsync();
            events = result.Events;
            totalCount = result.TotalCount;
            searchResults = events;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load events: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task FilterByCategory(string? category)
    {
        try
        {
            _isLoading = true;
            StateHasChanged();

            if (category == null)
            {
                selectedCategories.Clear();
                searchResults = events;
            }
            else
            {
                if (selectedCategories.Contains(category))
                {
                    selectedCategories.Remove(category);
                }
                else
                {
                    selectedCategories.Add(category);
                }

                searchResults = selectedCategories.Count > 0
                    ? events.Where(e => selectedCategories.Contains(e.Category)).ToList()
                    : events;
            }
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ApplyFilters()
    {
        try
        {
            _isLoading = true;
            StateHasChanged();

            searchResults = events;

            if (selectedCategories.Count > 0)
            {
                searchResults = searchResults.Where(e => selectedCategories.Contains(e.Category)).ToList();
            }

            if (!string.IsNullOrWhiteSpace(searchQuery))
            {
                searchResults = searchResults.Where(e => 
                    e.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    e.Description.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    e.Location.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
                ).ToList();
            }
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleSearch()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
            return;

        NavigationManager.NavigateTo($"/events?q={Uri.EscapeDataString(searchQuery)}");
    }

    private void NavigateToEventDetails(int eventId) => NavigationManager.NavigateTo($"/event/{eventId}");
    private void NavigateToEventRegistration(int eventId) => NavigationManager.NavigateTo($"/event/{eventId}/register");

    private string GetCategoryColor(string category)
    {
        return category switch
        {
            "Technology" => "primary",
            "Business" => "secondary",
            "Entertainment" => "success",
            "Sports" => "warning",
            "Education" => "info",
            "Other" => "dark",
            _ => "default"
        };
    }

    private async Task RegisterForEvent(int eventId)
    {
        try
        {
            _isLoading = true;
            StateHasChanged();

            var (success, errorMessage) = await EventService.RegisterForEventAsync(eventId);
            if (success)
            {
                Snackbar.Add("Successfully registered for event!", Severity.Success);
                await LoadEvents();
            }
            else
            {
                Snackbar.Add(errorMessage ?? "Failed to register for event", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred while registering for the event: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
}
