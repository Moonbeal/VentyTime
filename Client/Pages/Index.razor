@page "/"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using VentyTime.Shared.Models
@using VentyTime.Client.Services
@using MudBlazor
@using VentyTime.Client.Components

@inject IEventService EventService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Events - Eventify</PageTitle>

<div class="hero-section">
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
        <div class="text-center mb-8">
            <MudText Typo="Typo.h2" Class="gradient-text mb-4">Discover Amazing Events</MudText>
            <MudText Typo="Typo.body1" Class="mb-6">Join our community and participate in exciting events.</MudText>
            <div class="d-flex justify-center gap-4">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" Class="gradient-button" OnClick="@(() => NavigationManager.NavigateTo("/events"))">Browse Events</MudButton>
            </div>
        </div>

        @if (isLoading)
        {
            <div class="d-flex justify-center">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
        else if (error != null)
        {
            <MudAlert Severity="Severity.Error">@error</MudAlert>
        }
        else if (events == null || !events.Any())
        {
            <MudAlert Severity="Severity.Info">No events found.</MudAlert>
        }
        else
        {
            <div class="events-grid">
                @foreach (var eventItem in events)
                {
                    <MudPaper @onclick="@(() => SelectEvent(eventItem))" 
                              Class="@($"pa-4 rounded-lg event-card {(selectedEvent?.Id == eventItem.Id ? "selected" : "")}")"
                              Elevation="3">
                        <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-2">@eventItem.Title</MudText>
                        <div class="d-flex gap-2 mb-2">
                            <MudChip Color="Color.Primary" Size="Size.Small">@eventItem.Category</MudChip>
                            <MudChip Color="Color.Secondary" Size="Size.Small">$@eventItem.Price</MudChip>
                        </div>
                        <div class="d-flex gap-2 align-center mb-2">
                            <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Small"/>
                            <MudText Typo="Typo.body2">@eventItem.StartDate.ToShortDateString()</MudText>
                        </div>
                        <div class="d-flex gap-2 align-center mb-2">
                            <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small"/>
                            <MudText Typo="Typo.body2">@eventItem.Location</MudText>
                        </div>
                        <MudProgressLinear Color="Color.Secondary" 
                                         Value="@(((double)eventItem.CurrentParticipants / eventItem.MaxAttendees) * 100)" 
                                         Class="my-2" />
                        <MudText Typo="Typo.caption" Align="Align.End">
                            @eventItem.CurrentParticipants/@eventItem.MaxAttendees spots filled
                        </MudText>
                    </MudPaper>
                }
            </div>
        }
    </MudContainer>
</div>

@code {
    private List<Event> events = new();
    private Event? selectedEvent;
    private bool isLoading = true;
    private string error = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            events = await EventService.GetEventsAsync();
            isLoading = false;
        }
        catch (Exception ex)
        {
            error = "Error loading events: " + ex.Message;
            isLoading = false;
        }
    }

    private void SelectEvent(Event eventItem)
    {
        selectedEvent = eventItem;
    }
}

<style>
    .hero-section {
        background: linear-gradient(135deg, #f3e8ff 0%, #ffffff 100%);
        min-height: 100vh;
        padding: 2rem 0;
    }

    .gradient-text {
        background: linear-gradient(135deg, #8B5CF6 0%, #EC4899 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-weight: bold;
    }

    .gradient-button {
        background: linear-gradient(135deg, #8B5CF6 0%, #EC4899 100%);
    }

    .events-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1rem;
        padding: 1rem;
    }

    .event-card {
        cursor: pointer;
        transition: all 0.2s ease-in-out;
    }

    .event-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .event-card.selected {
        border: 2px solid var(--mud-palette-primary);
    }

    .stats-card {
        background: rgba(255, 255, 255, 0.8);
        backdrop-filter: blur(10px);
        transition: all 0.2s ease-in-out;
    }

    .stats-card:hover {
        transform: translateY(-2px);
    }
</style>
