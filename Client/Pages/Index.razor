@page "/"
@using VentyTime.Shared.Models
@using VentyTime.Client.Services
@using VentyTime.Client.Components
@using Microsoft.AspNetCore.Components.Authorization
@using System.Timers

@inject IEventService EventService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>VentyTime - Discover Amazing Events</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @if (isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mb-4" />
    }

    <MudGrid>
        <!-- Hero Section -->
        <MudItem xs="12">
            <div class="hero-section">
                <MudText Typo="Typo.h2">Discover Amazing Events</MudText>
                <MudText Typo="Typo.h6">Find and join exciting events in your area</MudText>
                
                <MudTextField T="string" 
                             @bind-Value="searchQuery"
                             Placeholder="Search events..."
                             Variant="Variant.Outlined"
                             Class="search-field"
                             Adornment="Adornment.Start"
                             AdornmentIcon="@Icons.Material.Filled.Search"
                             AdornmentColor="Color.Default"
                             OnKeyUp="@(async (e) => { if (e.Key == "Enter") await HandleSearch(); })" />
                
                <MudButton Class="explore-button" 
                          StartIcon="@Icons.Material.Filled.Explore" 
                          OnClick="@(() => NavigationManager.NavigateTo("/events"))">
                    EXPLORE EVENTS
                </MudButton>
            </div>
        </MudItem>

        <!-- Quick Stats -->
        <MudItem xs="12">
            <MudGrid>
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Class="stats-card" Elevation="0">
                        <MudIcon Icon="@Icons.Material.Filled.Event" Color="Color.Primary" Size="Size.Large" Class="stats-icon" />
                        <MudText Class="stats-number">@events.Count</MudText>
                        <MudText Class="stats-label">Total Events</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Class="stats-card" Elevation="0">
                        <MudIcon Icon="@Icons.Material.Filled.Today" Color="Color.Secondary" Size="Size.Large" Class="stats-icon" />
                        <MudText Class="stats-number">@events.Count(e => e.StartDate.Date == DateTime.Today)</MudText>
                        <MudText Class="stats-label">Today's Events</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Class="stats-card" Elevation="0">
                        <MudIcon Icon="@Icons.Material.Filled.Upcoming" Color="Color.Info" Size="Size.Large" Class="stats-icon" />
                        <MudText Class="stats-number">@events.Count(e => e.StartDate > DateTime.Today)</MudText>
                        <MudText Class="stats-label">Upcoming Events</MudText>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Class="stats-card" Elevation="0">
                        <MudIcon Icon="@Icons.Material.Filled.Favorite" Color="Color.Error" Size="Size.Large" Class="stats-icon" />
                        <MudText Class="stats-number">@events.Count(e => e.IsFeatured)</MudText>
                        <MudText Class="stats-label">Featured Events</MudText>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>

        <!-- Quick Filters -->
        <MudItem xs="12" Class="mt-4">
            <MudPaper Class="pa-4" Elevation="0">
                <MudText Typo="Typo.h6" Class="mb-4">Quick Filters</MudText>
                <div class="d-flex gap-2 flex-wrap">
                    <MudChip Color="Color.Default"
                            Variant="@(selectedCategories.Count == 0 ? Variant.Filled : Variant.Outlined)"
                            OnClick="@(() => FilterByCategory(null))">
                        All Events
                    </MudChip>
                    @foreach (var category in EventCategories.All)
                    {
                        <MudChip Color="Color.Primary"
                                Variant="@(selectedCategories.Contains(category) ? Variant.Filled : Variant.Outlined)"
                                OnClick="@(() => FilterByCategory(category))">
                            @category
                        </MudChip>
                    }
                </div>
            </MudPaper>
        </MudItem>

        <!-- Featured Events Section -->
        <MudItem xs="12" Class="mt-4">
            <MudGrid>
                <MudItem xs="12" Class="d-flex justify-space-between align-center mb-4">
                    <MudText Typo="Typo.h5">Featured Events</MudText>
                    <MudButton Variant="Variant.Text" 
                              Color="Color.Primary" 
                              EndIcon="@Icons.Material.Filled.ArrowForward"
                              OnClick="@(() => NavigationManager.NavigateTo("/events"))">
                        View All
                    </MudButton>
                </MudItem>
                @foreach (var eventItem in events.Where(e => e.IsFeatured).Take(3))
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudCard Class="event-card">
                            <MudCardMedia Image="@(string.IsNullOrEmpty(eventItem.ImageUrl) ? "/images/default-event.jpg" : eventItem.ImageUrl)"
                                         Height="200" />
                            <div class="event-content">
                                <div class="event-category">@eventItem.Category</div>
                                <div class="event-title">@eventItem.Title</div>
                                <div class="event-description">@eventItem.Description</div>
                                <div class="event-info">
                                    <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" />
                                    <span>@eventItem.Location</span>
                                </div>
                            </div>
                            <div class="event-footer">
                                <div class="event-price">
                                    @(eventItem.Price > 0 ? $"${eventItem.Price:F2}" : "Free")
                                </div>
                                <div>
                                    <MudButton Color="Color.Primary" 
                                              Variant="Variant.Text"
                                              OnClick="@(() => ShowEventDetails(eventItem))">
                                        Learn More
                                    </MudButton>
                                    <MudButton Color="Color.Primary" 
                                              Variant="Variant.Filled"
                                              OnClick="@(() => HandleRegisterClick(eventItem))">
                                        Register
                                    </MudButton>
                                </div>
                            </div>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>

        <!-- Calendar Section -->
        <MudItem xs="12" Class="mt-6">
            <MudPaper Class="pa-4" Elevation="0">
                <MudGrid>
                    <MudItem xs="12" md="4">
                        <MudText Typo="Typo.h5" Class="calendar-title">Events Calendar</MudText>
                        <MudDatePicker @bind-Date="selectedDate" 
                                     Label="Select Date" 
                                     DateFormat="MM/dd/yyyy"
                                     DisableToolbar="true"
                                     PickerVariant="PickerVariant.Dialog" />
                    </MudItem>
                    <MudItem xs="12" md="8">
                        <MudList Clickable="true" Class="pa-0">
                            @{
                                var eventsForDate = events.Where(e => e.StartDate.Date == selectedDate?.Date).ToList();
                            }
                            @if (!eventsForDate.Any())
                            {
                                <MudText Typo="Typo.subtitle1" Class="pa-4 text-center">No events scheduled for this date</MudText>
                            }
                            else
                            {
                                @foreach (var eventItem in eventsForDate)
                                {
                                    <MudListItem @onclick="@(() => NavigationManager.NavigateTo($"/event/{eventItem.Id}"))" Class="calendar-event">
                                        <div class="calendar-event-content">
                                            <MudText Class="calendar-event-title">@eventItem.Title</MudText>
                                            <MudText Class="calendar-event-description">@eventItem.Description</MudText>
                                            <div class="calendar-event-details">
                                                <div class="calendar-event-location">
                                                    <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" />
                                                    <span>@eventItem.Location</span>
                                                </div>
                                                <div class="calendar-event-capacity">
                                                    <MudIcon Icon="@Icons.Material.Filled.Group" Size="Size.Small" />
                                                    <span>@eventItem.MaxAttendees spots available</span>
                                                </div>
                                            </div>
                                        </div>
                                    </MudListItem>
                                }
                            }
                        </MudList>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<EventDto> events = new();
    private string searchQuery = "";
    private bool isLoading;
    private DateTime? selectedDate = DateTime.Today;
    private HashSet<string> selectedCategories = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            var result = await EventService.GetEventsAsync();
            events = result.Events.ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading events: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleSearch()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            await LoadEvents();
            return;
        }

        try
        {
            isLoading = true;
            StateHasChanged();
            events = (await EventService.SearchEventsAsync(searchQuery)).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error searching events: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterByCategory(string? category)
    {
        if (category == null)
        {
            selectedCategories.Clear();
        }
        else
        {
            if (selectedCategories.Contains(category))
                selectedCategories.Remove(category);
            else
                selectedCategories.Add(category);
        }
    }

    private async Task ShowEventDetails(EventDto eventItem)
    {
        var parameters = new DialogParameters
        {
            { "Event", eventItem }
        };

        var dialog = await DialogService.ShowAsync<EventDetailsDialog>("Event Details", parameters);
        var result = await dialog.Result;
    }

    private async Task HandleRegisterClick(EventDto eventItem)
    {
        try
        {
            var (success, errorMessage) = await EventService.RegisterForEventAsync(eventItem.Id);
            if (success)
            {
                Snackbar.Add("Successfully registered for the event!", Severity.Success);
                await LoadEvents();
            }
            else
            {
                Snackbar.Add(errorMessage ?? "Failed to register for the event.", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }
}
