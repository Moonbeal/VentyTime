@page "/"
@using VentyTime.Shared.Models
@using VentyTime.Client.Services
@using VentyTime.Client.Components
@using Microsoft.AspNetCore.Components.Authorization
@using System.Timers

@inject IEventService EventService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>VentyTime - Discover Amazing Events</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <div class="hero-section pa-8 mb-8">
        <MudText Typo="Typo.h2" Class="mb-4">Discover Amazing Events</MudText>
        <MudText Typo="Typo.h6" Class="mb-6">Find and join exciting events in your area</MudText>
        
        <MudTextField T="string" 
                     @bind-Value="searchQuery"
                     Placeholder="Search events..."
                     Variant="Variant.Outlined"
                     Class="mt-4 mb-4 search-field"
                     Adornment="Adornment.Start"
                     AdornmentIcon="@Icons.Material.Filled.Search"
                     AdornmentColor="Color.Primary"
                     OnKeyUp="@(async (e) => { if (e.Key == "Enter") await HandleSearch(); })" />
        
        <MudButton Class="explore-button" 
                   StartIcon="@Icons.Material.Filled.Explore" 
                   OnClick="@(() => NavigationManager.NavigateTo("/events"))">
            EXPLORE ALL EVENTS
        </MudButton>
    </div>

    <!-- Event Mosaic -->
    <div class="event-mosaic @(isCompact ? "compact" : "expanded")">
        <div class="mosaic-controls mb-4">
            <MudText Typo="Typo.h5">Featured Events</MudText>
            <div class="d-flex gap-2">
                <MudIconButton Icon="@Icons.Material.Filled.ViewModule" 
                             Color="@(isCompact ? Color.Default : Color.Primary)"
                             OnClick="@(() => isCompact = false)" />
                <MudIconButton Icon="@Icons.Material.Filled.ViewComfy" 
                             Color="@(!isCompact ? Color.Default : Color.Primary)"
                             OnClick="@(() => isCompact = true)" />
            </div>
        </div>

        <div class="mosaic-grid">
            @foreach (var evt in searchResults.Take(6))
            {
                <div class="mosaic-item @GetMosaicItemSize(evt)" @onclick="@(() => NavigateToEventDetails(evt.Id))">
                    <div class="mosaic-content">
                        @if (!string.IsNullOrEmpty(evt.ImageUrl))
                        {
                            <div class="event-image" style="background-image: url(@evt.ImageUrl)"></div>
                        }
                        <div class="event-overlay">
                            <div class="event-info">
                                <MudText Typo="Typo.h5" Class="event-title">@evt.Title</MudText>
                                <MudText Typo="Typo.body2" Class="event-date">
                                    <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Small" />
                                    @evt.StartDate.ToLocalTime().ToString("MMM dd, yyyy")
                                </MudText>
                                <MudText Typo="Typo.body2" Class="event-location">
                                    <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" />
                                    @evt.Location
                                </MudText>
                                <MudButton Variant="Variant.Text" 
                                         Color="Color.Primary" 
                                         Class="view-details-btn"
                                         OnClick="@(() => NavigateToEventDetails(evt.Id))">
                                    View Details
                                </MudButton>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="text-center mt-6">
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary" 
                      Size="Size.Large"
                      OnClick="@(() => NavigationManager.NavigateTo("/events"))">
                View All Events
            </MudButton>
        </div>
    </div>

    <EventCalendar Events="@searchResults" OnEventClick="@((evt) => NavigateToEventDetails(evt.Id))" />
</MudContainer>

<style>
    .hero-section {
        background: linear-gradient(135deg, #9333EA 0%, #E11D48 100%);
        color: white;
        border-radius: var(--mud-default-borderradius);
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .hero-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        z-index: 0;
    }

    .stats-card {
        background: rgba(255, 255, 255, 0.9);
        border-radius: 12px;
        transition: all 0.2s ease-in-out;
        border: 1px solid rgba(147, 51, 234, 0.1);
        backdrop-filter: blur(10px);
        position: relative;
        overflow: hidden;
    }

    .stats-card::before {
        content: '';
        position: absolute;
        width: 4px;
        height: 4px;
        background: white;
        border-radius: 50%;
        animation: star-float-1 3s ease-in-out infinite;
        opacity: 0.7;
    }

    .stats-card:nth-child(1)::before {
        animation-duration: 4s;
        animation-delay: 0s;
    }

    .stats-card:nth-child(2)::before {
        animation-duration: 5s;
        animation-delay: 1s;
    }

    .stats-card:nth-child(3)::before {
        animation-duration: 3.5s;
        animation-delay: 0.5s;
    }

    .stats-card:nth-child(4)::before {
        animation-duration: 4.5s;
        animation-delay: 1.5s;
    }

    @keyframes star-float-1 {
        0% {
            transform: translate(0, 0) scale(1);
            opacity: 0;
        }
        50% {
            transform: translate(100px, -50px) scale(1.5);
            opacity: 0.8;
        }
        100% {
            transform: translate(200px, 0) scale(1);
            opacity: 0;
        }
    }

    .event-card {
        transition: all 0.2s ease-in-out;
        height: 100%;
        background: rgba(255, 255, 255, 0.9);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        backdrop-filter: blur(10px);
        position: relative;
    }

    .event-card::before {
        content: '';
        position: absolute;
        width: 3px;
        height: 3px;
        background: rgba(147, 51, 234, 0.8);
        border-radius: 50%;
        animation: star-float-2 4s ease-in-out infinite;
        opacity: 0.6;
    }

    .event-card:nth-child(1)::before {
        animation-duration: 3s;
        animation-delay: 0.2s;
    }

    .event-card:nth-child(2)::before {
        animation-duration: 4.5s;
        animation-delay: 1.2s;
    }

    .event-card:nth-child(3)::before {
        animation-duration: 3.8s;
        animation-delay: 0.8s;
    }

    @keyframes star-float-2 {
        0% {
            transform: translate(0, 0) scale(1) rotate(0deg);
            opacity: 0;
        }
        50% {
            transform: translate(-80px, -30px) scale(1.8) rotate(180deg);
            opacity: 0.8;
        }
        100% {
            transform: translate(-160px, 0) scale(1) rotate(360deg);
            opacity: 0;
        }
    }

    .events-calendar {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        padding: 24px;
        box-shadow: 0 2px 8px rgba(147, 51, 234, 0.15);
        border: 1px solid rgba(147, 51, 234, 0.3);
        margin-top: 2rem;
        backdrop-filter: blur(10px);
        position: relative;
        overflow: hidden;
    }

    .events-calendar::before {
        content: '';
        position: absolute;
        width: 5px;
        height: 5px;
        background: rgba(233, 30, 99, 0.8);
        border-radius: 50%;
        animation: star-float-3 5s ease-in-out infinite;
        opacity: 0.7;
    }

    @keyframes star-float-3 {
        0% {
            transform: translate(0, 0) scale(1) rotate(0deg);
            opacity: 0;
        }
        50% {
            transform: translate(120px, -80px) scale(2) rotate(-180deg);
            opacity: 0.9;
        }
        100% {
            transform: translate(240px, 0) scale(1) rotate(-360deg);
            opacity: 0;
        }
    }

    .search-field {
        max-width: 600px;
        margin: 0 auto;
    }

    .search-field ::deep .mud-input {
        background-color: white;
        border-radius: var(--mud-default-borderradius);
    }

    .explore-button {
        background-color: white !important;
        color: var(--mud-palette-primary) !important;
        padding: 12px 24px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .explore-button:hover {
        background-color: white !important;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .event-mosaic {
        margin-top: 2rem;
    }

    .mosaic-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .mosaic-grid {
        display: grid;
        grid-gap: 1rem;
        transition: all 0.3s ease;
    }

    .expanded .mosaic-grid {
        grid-template-columns: repeat(12, 1fr);
    }

    .compact .mosaic-grid {
        grid-template-columns: repeat(3, 1fr);
    }

    .mosaic-item {
        position: relative;
        border-radius: var(--mud-default-borderradius);
        overflow: hidden;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .mosaic-item:hover {
        transform: translateY(-4px);
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    }

    .expanded .mosaic-item.size-large {
        grid-column: span 8;
        grid-row: span 2;
    }

    .expanded .mosaic-item.size-medium {
        grid-column: span 4;
        grid-row: span 2;
    }

    .expanded .mosaic-item.size-small {
        grid-column: span 4;
        grid-row: span 1;
    }

    .compact .mosaic-item {
        grid-column: span 1;
        grid-row: span 1;
    }

    @@media (max-width: 959px) {
        .expanded .mosaic-grid {
            grid-template-columns: repeat(6, 1fr);
        }

        .compact .mosaic-grid {
            grid-template-columns: repeat(2, 1fr);
        }

        .expanded .mosaic-item.size-large {
            grid-column: span 6;
        }

        .expanded .mosaic-item.size-medium,
        .expanded .mosaic-item.size-small {
            grid-column: span 3;
        }
    }

    @@media (max-width: 599px) {
        .expanded .mosaic-grid,
        .compact .mosaic-grid {
            grid-template-columns: 1fr;
        }

        .mosaic-item {
            grid-column: span 1 !important;
        }
    }

    .mosaic-content {
        position: relative;
        width: 100%;
        height: 100%;
        min-height: 250px;
    }

    .event-image {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-size: cover;
        background-position: center;
    }

    .event-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(to top, rgba(0, 0, 0, 0.8), transparent);
        opacity: 0;
        transition: opacity 0.3s ease;
        display: flex;
        align-items: flex-end;
        padding: 1.5rem;
        color: white;
    }

    .mosaic-item:hover .event-overlay {
        opacity: 1;
    }

    .event-info {
        width: 100%;
    }

    .event-title {
        margin-bottom: 0.5rem;
        color: white;
    }

    .event-date, .event-location {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 0.25rem;
        color: rgba(255, 255, 255, 0.9);
    }

    .view-details-btn {
        margin-top: 1rem;
        color: white !important;
        border: 1px solid white;
    }
</style>

@code {
    private List<Event> events = new();
    private List<Event> searchResults = new();
    private string searchQuery = "";
    private bool isLoading = false;
    private bool isCompact = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            isLoading = true;
            events = await EventService.GetEventsAsync();
            searchResults = events;
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to load events", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetMosaicItemSize(Event evt)
    {
        if (!isCompact)
        {
            // Определяем размер карточки на основе характеристик события
            if (evt.IsFeatured && evt.ImageUrl != null)
                return "size-large";
            if (evt.ImageUrl != null || evt.IsFeatured)
                return "size-medium";
            return "size-small";
        }
        return "";
    }

    private async Task HandleSearch()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
            return;

        NavigationManager.NavigateTo($"/events?q={Uri.EscapeDataString(searchQuery)}");
    }

    private void NavigateToEventDetails(int eventId)
    {
        NavigationManager.NavigateTo($"/event/{eventId}");
    }
}
