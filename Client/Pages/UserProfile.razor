@page "/profile"
@using VentyTime.Shared.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using VentyTime.Client.Services
@using System.Linq
@using System
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Authorization

@inherits ComponentBase
@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (loading)
    {
        <div class="d-flex justify-center align-center" style="height: 400px;">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </div>
    }
    else if (currentUser == null)
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="my-4">User not found.</MudAlert>
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" sm="4">
                <MudPaper Elevation="3" Class="pa-6 rounded-lg">
                    <MudAvatar Size="Size.Large" Color="Color.Primary" Class="mb-4">
                        @(currentUser.FirstName?.Substring(0, 1).ToUpper() ?? "U")
                    </MudAvatar>
                    
                    <MudText Typo="Typo.h5" Class="mb-4">@($"{currentUser.FirstName} {currentUser.LastName}")</MudText>
                    
                    <MudList Dense="true">
                        <MudListItem Icon="@Icons.Material.Filled.Email">
                            @currentUser.Email
                        </MudListItem>
                        <MudListItem Icon="@Icons.Material.Filled.Phone">
                            @(currentUser.PhoneNumber ?? "No phone number")
                        </MudListItem>
                    </MudList>
                </MudPaper>
            </MudItem>
            
            <MudItem xs="12" sm="8">
                <MudTabs Elevation="3" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                    <MudTabPanel Text="My Events">
                        @if (registeredEvents == null || !registeredEvents.Any())
                        {
                            <MudAlert Severity="Severity.Info" Class="my-4">You haven't registered for any events yet.</MudAlert>
                        }
                        else
                        {
                            <MudList Dense="true">
                                @foreach (var eventItem in registeredEvents)
                                {
                                    <MudListItem>
                                        <MudPaper Elevation="0" Class="pa-4">
                                            <div class="d-flex justify-space-between align-center">
                                                <div>
                                                    <MudText Typo="Typo.h6">@eventItem.Title</MudText>
                                                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                                                        @eventItem.StartDate.ToString("dddd, MMMM d, yyyy")
                                                    </MudText>
                                                    <MudText Typo="Typo.body2">
                                                        @eventItem.StartDate.ToString("h:mm tt") - @eventItem.EndDate.ToString("h:mm tt")
                                                    </MudText>
                                                </div>
                                                <MudButton Variant="Variant.Outlined"
                                                          Color="Color.Primary"
                                                          Size="Size.Small"
                                                          OnClick="@(() => ViewEventDetails(eventItem.Id))">
                                                    View Details
                                                </MudButton>
                                            </div>
                                        </MudPaper>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                    </MudTabPanel>
                </MudTabs>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    [Inject] private IAuthService AuthService { get; set; } = default!;
    [Inject] private IUserService UserService { get; set; } = default!;
    [Inject] private IEventService EventService { get; set; } = default!;
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;
    [Inject] private ISnackbar Snackbar { get; set; } = default!;

    private User? currentUser;
    private List<Event>? registeredEvents;
    private bool loading = true;

    private void ViewEventDetails(int eventId)
    {
        NavigationManager.NavigateTo($"/events/{eventId}");
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            currentUser = await UserService.GetCurrentUserAsync();
            if (currentUser != null)
            {
                registeredEvents = (await EventService.GetRegisteredEventsAsync()).ToList();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error loading profile", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }
}
