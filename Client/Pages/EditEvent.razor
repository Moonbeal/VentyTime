@page "/events/edit/{EventId:int}"
@using VentyTime.Shared.Models
@using VentyTime.Client.Services
@using VentyTime.Client.Extensions
@using MudBlazor
@inject IEventService EventService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (_event == null)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else
    {
        <MudText Typo="Typo.h4" Class="mb-4">Edit Event</MudText>

        <EditForm Model="_event" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />

            <MudCard>
                <MudCardContent>
                    <MudTextField @bind-Value="_event.Title" Label="Title" Required="true" />
                    <MudTextField @bind-Value="_event.Description" Label="Description" Lines="3" />
                    <MudTextField @bind-Value="_event.Location" Label="Location" Required="true" />
                    <MudNumericField @bind-Value="_event.MaxAttendees" Label="Maximum Attendees" Min="0" />

                    <MudDatePicker Date="_event.StartDate" DateChanged="date => { _event.StartDate = date ?? DateTime.Today; }" Label="Start Date" Required="true" />
                    <MudTimePicker Time="_event.StartTime" TimeChanged="time => { _event.StartTime = time ?? TimeSpan.Zero; }" Label="Start Time" Required="true" />

                    <MudDatePicker Date="_event.EndDate" DateChanged="date => { _event.EndDate = date ?? DateTime.Today; }" Label="End Date" Required="true" />
                    <MudTimePicker Time="_event.EndTime" TimeChanged="time => { _event.EndTime = time ?? TimeSpan.Zero; }" Label="End Time" Required="true" />

                    <MudSelect @bind-Value="_event.Category" Label="Category" Required="true">
                        @foreach (var category in categories)
                        {
                            <MudSelectItem Value="@category">@category</MudSelectItem>
                        }
                    </MudSelect>

                    <MudTextField @bind-Value="_event.ImageUrl" Label="Image URL" />
                </MudCardContent>

                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save Changes</MudButton>
                    <MudButton OnClick="NavigateBack" Variant="Variant.Outlined" Color="Color.Secondary">Cancel</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    }
</MudContainer>

@code {
    [Parameter]
    public int EventId { get; set; }

    private Event? _event;
    private List<string> categories = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _event = await EventService.GetEventByIdAsync(EventId);
            categories = (await EventService.GetCategoriesAsync()).ToList();
        }
        catch (Exception)
        {
            Snackbar.Add("Failed to load event", Severity.Error);
            NavigateBack();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await EventService.UpdateEventAsync(_event!);
            Snackbar.Add("Event updated successfully", Severity.Success);
            NavigateBack();
        }
        catch (Exception)
        {
            Snackbar.Add("Failed to update event", Severity.Error);
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo($"/events/{EventId}");
    }
}
