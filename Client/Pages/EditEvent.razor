@page "/events/{Id:int}/edit"
@using VentyTime.Shared.Models
@inject IEventService EventService
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
    @if (loading)
    {
        <div class="d-flex justify-center align-center" style="height: 400px;">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </div>
    }
    else if (eventModel == null)
    {
        <MudAlert Severity="Severity.Error">Event not found.</MudAlert>
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" sm="8">
                <MudPaper Elevation="3" Class="pa-6 rounded-lg">
                    <EditForm Model="@eventModel" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <MudForm @ref="form" @bind-IsValid="@success">
                            <div class="d-flex justify-space-between align-center mb-6">
                                <div>
                                    <MudText Typo="Typo.h3" Color="Color.Primary" Class="mb-2">Edit Event</MudText>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">Update your event details below</MudText>
                                </div>
                            </div>

                            <MudGrid>
                                <MudItem xs="12">
                                    <MudTextField @bind-Value="eventModel.Title" 
                                                Label="Event Title"
                                                For="@(() => eventModel.Title)"
                                                Required="true"
                                                RequiredError="Title is required"
                                                Variant="Variant.Outlined" />
                                </MudItem>

                                <MudItem xs="12">
                                    <MudTextField @bind-Value="eventModel.Description"
                                                Label="Description"
                                                For="@(() => eventModel.Description)"
                                                Required="true"
                                                RequiredError="Description is required"
                                                Lines="3"
                                                Variant="Variant.Outlined" />
                                </MudItem>

                                <MudItem xs="12" sm="6">
                                    <MudSelect T="string" 
                                              Label="Category" 
                                              For="@(() => eventModel.Category)"
                                              @bind-Value="eventModel.Category"
                                              Required="true"
                                              RequiredError="Category is required"
                                              AnchorOrigin="Origin.BottomCenter"
                                              Variant="Variant.Outlined">
                                        <MudSelectItem Value="@("Music")">Music</MudSelectItem>
                                        <MudSelectItem Value="@("Sports")">Sports</MudSelectItem>
                                        <MudSelectItem Value="@("Technology")">Technology</MudSelectItem>
                                        <MudSelectItem Value="@("Food")">Food & Drinks</MudSelectItem>
                                    </MudSelect>
                                </MudItem>

                                <MudItem xs="12">
                                    <label class="form-label">Date and Time</label>
                                    <div class="d-flex gap-2">
                                        <div class="flex-grow-1">
                                            <MudDatePicker Label="Date" 
                                                         Date="@eventModel.StartDate"
                                                         DateChanged="@((DateTime? date) => UpdateEventDate(date))"
                                                         Required="true"
                                                         Variant="Variant.Outlined"
                                                         DisableToolbar="false"
                                                         MinDate="@DateTime.Today" />
                                        </div>
                                        <div class="flex-grow-1">
                                            <MudTimePicker Label="Time"
                                                         Time="@eventModel.StartDate.TimeOfDay"
                                                         TimeChanged="@((TimeSpan? time) => UpdateEventTime(time))"
                                                         Required="true"
                                                         Variant="Variant.Outlined"
                                                         AmPm="true" />
                                        </div>
                                    </div>
                                </MudItem>

                                <MudItem xs="12">
                                    <MudNumericField @bind-Value="eventModel.MaxAttendees"
                                                   Label="Maximum Attendees (0 for unlimited)"
                                                   For="@(() => eventModel.MaxAttendees)"
                                                   Required="true"
                                                   Min="0"
                                                   Variant="Variant.Outlined" />
                                </MudItem>

                                <MudItem xs="12">
                                    <MudTextField @bind-Value="eventModel.Location"
                                                Label="Location"
                                                For="@(() => eventModel.Location)"
                                                Required="true"
                                                RequiredError="Location is required"
                                                Variant="Variant.Outlined" />
                                </MudItem>

                                <MudItem xs="12">
                                    <MudTextField @bind-Value="eventModel.ImageUrl"
                                                Label="Image URL"
                                                For="@(() => eventModel.ImageUrl)"
                                                Variant="Variant.Outlined" />
                                </MudItem>

                                <MudItem xs="12" Class="d-flex justify-space-between">
                                    <MudButton Variant="Variant.Filled" 
                                             Color="Color.Primary" 
                                             ButtonType="ButtonType.Submit"
                                             Disabled="@(!success || loading)">
                                        Save Changes
                                    </MudButton>
                                    <MudButton Variant="Variant.Outlined" 
                                             Color="Color.Secondary"
                                             OnClick="@(() => NavigationManager.NavigateTo($"/events/{Id}"))">
                                        Cancel
                                    </MudButton>
                                </MudItem>
                            </MudGrid>
                        </MudForm>
                    </EditForm>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" sm="4">
                <MudPaper Elevation="3" Class="pa-6 rounded-lg">
                    <MudText Typo="Typo.h5" Class="mb-4">Event Preview</MudText>
                    <MudCard>
                        @if (!string.IsNullOrEmpty(eventModel.ImageUrl))
                        {
                            <MudCardMedia Image="@eventModel.ImageUrl" Height="200" />
                        }
                        <MudCardContent>
                            <MudText Typo="Typo.h5">@eventModel.Title</MudText>
                            <MudText Typo="Typo.body2">@eventModel.Description</MudText>
                            <MudText Typo="Typo.body2" Class="mt-2">
                                <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" />
                                @eventModel.Location
                            </MudText>
                            <MudText Typo="Typo.body2">
                                <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Small" />
                                @eventModel.StartDate.ToString("f")
                            </MudText>
                            <MudText Typo="Typo.body2">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" />
                                @eventModel.MaxAttendees spots available
                            </MudText>
                        </MudCardContent>
                    </MudCard>
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    [Parameter]
    public int Id { get; set; }

    private EventDto eventModel = new EventDto();
    private bool loading = true;
    private bool success;
    private MudForm form;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (int.TryParse(Id.ToString(), out int eventId))
            {
                var eventDto = await EventService.GetEventByIdAsync(eventId);
                if (eventDto == null)
                {
                    NavigationManager.NavigateTo("/events");
                    return;
                }
                eventModel = eventDto;
            }
            else
            {
                NavigationManager.NavigateTo("/events");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading event: {ex.Message}");
            NavigationManager.NavigateTo("/events");
        }
        finally
        {
            loading = false;
        }
    }

    private void UpdateEventDate(DateTime? date)
    {
        if (date.HasValue)
        {
            eventModel.StartDate = eventModel.StartDate.Date == default ? 
                date.Value : 
                date.Value.Add(eventModel.StartDate.TimeOfDay);
            Console.WriteLine($"Time zone offset for event date: {TimeZoneInfo.Local.GetUtcOffset(eventModel.StartDate).TotalMinutes} minutes");
        }
    }

    private void UpdateEventTime(TimeSpan? time)
    {
        if (time.HasValue)
        {
            var date = eventModel.StartDate.Date == default ? 
                DateTime.Today : 
                eventModel.StartDate.Date;
            eventModel.StartDate = date.Add(time.Value);
        }
    }

    private async Task HandleSubmit()
    {
        if (!success)
        {
            Snackbar.Add("Please fill in all required fields correctly.", Severity.Warning);
            return;
        }

        try
        {
            loading = true;
            await EventService.UpdateEventAsync(eventModel);
            Snackbar.Add("Event updated successfully!", Severity.Success);
            NavigationManager.NavigateTo($"/events/{Id}");
        }
        catch (InvalidOperationException ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Server error: {ex.Message}", Severity.Error);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating event: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }
}
