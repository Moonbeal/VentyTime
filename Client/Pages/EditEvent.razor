@page "/events/{Id:int}/edit"
@using VentyTime.Shared.Models
@inject IEventService EventService
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
    @if (loading)
    {
        <div class="d-flex justify-center align-center" style="height: 400px;">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </div>
    }
    else if (eventModel == null)
    {
        <MudAlert Severity="Severity.Error">Event not found.</MudAlert>
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" sm="8">
                <MudPaper Elevation="3" Class="pa-6 rounded-lg">
                    <MudForm @ref="form" @bind-IsValid="@success">
                        <div class="d-flex justify-space-between align-center mb-6">
                            <div>
                                <MudText Typo="Typo.h3" Color="Color.Primary" Class="mb-2">Edit Event</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Update your event details below</MudText>
                            </div>
                        </div>

                        <MudGrid>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="eventModel.Title" 
                                            Label="Event Title"
                                            Required="true"
                                            RequiredError="Title is required"
                                            Variant="Variant.Outlined" />
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField @bind-Value="eventModel.Description"
                                            Label="Description"
                                            Required="true"
                                            RequiredError="Description is required"
                                            Lines="3"
                                            Variant="Variant.Outlined" />
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudDatePicker Date="@eventModel.StartDate"
                                             DateChanged="@((DateTime? date) => eventModel.StartDate = date ?? DateTime.Today)"
                                             Label="Start Date"
                                             Required="true"
                                             RequiredError="Start date is required"
                                             Variant="Variant.Outlined" />
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudTimePicker Time="@eventModel.StartTime"
                                             TimeChanged="@((TimeSpan? time) => eventModel.StartTime = time ?? DateTime.Now.TimeOfDay)"
                                             Label="Start Time"
                                             Required="true"
                                             RequiredError="Start time is required"
                                             Variant="Variant.Outlined" />
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField @bind-Value="eventModel.Location"
                                            Label="Location"
                                            Required="true"
                                            RequiredError="Location is required"
                                            Variant="Variant.Outlined" />
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField @bind-Value="eventModel.ImageUrl"
                                            Label="Image URL"
                                            Variant="Variant.Outlined" />
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField @bind-Value="eventModel.Price"
                                            Label="Price"
                                            Required="true"
                                            RequiredError="Price is required"
                                            Variant="Variant.Outlined"
                                            AdornmentText="$"
                                            Adornment="Adornment.Start" />
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField @bind-Value="eventModel.MaxAttendees"
                                            Label="Maximum Attendees (0 for unlimited)"
                                            Required="true"
                                            RequiredError="Maximum attendees is required"
                                            Variant="Variant.Outlined" />
                            </MudItem>

                            <MudItem xs="12" Class="d-flex justify-center mt-4">
                                <MudButton Variant="Variant.Filled"
                                         Color="Color.Primary"
                                         Size="Size.Large"
                                         OnClick="SaveChangesAsync"
                                         Disabled="!success">
                                    Save Changes
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudForm>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" sm="4">
                <MudPaper Elevation="3" Class="pa-6 rounded-lg">
                    <MudText Typo="Typo.h5" Class="mb-4">Event Preview</MudText>
                    @if (!string.IsNullOrEmpty(eventModel.ImageUrl))
                    {
                        <img src="@eventModel.ImageUrl"
                             alt="Event preview"
                             class="rounded-lg mb-4"
                             style="object-fit: cover; height: 200px; width: 100%;" />
                    }
                    else
                    {
                        <div class="d-flex align-center justify-center rounded-lg mb-4" style="height: 200px; background-color: var(--mud-palette-background-grey)">
                            <MudIcon Icon="@Icons.Material.Filled.Image" Color="Color.Secondary" Size="Size.Large" />
                        </div>
                    }

                    <MudText Typo="Typo.h6" Class="mt-4">@eventModel.Title</MudText>
                    <MudText Typo="Typo.body2" Class="mt-2">@eventModel.Description</MudText>
                    <MudDivider Class="my-4" />
                    <MudText Typo="Typo.body2">
                        <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Class="mr-2" Size="Size.Small" />
                        @eventModel.StartDate.ToString("D")
                    </MudText>
                    <MudText Typo="Typo.body2" Class="mt-2">
                        <MudIcon Icon="@Icons.Material.Filled.Schedule" Class="mr-2" Size="Size.Small" />
                        @eventModel.StartTime.ToString(@"hh\:mm")
                    </MudText>
                    <MudText Typo="Typo.body2" Class="mt-2">
                        <MudIcon Icon="@Icons.Material.Filled.Place" Class="mr-2" Size="Size.Small" />
                        @eventModel.Location
                    </MudText>
                    <MudText Typo="Typo.body2" Class="mt-2">
                        <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Class="mr-2" Size="Size.Small" />
                        @eventModel.Price
                    </MudText>
                    <MudText Typo="Typo.body2" Class="mt-2">
                        <MudIcon Icon="@Icons.Material.Filled.Group" Class="mr-2" Size="Size.Small" />
                        @eventModel.MaxAttendees
                    </MudText>
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    [Parameter]
    public int Id { get; set; }

    private bool loading = true;
    private bool success;
    private MudForm? form;
    private Event? eventModel;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            eventModel = await EventService.GetEventByIdAsync(Id);
            if (eventModel == null)
            {
                Snackbar.Add("Event not found", Severity.Error);
                NavigationManager.NavigateTo("/events");
                return;
            }

            var userId = await UserService.GetCurrentUserIdAsync();
            if (string.IsNullOrEmpty(userId) || userId != eventModel.OrganizerId)
            {
                Snackbar.Add("You don't have permission to edit this event", Severity.Error);
                NavigationManager.NavigateTo("/events");
                return;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task SaveChangesAsync()
    {
        try
        {
            if (eventModel == null) return;

            var result = await EventService.UpdateEventAsync(eventModel);
            if (result != null)
            {
                Snackbar.Add("Event updated successfully!", Severity.Success);
                NavigationManager.NavigateTo($"/events/{result.Id}");
            }
            else
            {
                Snackbar.Add("Failed to update event", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }
}
