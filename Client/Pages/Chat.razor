@page "/chat"
@using VentyTime.Shared.Models
@using Microsoft.AspNetCore.Authorization
@inject IUserService UserService
@inject ISnackbar Snackbar
@attribute [Authorize]

<div class="chat-page fade-in">
    <div class="chat-container glass-card">
        <div class="conversations-sidebar">
            <div class="search-box">
                <MudTextField @bind-Value="_searchText"
                            Placeholder="Search conversations..."
                            Adornment="Adornment.Start"
                            AdornmentIcon="@Icons.Material.Filled.Search"
                            Immediate="true"
                            Class="mt-0" />
            </div>

            <div class="conversations-list">
                @if (_conversations == null)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                }
                else if (!_conversations.Any())
                {
                    <div class="empty-state">
                        <MudIcon Icon="@Icons.Material.Filled.Chat" Size="Size.Large" />
                        <p>No conversations yet</p>
                    </div>
                }
                else
                {
                    @foreach (var conversation in _conversations)
                    {
                        <div class="conversation-item @(conversation == _selectedConversation ? "selected" : "")"
                             @onclick="() => SelectConversation(conversation)">
                            <MudAvatar Color="Color.Primary" Size="Size.Medium">
                                @(conversation.OtherUser?.Username?[0] ?? 'U')
                            </MudAvatar>
                            <div class="conversation-info">
                                <div class="conversation-name">@(conversation.OtherUser?.Username ?? "Unknown")</div>
                                <div class="conversation-preview">@(conversation.LastMessage?.Content ?? "")</div>
                            </div>
                            @if (conversation.UnreadCount > 0)
                            {
                                <MudBadge Content="@conversation.UnreadCount" Color="Color.Primary" Overlap="true" />
                            }
                        </div>
                    }
                }
            </div>
        </div>

        <div class="chat-content">
            @if (_selectedConversation == null)
            {
                <div class="empty-state">
                    <MudIcon Icon="@Icons.Material.Filled.Chat" Size="Size.Large" />
                    <p>Select a conversation to start chatting</p>
                </div>
            }
            else
            {
                <div class="chat-header">
                    <MudText Typo="Typo.h6">@(_selectedConversation.OtherUser?.Username ?? "Unknown")</MudText>
                </div>

                <div class="messages-container" @ref="_messagesContainerRef">
                    @foreach (var message in _selectedConversation.Messages)
                    {
                        <div class="message @(message.IsFromCurrentUser ? "sent" : "received")">
                            <div class="message-content">
                                <div class="message-text">@message.Content</div>
                                <div class="message-time">@message.Timestamp.ToString("HH:mm")</div>
                            </div>
                        </div>
                    }
                </div>

                <div class="message-input">
                    <MudTextField @bind-Value="_newMessage"
                                Placeholder="Type a message..."
                                Immediate="true"
                                OnKeyDown="@HandleKeyPress"
                                Class="mr-2" />
                    <MudButton Color="Color.Primary"
                              Variant="Variant.Filled"
                              OnClick="SendMessage"
                              Disabled="string.IsNullOrWhiteSpace(_newMessage)"
                              Class="gradient-button">
                        Send
                    </MudButton>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .chat-page {
        padding: 2rem;
        min-height: calc(100vh - var(--header-height));
    }

    .chat-container {
        display: flex;
        height: calc(100vh - var(--header-height) - 4rem);
        gap: 2rem;
    }

    .conversations-sidebar {
        width: 300px;
        display: flex;
        flex-direction: column;
        border-right: 1px solid var(--border-color);
    }

    .search-box {
        padding: 1rem;
        border-bottom: 1px solid var(--border-color);
    }

    .conversations-list {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
    }

    .conversation-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 0.75rem;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .conversation-item:hover,
    .conversation-item.selected {
        background-color: var(--hover-color);
    }

    .conversation-info {
        flex: 1;
        min-width: 0;
    }

    .conversation-name {
        font-weight: 500;
        margin-bottom: 0.25rem;
    }

    .conversation-preview {
        font-size: 0.875rem;
        color: var(--text-secondary);
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .chat-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        min-width: 0;
    }

    .chat-header {
        padding: 1rem;
        border-bottom: 1px solid var(--border-color);
    }

    .messages-container {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .message {
        display: flex;
        margin-bottom: 0.5rem;
    }

    .message.sent {
        justify-content: flex-end;
    }

    .message-content {
        max-width: 70%;
        padding: 0.75rem 1rem;
        border-radius: 1rem;
    }

    .message.sent .message-content {
        background: var(--primary-gradient);
        color: var(--text-on-primary);
    }

    .message.received .message-content {
        background: var(--surface-gradient);
    }

    .message-time {
        font-size: 0.75rem;
        opacity: 0.7;
        margin-top: 0.25rem;
    }

    .message-input {
        padding: 1rem;
        display: flex;
        gap: 1rem;
        border-top: 1px solid var(--border-color);
    }

    .empty-state {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        color: var(--text-secondary);
    }

    .empty-state :deep(.mud-icon) {
        font-size: 3rem;
        margin-bottom: 1rem;
    }

    @@media (max-width: 768px) {
        .chat-page {
            padding: 1rem;
        }

        .chat-container {
            flex-direction: column;
            height: calc(100vh - var(--header-height) - 2rem);
        }

        .conversations-sidebar {
            width: 100%;
            height: 300px;
            border-right: none;
            border-bottom: 1px solid var(--border-color);
        }
    }
</style>

@code {
    private string _searchText = "";
    private string _newMessage = "";
    private List<Conversation>? _conversations;
    private Conversation? _selectedConversation;
    private ElementReference _messagesContainerRef;

    protected override async Task OnInitializedAsync()
    {
        await LoadConversations();
    }

    private async Task LoadConversations()
    {
        try
        {
            _conversations = await UserService.GetConversationsAsync();
        }
        catch
        {
            Snackbar.Add("Failed to load conversations", Severity.Error);
        }
    }

    private async Task LoadMessages(int conversationId)
    {
        try
        {
            var messages = await UserService.GetMessagesAsync(conversationId);
            if (_selectedConversation != null)
            {
                _selectedConversation.Messages = messages;
            }
        }
        catch
        {
            Snackbar.Add("Failed to load messages", Severity.Error);
        }
    }

    private async Task SelectConversation(Conversation conversation)
    {
        _selectedConversation = conversation;
        _newMessage = "";
        await LoadMessages(conversation.Id);
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_newMessage) || _selectedConversation == null)
            return;

        try
        {
            await UserService.SendMessageAsync(_selectedConversation.Id, _newMessage);
            _newMessage = "";
            await LoadMessages(_selectedConversation.Id);
            StateHasChanged();
        }
        catch
        {
            Snackbar.Add("Failed to send message", Severity.Error);
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(_newMessage))
        {
            await SendMessage();
        }
    }
}
