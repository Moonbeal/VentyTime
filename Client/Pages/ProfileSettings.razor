@page "/profile-settings"
@using VentyTime.Shared.Models
@using VentyTime.Shared.Models.Auth
@using System.Net.Http
@using System.ComponentModel.DataAnnotations
@inject IUserService UserService
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
    @if (isLoading)
    {
        <div class="d-flex justify-center">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </div>
    }
    else
    {
        <MudGrid>
            <!-- Left Column - Profile Photo -->
            <MudItem xs="12" sm="4" md="3" Class="d-flex flex-column gap-4">
                <MudPaper Class="pa-4 d-flex flex-column align-center" Style="position: relative;">
                    <MudAvatar Style="width: 200px; height: 200px; margin-bottom: 24px;" Class="mud-elevation-4">
                        @if (!string.IsNullOrEmpty(currentUser?.AvatarUrl))
                        {
                            <MudImage Src="@currentUser.AvatarUrl" Alt="Profile photo" ObjectFit="ObjectFit.Cover" />
                        }
                        else
                        {
                            <MudImage Src="/images/default-profile.png" Alt="Default profile photo" ObjectFit="ObjectFit.Cover" />
                        }
                    </MudAvatar>

                    <InputFile id="fileInput" OnChange="OnFileSelected" hidden accept=".jpg,.jpeg,.png,.gif" style="display: none;" />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => JS.InvokeVoidAsync("clickElement", "fileInput"))"
                              Disabled="@isUploadingAvatar" Class="change-photo-button">
                        @if (isUploadingAvatar)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Uploading...</MudText>
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.PhotoCamera" Class="mr-2" />
                            <MudText>Change Photo</MudText>
                        }
                    </MudButton>
                </MudPaper>
            </MudItem>

            <!-- Right Column - User Information -->
            <MudItem xs="12" sm="8" md="9">
                <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Class="mud-elevation-4">
                    <MudTabPanel Text="Personal Information">
                        <MudForm Model="@editModel" @ref="form">
                            <MudGrid Spacing="4">
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="editModel.FirstName"
                                                Label="First Name"
                                                Variant="Variant.Outlined"
                                                Required="true"
                                                RequiredError="First name is required" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="editModel.LastName"
                                                Label="Last Name"
                                                Variant="Variant.Outlined"
                                                Required="true"
                                                RequiredError="Last name is required" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudTextField @bind-Value="editModel.Email"
                                                Label="Email"
                                                Variant="Variant.Outlined"
                                                InputType="InputType.Email"
                                                Required="true"
                                                RequiredError="Email is required"
                                                Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudTextField @bind-Value="editModel.PhoneNumber"
                                                Label="Phone Number"
                                                Variant="Variant.Outlined" />
                                </MudItem>
                                <MudItem xs="12" Class="d-flex justify-end">
                                    <MudButton Variant="Variant.Filled"
                                             Color="Color.Primary"
                                             OnClick="SaveProfileAsync"
                                             Disabled="@isSaving">
                                        @if (isSaving)
                                        {
                                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                            <MudText Class="ms-2">Saving...</MudText>
                                        }
                                        else
                                        {
                                            <MudText>Save Changes</MudText>
                                        }
                                    </MudButton>
                                </MudItem>
                            </MudGrid>
                        </MudForm>
                    </MudTabPanel>

                    <MudTabPanel Text="Security">
                        <MudForm Model="@passwordModel" @ref="passwordForm">
                            <MudGrid Spacing="4">
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="passwordModel.CurrentPassword"
                                                Label="Current Password"
                                                Variant="Variant.Outlined"
                                                InputType="@PasswordInput"
                                                Adornment="Adornment.End"
                                                AdornmentIcon="@PasswordInputIcon"
                                                OnAdornmentClick="TogglePasswordVisibility"
                                                Required="true"
                                                RequiredError="Current password is required" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField @bind-Value="passwordModel.NewPassword"
                                                Label="New Password"
                                                Variant="Variant.Outlined"
                                                InputType="@PasswordInput"
                                                Adornment="Adornment.End"
                                                AdornmentIcon="@PasswordInputIcon"
                                                OnAdornmentClick="TogglePasswordVisibility"
                                                Required="true"
                                                RequiredError="New password is required" />
                                </MudItem>
                                <MudItem xs="12" Class="d-flex justify-end">
                                    <MudButton Variant="Variant.Filled"
                                             Color="Color.Primary"
                                             OnClick="ChangePasswordAsync"
                                             Disabled="@isChangingPassword">
                                        @if (isChangingPassword)
                                        {
                                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                            <MudText Class="ms-2">Changing...</MudText>
                                        }
                                        else
                                        {
                                            <MudText>Change Password</MudText>
                                        }
                                    </MudButton>
                                </MudItem>
                            </MudGrid>
                        </MudForm>
                    </MudTabPanel>

                    <MudTabPanel Text="Notifications">
                        <MudGrid Spacing="4">
                            <MudItem xs="12">
                                <MudSwitch @bind-Checked="@notificationSettings.EmailNotifications"
                                         Color="Color.Primary"
                                         Label="Email Notifications" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudSwitch @bind-Checked="@notificationSettings.PushNotifications"
                                         Color="Color.Primary"
                                         Label="Push Notifications" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudSwitch @bind-Checked="@notificationSettings.EventReminders"
                                         Color="Color.Primary"
                                         Label="Event Reminders" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudSwitch @bind-Checked="@notificationSettings.NewFollowerNotifications"
                                         Color="Color.Primary"
                                         Label="New Follower Notifications" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudSwitch @bind-Checked="@notificationSettings.NewLikeNotifications"
                                         Color="Color.Primary"
                                         Label="New Like Notifications" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudSwitch @bind-Checked="@notificationSettings.NewCommentNotifications"
                                         Color="Color.Primary"
                                         Label="New Comment Notifications" />
                            </MudItem>
                            <MudItem xs="12" Class="d-flex justify-end">
                                <MudButton Variant="Variant.Filled"
                                         Color="Color.Primary"
                                         OnClick="SaveNotificationSettingsAsync"
                                         Disabled="@isSavingNotifications">
                                    @if (isSavingNotifications)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                        <MudText Class="ms-2">Saving...</MudText>
                                    }
                                    else
                                    {
                                        <MudText>Save Changes</MudText>
                                    }
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudTabPanel>
                </MudTabs>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    private User? currentUser;
    private bool isLoading = true;
    private bool isSaving;
    private bool isChangingPassword;
    private bool isSavingNotifications;
    private bool isUploadingAvatar;
    private MudForm? form;
    private MudForm? passwordForm;
    private UpdateProfileRequest editModel = new();
    private ChangePasswordRequest passwordModel = new();
    private NotificationSettings notificationSettings = new();
    private bool isShow;
    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentUser = await UserService.GetCurrentUserAsync();
            if (currentUser != null)
            {
                editModel = new UpdateProfileRequest
                {
                    FirstName = currentUser.FirstName,
                    LastName = currentUser.LastName,
                    Email = currentUser.Email,
                    PhoneNumber = currentUser.PhoneNumber
                };

                notificationSettings = new NotificationSettings
                {
                    EmailNotifications = currentUser.EmailNotifications,
                    PushNotifications = currentUser.PushNotifications,
                    EventReminders = currentUser.EventReminders,
                    NewFollowerNotifications = currentUser.NewFollowerNotifications,
                    NewLikeNotifications = currentUser.NewLikeNotifications,
                    NewCommentNotifications = currentUser.NewCommentNotifications
                };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user profile: {ex.Message}");
            Snackbar.Add("Failed to load profile", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task SaveProfileAsync()
    {
        try
        {
            isSaving = true;
            if (form != null)
            {
                await form.Validate();
                if (form.IsValid)
                {
                    var result = await UserService.UpdateProfileAsync(
                        editModel.FirstName,
                        editModel.LastName,
                        editModel.Email,
                        editModel.PhoneNumber);
                    if (result)
                    {
                        currentUser = await UserService.GetCurrentUserAsync();
                        Snackbar.Add("Profile updated successfully", Severity.Success);
                    }
                    else
                    {
                        Snackbar.Add("Failed to update profile", Severity.Error);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving profile: {ex.Message}");
            Snackbar.Add("Failed to save profile", Severity.Error);
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task ChangePasswordAsync()
    {
        try
        {
            isChangingPassword = true;
            if (passwordForm != null)
            {
                await passwordForm.Validate();
                if (passwordForm.IsValid)
                {
                    var result = await UserService.ChangePasswordAsync(
                        passwordModel.CurrentPassword,
                        passwordModel.NewPassword);
                    if (result)
                    {
                        Snackbar.Add("Password changed successfully", Severity.Success);
                        passwordModel = new ChangePasswordRequest();
                    }
                    else
                    {
                        Snackbar.Add("Failed to change password", Severity.Error);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error changing password: {ex.Message}");
            Snackbar.Add("Failed to change password", Severity.Error);
        }
        finally
        {
            isChangingPassword = false;
        }
    }

    private async Task SaveNotificationSettingsAsync()
    {
        try
        {
            isSavingNotifications = true;
            var result = await UserService.UpdateNotificationSettingsAsync(
                notificationSettings.EmailNotifications,
                notificationSettings.PushNotifications,
                notificationSettings.EventReminders,
                notificationSettings.NewFollowerNotifications,
                notificationSettings.NewLikeNotifications,
                notificationSettings.NewCommentNotifications);
            if (result)
            {
                Snackbar.Add("Notification settings updated", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to update notification settings", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving notification settings: {ex.Message}");
            Snackbar.Add("Failed to save notification settings", Severity.Error);
        }
        finally
        {
            isSavingNotifications = false;
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            isUploadingAvatar = true;
            var file = e.File;
            if (file != null && currentUser != null)
            {
                // Check file size (max 5MB)
                if (file.Size > 5 * 1024 * 1024)
                {
                    Snackbar.Add("File size must be less than 5MB", Severity.Error);
                    return;
                }

                // Check file type
                var allowedTypes = new[] { "image/jpeg", "image/png", "image/gif" };
                if (!allowedTypes.Contains(file.ContentType))
                {
                    Snackbar.Add("Only JPEG, PNG and GIF files are allowed", Severity.Error);
                    return;
                }

                // Upload the file
                var response = await UserService.UploadAvatarAsync(currentUser.Id, file);
                if (response.IsSuccessStatusCode)
                {
                    // Reload the current user to get the new avatar URL
                    currentUser = await UserService.GetCurrentUserAsync();
                    // Force NavBar to refresh
                    await JS.InvokeVoidAsync("dispatchCustomEvent", "userProfileUpdated");
                    Snackbar.Add("Profile photo updated successfully", Severity.Success);
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Server error: {error}");
                    Snackbar.Add("Failed to update profile photo", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading avatar: {ex.Message}");
            Snackbar.Add("Failed to upload profile photo", Severity.Error);
        }
        finally
        {
            isUploadingAvatar = false;
        }
    }
}
