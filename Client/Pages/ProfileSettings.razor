@page "/profile-settings"
@using VentyTime.Shared.Models
@using VentyTime.Shared.Models.Auth
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using System.Net.Http.Headers
@using System.Net.Http
@inject IUserService UserService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IHttpClientFactory ClientFactory
@attribute [Authorize]

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
    <MudGrid>
        <!-- Left Column - Profile Photo -->
        <MudItem xs="12" sm="4" md="3" Class="d-flex flex-column gap-4">
            <MudPaper Class="pa-4 d-flex flex-column align-center" Style="position: relative;">
                <MudAvatar Style="width: 200px; height: 200px; margin-bottom: 24px;" Class="mud-elevation-4">
                    @if (!string.IsNullOrEmpty(currentUser?.AvatarUrl))
                    {
                        <MudImage Src="@currentUser.AvatarUrl" Alt="Profile" ObjectFit="ObjectFit.Cover" Width="200" Height="200" Class="rounded" />
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Large" />
                    }
                </MudAvatar>
                <InputFile id="fileInput" OnChange="OnFileSelected" hidden accept=".jpg,.jpeg,.png,.gif" />
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          OnClick="OpenFileInput"
                          StartIcon="@Icons.Material.Filled.PhotoCamera"
                          Size="Size.Small"
                          Style="position: absolute; bottom: 16px; left: 50%; transform: translateX(-50%);">
                    Change Photo
                </MudButton>
                @if (isUploadingAvatar)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                }
            </MudPaper>
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.subtitle1" Class="mb-2 font-weight-bold">Role</MudText>
                <MudChip Color="Color.Primary" Size="Size.Small" Class="rounded-pill">@(currentUser?.Role.ToString() ?? "User")</MudChip>
            </MudPaper>
        </MudItem>

        <!-- Right Column - User Info -->
        <MudItem xs="12" sm="8" md="9">
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Class="mud-elevation-4">
                <MudTabPanel Text="Personal Information">
                    <MudForm Model="@editModel" @ref="form">
                        <MudGrid Spacing="4">
                            <MudItem xs="12" sm="6">
                                <MudTextField @bind-Value="editModel.FirstName"
                                            Label="First Name"
                                            Variant="Variant.Outlined"
                                            Required="true"
                                            Class="rounded" />
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField @bind-Value="editModel.LastName"
                                            Label="Last Name"
                                            Variant="Variant.Outlined"
                                            Required="true"
                                            Class="rounded" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="editModel.Email"
                                            Label="Email"
                                            Variant="Variant.Outlined"
                                            Required="true"
                                            InputType="InputType.Email"
                                            Class="rounded" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="editModel.PhoneNumber"
                                            Label="Phone Number"
                                            Variant="Variant.Outlined"
                                            Required="false"
                                            Class="rounded" />
                            </MudItem>
                            <MudItem xs="12" Class="d-flex justify-end">
                                <MudButton Variant="Variant.Filled"
                                          Color="Color.Primary"
                                          OnClick="SaveProfileAsync"
                                          Disabled="isSaving"
                                          Size="Size.Large"
                                          Class="rounded-pill px-6">
                                    @if (isSaving)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                        <MudText Class="ms-2">Saving</MudText>
                                    }
                                    else
                                    {
                                        <MudText>Save Changes</MudText>
                                    }
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudForm>
                </MudTabPanel>

                <MudTabPanel Text="Security">
                    <MudForm Model="@passwordModel" @ref="passwordForm">
                        <MudGrid Spacing="4">
                            <MudItem xs="12" sm="6">
                                <MudTextField @bind-Value="passwordModel.CurrentPassword"
                                            Label="Current Password"
                                            Variant="Variant.Outlined"
                                            Required="true"
                                            InputType="@(showPassword ? InputType.Text : InputType.Password)"
                                            Adornment="Adornment.End"
                                            AdornmentIcon="@(showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                            OnAdornmentClick="() => showPassword = !showPassword"
                                            Class="rounded" />
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField @bind-Value="passwordModel.NewPassword"
                                            Label="New Password"
                                            Variant="Variant.Outlined"
                                            Required="true"
                                            InputType="@(showPassword ? InputType.Text : InputType.Password)"
                                            Adornment="Adornment.End"
                                            AdornmentIcon="@(showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                            OnAdornmentClick="() => showPassword = !showPassword"
                                            Class="rounded" />
                            </MudItem>
                            <MudItem xs="12" Class="d-flex justify-end">
                                <MudButton Variant="Variant.Filled"
                                          Color="Color.Primary"
                                          OnClick="ChangePasswordAsync"
                                          Disabled="isChangingPassword"
                                          Size="Size.Large"
                                          Class="rounded-pill px-6">
                                    @if (isChangingPassword)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                        <MudText Class="ms-2">Changing Password</MudText>
                                    }
                                    else
                                    {
                                        <MudText>Change Password</MudText>
                                    }
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudForm>
                </MudTabPanel>

                <MudTabPanel Text="Notifications">
                    <MudGrid Spacing="4">
                        <MudItem xs="12">
                            <MudSwitch @bind-Checked="@notificationSettings.EmailNotifications"
                                     Color="Color.Primary"
                                     Label="Email Notifications" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudSwitch @bind-Checked="@notificationSettings.PushNotifications"
                                     Color="Color.Primary"
                                     Label="Push Notifications" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudSwitch @bind-Checked="@notificationSettings.EventReminders"
                                     Color="Color.Primary"
                                     Label="Event Reminders" />
                        </MudItem>
                        <MudItem xs="12" Class="d-flex justify-end">
                            <MudButton Variant="Variant.Filled"
                                     Color="Color.Primary"
                                     OnClick="SaveNotificationSettingsAsync"
                                     Disabled="isSavingNotifications"
                                     Size="Size.Large"
                                     Class="rounded-pill px-6">
                                @if (isSavingNotifications)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Saving</MudText>
                                }
                                else
                                {
                                    <MudText>Save Settings</MudText>
                                }
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
            </MudTabs>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private User? currentUser;
    private bool isLoading = true;
    private bool isSaving;
    private bool isChangingPassword;
    private bool isSavingNotifications;
    private bool showPassword;
    private bool isUploadingAvatar;
    private MudForm? form;
    private MudForm? passwordForm;

    private UpdateProfileRequest editModel = new();
    private ChangePasswordRequest passwordModel = new();
    private NotificationSettingsModel notificationSettings = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            currentUser = await UserService.GetCurrentUserAsync();
            if (currentUser != null)
            {
                editModel = new UpdateProfileRequest
                {
                    FirstName = currentUser.FirstName,
                    LastName = currentUser.LastName,
                    Email = currentUser.Email,
                    PhoneNumber = currentUser.PhoneNumber
                };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user profile: {ex.Message}");
            Snackbar.Add("Failed to load user profile", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OpenFileInput()
    {
        await JS.InvokeVoidAsync("document.getElementById", "fileInput", "click");
    }

    private async Task SaveProfileAsync()
    {
        try
        {
            isSaving = true;
            if (form != null)
            {
                await form.Validate();
                if (form.IsValid)
                {
                    var result = await UserService.UpdateProfileAsync(
                        editModel.FirstName,
                        editModel.LastName,
                        editModel.Email,
                        editModel.PhoneNumber);
                    if (result)
                    {
                        Snackbar.Add("Profile updated successfully", Severity.Success);
                        currentUser = await UserService.GetCurrentUserAsync();
                    }
                    else
                    {
                        Snackbar.Add("Failed to update profile", Severity.Error);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving profile: {ex.Message}");
            Snackbar.Add("Failed to save profile", Severity.Error);
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task ChangePasswordAsync()
    {
        try
        {
            isChangingPassword = true;
            if (passwordForm != null)
            {
                await passwordForm.Validate();
                if (passwordForm.IsValid)
                {
                    var result = await UserService.ChangePasswordAsync(
                        passwordModel.CurrentPassword,
                        passwordModel.NewPassword);
                    if (result)
                    {
                        Snackbar.Add("Password changed successfully", Severity.Success);
                        passwordModel = new ChangePasswordRequest();
                    }
                    else
                    {
                        Snackbar.Add("Failed to change password", Severity.Error);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error changing password: {ex.Message}");
            Snackbar.Add("Failed to change password", Severity.Error);
        }
        finally
        {
            isChangingPassword = false;
        }
    }

    private async Task SaveNotificationSettingsAsync()
    {
        try
        {
            isSavingNotifications = true;
            var result = await UserService.UpdateNotificationSettingsAsync(
                notificationSettings.EmailNotifications,
                notificationSettings.PushNotifications,
                notificationSettings.EventReminders);
            if (result)
            {
                Snackbar.Add("Notification settings updated", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to update notification settings", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving notification settings: {ex.Message}");
            Snackbar.Add("Failed to save notification settings", Severity.Error);
        }
        finally
        {
            isSavingNotifications = false;
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            isUploadingAvatar = true;
            var file = e.File;
            if (file != null && currentUser != null)
            {
                // Check file size (max 5MB)
                if (file.Size > 5 * 1024 * 1024)
                {
                    Snackbar.Add("File size must be less than 5MB", Severity.Error);
                    return;
                }

                // Check file type
                var allowedTypes = new[] { "image/jpeg", "image/png", "image/gif" };
                if (!allowedTypes.Contains(file.ContentType))
                {
                    Snackbar.Add("Only JPEG, PNG and GIF files are allowed", Severity.Error);
                    return;
                }

                // Create form data
                var content = new MultipartFormDataContent();
                var fileContent = new StreamContent(file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024));
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
                content.Add(fileContent, "file", file.Name);

                // Get HTTP client
                var client = ClientFactory.CreateClient("VentyTime.ServerAPI");

                // Upload the file
                var response = await client.PostAsync($"api/user/{currentUser.Id}/avatar", content);
                if (response.IsSuccessStatusCode)
                {
                    // Reload the current user to get the new avatar URL
                    currentUser = await UserService.GetCurrentUserAsync();
                    // Force NavBar to refresh
                    await JS.InvokeVoidAsync("window.dispatchEvent", new object[] { new { type = "userProfileUpdated" } });
                    Snackbar.Add("Profile photo updated successfully", Severity.Success);
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Server error: {error}");
                    Snackbar.Add("Failed to update profile photo", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading avatar: {ex.Message}");
            Snackbar.Add("Failed to upload profile photo", Severity.Error);
        }
        finally
        {
            isUploadingAvatar = false;
        }
    }
}
