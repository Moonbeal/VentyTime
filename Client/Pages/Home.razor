@page "/home"
@using VentyTime.Shared.Models
@using VentyTime.Client.Services
@inject IEventService EventService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="hero-section">
    <MudContainer MaxWidth="MaxWidth.ExtraLarge">
        <MudText Typo="Typo.h2" Align="Align.Center" Class="mb-4 white-text">Find Your Perfect Event</MudText>
        <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-6 white-text">Select your mood and discover events that match your vibe</MudText>

        <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-6 white-text">How are you feeling today?</MudText>

        <div class="mood-grid">
            @foreach (var mood in moods)
            {
                <MudPaper @onclick="() => SelectMood(mood)" 
                         Elevation="@(selectedMood == mood.Name ? 3 : 1)"
                         Class="@($"mood-item {(selectedMood == mood.Name ? "selected" : "")}")">
                    <div class="mood-emoji">@mood.Emoji</div>
                    <MudText Class="mood-text">@mood.Name</MudText>
                </MudPaper>
            }
        </div>

        <div class="text-center mt-8">
            <MudButton Variant="Variant.Filled"
                      Color="Color.Secondary"
                      Size="Size.Large"
                      OnClick="ViewAllEvents"
                      Class="view-all-button">
                VIEW ALL EVENTS ‚Üí
            </MudButton>
        </div>
    </MudContainer>
</div>

<!-- Trending Events Section -->
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-8">
    <MudText Typo="Typo.h4" Class="mb-4">Trending Events</MudText>
    <div class="trending-events-container">
        @foreach (var evt in trendingEvents)
        {
            <div class="trending-bubble @evt.Category.ToLower()"
                 style="--size: @(evt.Popularity)px; --x: @(evt.X)%; --y: @(evt.Y)%;"
                 @onclick="() => ViewEvent(evt.Id)">
                <span class="bubble-content">@evt.Title</span>
            </div>
        }
    </div>
</MudContainer>

<!-- Event Roulette Section -->
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-8">
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-6 d-flex flex-column align-center">
                <MudText Typo="Typo.h4" Class="mb-4">Event Roulette</MudText>
                <MudText Class="mb-4">Feeling lucky? Spin the wheel to discover a random event!</MudText>
                
                <div class="roulette-wheel @(isSpinning ? "spinning" : "")" @onclick="SpinRoulette">
                    <div class="wheel-inner">
                        <MudIcon Icon="@Icons.Material.Filled.Casino" Size="Size.Large" />
                    </div>
                </div>

                @if (selectedRandomEvent != null)
                {
                    <MudPaper Class="mt-4 pa-4 width-100">
                        <MudText Typo="Typo.h6">@selectedRandomEvent.Title</MudText>
                        <MudText Typo="Typo.body2" Class="mb-2">@selectedRandomEvent.StartDate.ToString("MMM dd, yyyy HH:mm")</MudText>
                        <MudButton Color="Color.Primary" 
                                  Variant="Variant.Filled"
                                  OnClick="@(() => ViewEvent(selectedRandomEvent.Id))">
                            View Event
                        </MudButton>
                    </MudPaper>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

<style>
    .hero-section {
        background: linear-gradient(135deg, #1a237e 0%, #283593 100%);
        min-height: 100vh;
        padding: 4rem 1rem;
        margin-top: -2rem;
        display: flex;
        align-items: center;
    }

    .white-text {
        color: white !important;
    }

    .mood-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
        gap: 1rem;
        max-width: 800px;
        margin: 0 auto;
    }

    .mood-item {
        aspect-ratio: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        transition: all 0.3s ease;
        padding: 1rem;
    }

    .mood-item:hover {
        transform: translateY(-5px);
        background-color: rgba(255, 255, 255, 0.2);
    }

    .mood-item.selected {
        background-color: rgba(255, 255, 255, 0.3);
        transform: translateY(-5px);
    }

    .mood-emoji {
        font-size: 2rem;
        margin-bottom: 0.5rem;
    }

    .mood-text {
        color: white;
        text-align: center;
    }

    .view-all-button {
        min-width: 200px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    /* Trending Events Styles */
    .trending-events-container {
        position: relative;
        height: 500px;
        background: rgba(0, 0, 0, 0.05);
        border-radius: 16px;
        overflow: hidden;
    }

    .trending-bubble {
        position: absolute;
        width: var(--size);
        height: var(--size);
        left: var(--x);
        top: var(--y);
        transform: translate(-50%, -50%);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        padding: 1rem;
        text-align: center;
        color: white;
        font-weight: 500;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .trending-bubble:hover {
        transform: translate(-50%, -50%) scale(1.1);
        z-index: 10;
    }

    .bubble-content {
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .trending-bubble:hover .bubble-content {
        opacity: 1;
    }

    /* Category Colors */
    .trending-bubble.music { background: linear-gradient(135deg, #9c27b0, #673ab7); }
    .trending-bubble.sports { background: linear-gradient(135deg, #4caf50, #8bc34a); }
    .trending-bubble.art { background: linear-gradient(135deg, #e91e63, #f44336); }
    .trending-bubble.technology { background: linear-gradient(135deg, #2196f3, #03a9f4); }
    .trending-bubble.food { background: linear-gradient(135deg, #ff9800, #ff5722); }
    .trending-bubble.business { background: linear-gradient(135deg, #607d8b, #455a64); }

    /* Roulette Styles */
    .roulette-wheel {
        width: 200px;
        height: 200px;
        border-radius: 50%;
        background: linear-gradient(135deg, #9c27b0, #673ab7);
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: transform 3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .wheel-inner {
        width: 180px;
        height: 180px;
        border-radius: 50%;
        background: white;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .roulette-wheel.spinning {
        animation: spin-wheel 3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    @@keyframes spin-wheel {
        from { transform: rotate(0deg); }
        to { transform: rotate(1440deg); }
    }
</style>

@code {
    private string selectedMood = "";
    private bool isSpinning = false;
    private EventDto? selectedRandomEvent;
    private List<TrendingEvent> trendingEvents = new();
    private List<EventDto> events = new();

    private readonly List<MoodOption> moods = new()
    {
        new MoodOption { Name = "Energetic", Emoji = "‚ö°" },
        new MoodOption { Name = "Creative", Emoji = "üé®" },
        new MoodOption { Name = "Relaxed", Emoji = "üåø" },
        new MoodOption { Name = "Social", Emoji = "üéâ" },
        new MoodOption { Name = "Focused", Emoji = "üéØ" },
        new MoodOption { Name = "Adventurous", Emoji = "üåé" },
        new MoodOption { Name = "Romantic", Emoji = "üíù" },
        new MoodOption { Name = "Intellectual", Emoji = "üß†" },
        new MoodOption { Name = "Mindful", Emoji = "üßò" },
        new MoodOption { Name = "Foodie", Emoji = "üçΩÔ∏è" },
        new MoodOption { Name = "Musical", Emoji = "üéµ" },
        new MoodOption { Name = "Sporty", Emoji = "‚öΩ" }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
        InitializeTrendingEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            var result = await EventService.GetEventsAsync();
            events = result.Events?.ToList() ?? new List<EventDto>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading events: {ex.Message}");
            events = new List<EventDto>();
        }
    }

    private void InitializeTrendingEvents()
    {
        var rnd = new Random();
        trendingEvents = events.Take(8).Select(e => new TrendingEvent
        {
            Id = e.Id,
            Title = e.Title ?? "",
            Category = e.Category ?? "Other",
            Popularity = rnd.Next(60, 120),
            X = rnd.Next(10, 90),
            Y = rnd.Next(10, 90)
        }).ToList();
    }

    private async Task SpinRoulette()
    {
        if (isSpinning || !events.Any()) return;

        isSpinning = true;
        StateHasChanged();

        await Task.Delay(3000); // Wait for animation

        var rnd = new Random();
        selectedRandomEvent = events[rnd.Next(events.Count)];
        
        isSpinning = false;
        StateHasChanged();
    }

    private void SelectMood(MoodOption mood)
    {
        selectedMood = selectedMood == mood.Name ? "" : mood.Name;
    }

    private void ViewEvent(int eventId)
    {
        NavigationManager.NavigateTo($"/events/{eventId}");
    }

    private void ViewAllEvents()
    {
        NavigationManager.NavigateTo("/events");
    }

    private class MoodOption
    {
        public required string Name { get; set; }
        public required string Emoji { get; set; }
    }

    private class TrendingEvent
    {
        public int Id { get; set; }
        public required string Title { get; set; }
        public required string Category { get; set; }
        public int Popularity { get; set; }
        public int X { get; set; }
        public int Y { get; set; }
    }
}
