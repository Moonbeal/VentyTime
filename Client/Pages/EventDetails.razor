@page "/events/{Id:int}"
@using VentyTime.Shared.Models
@using System.Security.Claims
@inject IEventService EventService
@inject IUserService UserService
@inject IRegistrationService RegistrationService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (loading)
    {
        <div class="d-flex justify-center align-center" style="height: 400px;">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </div>
    }
    else if (eventModel == null)
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="my-4">Event not found.</MudAlert>
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" sm="8">
                <MudPaper Elevation="3" Class="pa-6 rounded-lg">
                    <div class="d-flex justify-space-between align-center mb-4">
                        <MudText Typo="Typo.h3" Color="Color.Primary">@eventModel.Title</MudText>
                        @if (isOrganizer)
                        {
                            <div>
                                <MudButton Variant="Variant.Outlined" 
                                          Color="Color.Primary" 
                                          StartIcon="@Icons.Material.Filled.Edit"
                                          OnClick="@(() => NavigationManager.NavigateTo($"/events/{Id}/edit"))">
                                    Edit
                                </MudButton>
                            </div>
                        }
                    </div>

                    @if (!string.IsNullOrEmpty(eventModel.ImageUrl))
                    {
                        <MudCard Elevation="0" Class="mb-6">
                            <MudImage Src="@eventModel.ImageUrl" 
                                    Alt="Event Image" 
                                    Class="rounded-lg" 
                                    ObjectFit="ObjectFit.Cover"
                                    Height="400" />
                        </MudCard>
                    }

                    <MudText Typo="Typo.body1" Class="mb-4">@eventModel.Description</MudText>

                    <MudDivider Class="my-6" />

                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.h6" Class="mb-2">Event Details</MudText>
                            <MudList Dense="true">
                                <MudListItem Icon="@Icons.Material.Filled.Category">
                                    <MudText>Category: @eventModel.Category</MudText>
                                </MudListItem>
                                <MudListItem Icon="@Icons.Material.Filled.LocationOn">
                                    <MudText>Location: @eventModel.Location</MudText>
                                </MudListItem>
                                <MudListItem Icon="@Icons.Material.Filled.CalendarToday">
                                    <MudText>Date: @eventModel.StartDate.ToShortDateString()</MudText>
                                </MudListItem>
                                <MudListItem Icon="@Icons.Material.Filled.Schedule">
                                    <MudText>Time: @eventModel.StartTime.ToString(@"hh\:mm")</MudText>
                                </MudListItem>
                            </MudList>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.h6" Class="mb-2">Organizer</MudText>
                            <MudList Dense="true">
                                <MudListItem Icon="@Icons.Material.Filled.Person">
                                    <MudText>@eventModel.Organizer?.UserName</MudText>
                                </MudListItem>
                                <MudListItem Icon="@Icons.Material.Filled.Email">
                                    <MudText>@eventModel.Organizer?.Email</MudText>
                                </MudListItem>
                            </MudList>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" sm="4">
                <MudPaper Elevation="3" Class="pa-6 rounded-lg">
                    <MudText Typo="Typo.h5" Class="mb-4">Registration</MudText>
                    
                    @if (!isAuthenticated)
                    {
                        <MudAlert Severity="Severity.Info" Class="mb-4">
                            Please <MudLink Href="/login">log in</MudLink> to register for this event.
                        </MudAlert>
                    }
                    else if (eventModel.HasStarted())
                    {
                        <MudAlert Severity="Severity.Warning" Class="mb-4">
                            This event has already started.
                        </MudAlert>
                    }
                    else if (eventModel.IsFinished())
                    {
                        <MudAlert Severity="Severity.Error" Class="mb-4">
                            This event has ended.
                        </MudAlert>
                    }
                    else
                    {
                        <MudStack>
                            <MudText>
                                @if (eventModel.Registrations?.Count > 0)
                                {
                                    <span>@eventModel.Registrations.Count registered</span>
                                }
                                else
                                {
                                    <span>No registrations yet</span>
                                }
                            </MudText>

                            @if (!isOrganizer)
                            {
                                @if (eventModel.Registrations?.Any(r => r.UserId == currentUserId) == true)
                                {
                                    <MudButton Variant="Variant.Filled" 
                                              Color="Color.Error"
                                              OnClick="CancelRegistrationAsync"
                                              FullWidth="true">
                                        Cancel Registration
                                    </MudButton>
                                }
                                else
                                {
                                    <MudButton Variant="Variant.Filled" 
                                              Color="Color.Primary"
                                              OnClick="RegisterAsync"
                                              FullWidth="true">
                                        Register Now
                                    </MudButton>
                                }
                            }
                        </MudStack>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>

        <MudDivider Class="my-8" />

        <MudPaper Class="pa-4">
            <CommentList EventId="@Id" />
        </MudPaper>
    }
</MudContainer>

@code {
    [Parameter] public int Id { get; set; }

    private Event? eventModel;
    private bool loading = true;
    private bool isAuthenticated;
    private bool isOrganizer;
    private string? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthenticated = user.Identity?.IsAuthenticated ?? false;
        
        if (isAuthenticated)
        {
            currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }

        await LoadEventAsync();
    }

    private async Task LoadEventAsync()
    {
        try
        {
            loading = true;
            eventModel = await EventService.GetEventByIdAsync(Id);
            
            if (eventModel != null && isAuthenticated)
            {
                isOrganizer = eventModel.OrganizerId == currentUserId;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading event: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task RegisterAsync()
    {
        try
        {
            var response = await RegistrationService.RegisterForEventAsync(Id);
            if (response.Success)
            {
                await LoadEventAsync();
                Snackbar.Add("Successfully registered for the event!", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Registration failed: {response.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Registration failed: {ex.Message}", Severity.Error);
        }
    }

    private async Task CancelRegistrationAsync()
    {
        try
        {
            var success = await RegistrationService.CancelRegistrationAsync(Id);
            if (success)
            {
                await LoadEventAsync();
                Snackbar.Add("Registration cancelled successfully", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to cancel registration", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to cancel registration: {ex.Message}", Severity.Error);
        }
    }
}
