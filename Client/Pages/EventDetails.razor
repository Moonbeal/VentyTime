@page "/event/{Id:int}"
@using VentyTime.Shared.Models
@using System.Security.Claims
@inject IEventService EventService
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (loading)
    {
        <div class="d-flex justify-center align-center" style="height: 400px;">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </div>
    }
    else if (eventModel == null)
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="my-4">Event not found.</MudAlert>
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" sm="8">
                <MudPaper Elevation="3" Class="pa-6 rounded-lg">
                    <div class="d-flex justify-space-between align-center mb-4">
                        <MudText Typo="Typo.h3" Color="Color.Primary">@eventModel.Title</MudText>
                        @if (isOrganizer)
                        {
                            <div>
                                <MudButton Variant="Variant.Outlined" 
                                          Color="Color.Primary" 
                                          StartIcon="@Icons.Material.Filled.Edit"
                                          OnClick="@(() => NavigationManager.NavigateTo($"/events/{Id}/edit"))">
                                    Edit
                                </MudButton>
                            </div>
                        }
                    </div>

                    @if (!string.IsNullOrEmpty(eventModel.ImageUrl))
                    {
                        <MudCard Elevation="0" Class="mb-6">
                            <MudImage Src="@eventModel.ImageUrl" 
                                    Alt="Event Image" 
                                    Class="rounded-lg" 
                                    ObjectFit="ObjectFit.Cover"
                                    Height="400" />
                        </MudCard>
                    }

                    <MudText Typo="Typo.body1" Class="mb-4">@eventModel.Description</MudText>

                    <MudDivider Class="my-4" />
                    
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.subtitle1" Class="mb-2">Event Details</MudText>
                            <MudText Typo="Typo.body2">
                                <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Class="mr-2" />
                                @eventModel.StartDate.ToString("dddd, MMMM d, yyyy")
                            </MudText>
                            <MudText Typo="Typo.body2">
                                <MudIcon Icon="@Icons.Material.Filled.Schedule" Class="mr-2" />
                                @eventModel.StartDate.ToString("h:mm tt") - @eventModel.EndDate.ToString("h:mm tt")
                            </MudText>
                            <MudText Typo="Typo.body2">
                                <MudIcon Icon="@Icons.Material.Filled.LocationOn" Class="mr-2" />
                                @eventModel.Location
                            </MudText>
                        </MudItem>
                        
                        <MudItem xs="12" sm="6">
                            <MudText Typo="Typo.subtitle1" Class="mb-2">Organizer</MudText>
                            <MudText Typo="Typo.body2">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-2" />
                                @(eventModel.Organizer?.FullName ?? "Unknown")
                            </MudText>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
            
            <MudItem xs="12" sm="4">
                <MudPaper Elevation="3" Class="pa-6 rounded-lg">
                    <MudText Typo="Typo.h5" Class="mb-4">Registration</MudText>
                    
                    @if (!isAuthenticated)
                    {
                        <MudAlert Severity="Severity.Info" Class="mb-4">Please log in to register for this event.</MudAlert>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("/login"))">
                            Log In
                        </MudButton>
                    }
                    else if (isRegistered)
                    {
                        <MudAlert Severity="Severity.Success" Class="mb-4">You are registered for this event!</MudAlert>
                        <MudText Typo="Typo.body1" Class="mb-4">
                            Date: @eventModel.StartDate.ToString("dddd, MMMM d, yyyy")<br />
                            Time: @eventModel.StartDate.ToString("h:mm tt") - @eventModel.EndDate.ToString("h:mm tt")
                        </MudText>
                    }
                    else if (eventModel.IsFull)
                    {
                        <MudAlert Severity="Severity.Warning" Class="mb-4">This event is full.</MudAlert>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" 
                                  Color="Color.Primary" 
                                  OnClick="RegisterForEvent" 
                                  Disabled="@(isRegistering || eventModel.IsFull)"
                                  Class="mb-4">
                            @if (isRegistering)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Registering...</MudText>
                            }
                            else
                            {
                                @("Register Now")
                            }
                        </MudButton>
                        
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            @eventModel.AvailableSpots spots remaining
                        </MudText>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>

        <MudDivider Class="my-8" />

        <MudPaper Class="pa-4">
            <CommentList EventId="@Id" />
        </MudPaper>
    }
</MudContainer>

@code {
    [Parameter] public int Id { get; set; }
    private Event? eventModel;
    private bool loading = true;
    private bool isAuthenticated;
    private bool isOrganizer;
    private string? userId;
    private bool isRegistering;
    private bool isRegistered;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            isAuthenticated = user.Identity?.IsAuthenticated ?? false;
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            
            eventModel = await EventService.GetEventByIdAsync(Id);
            if (eventModel != null)
            {
                isOrganizer = userId == eventModel.OrganizerId;
                if (isAuthenticated)
                {
                    var registeredEvents = await EventService.GetRegisteredEventsAsync();
                    isRegistered = registeredEvents.Any(e => e.Id == Id);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error loading event details", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task RegisterForEvent()
    {
        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        isRegistering = true;
        try
        {
            var (success, errorMessage) = await EventService.RegisterForEventAsync(Id);
            if (success)
            {
                isRegistered = true;
                Snackbar.Add("Successfully registered for the event!", Severity.Success);
                NavigationManager.NavigateTo($"/event/{Id}");
                StateHasChanged();
            }
            else
            {
                Snackbar.Add(errorMessage ?? "Failed to register for the event. Please try again.", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("An error occurred while registering for the event.", Severity.Error);
        }
        finally
        {
            isRegistering = false;
        }
    }
}
