@page "/events/{Id:int}"
@using VentyTime.Shared.Models
@inject IEventService EventService
@inject IUserService UserService
@inject IRegistrationService RegistrationService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (loading)
    {
        <div class="d-flex justify-center align-center" style="height: 400px;">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </div>
    }
    else if (eventModel == null)
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="my-4">Event not found.</MudAlert>
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" sm="8">
                <MudPaper Elevation="3" Class="pa-6 rounded-lg">
                    <div class="d-flex justify-space-between align-center mb-4">
                        <MudText Typo="Typo.h3" Color="Color.Primary">@eventModel.Title</MudText>
                        @if (isOrganizer)
                        {
                            <div>
                                <MudButton Variant="Variant.Outlined" 
                                          Color="Color.Primary" 
                                          StartIcon="@Icons.Material.Filled.Edit"
                                          OnClick="@(() => NavigationManager.NavigateTo($"/events/{Id}/edit"))">
                                    Edit
                                </MudButton>
                            </div>
                        }
                    </div>

                    @if (!string.IsNullOrEmpty(eventModel.ImageUrl))
                    {
                        <MudCard Elevation="0" Class="mb-6">
                            <MudImage Src="@eventModel.ImageUrl" 
                                    Alt="Event Image" 
                                    Class="rounded-lg" 
                                    ObjectFit="ObjectFit.Cover"
                                    Height="400" />
                        </MudCard>
                    }

                    <MudPaper Elevation="0" Class="pa-4 mb-6" Style="background-color: var(--mud-palette-background-grey)">
                        <MudGrid>
                            <MudItem xs="12" sm="6">
                                <MudText Class="d-flex align-center">
                                    <MudIcon Icon="@Icons.Material.Filled.CalendarToday" 
                                            Class="mr-2" 
                                            Color="Color.Primary" />
                                    @eventModel.GetDateTime().ToString("f")
                                </MudText>
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudText Class="d-flex align-center">
                                    <MudIcon Icon="@Icons.Material.Filled.LocationOn" 
                                            Class="mr-2" 
                                            Color="Color.Primary" />
                                    @eventModel.Location
                                </MudText>
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudText Class="d-flex align-center">
                                    <MudIcon Icon="@Icons.Material.Filled.Person" 
                                            Class="mr-2" 
                                            Color="Color.Primary" />
                                    Organized by @eventModel.OrganizerName
                                </MudText>
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudText Class="d-flex align-center">
                                    <MudIcon Icon="@Icons.Material.Filled.Group" 
                                            Class="mr-2" 
                                            Color="Color.Primary" />
                                    @(eventModel.MaxAttendees == 0 ? "∞" : eventModel.Registrations.Count().ToString()) / @(eventModel.MaxAttendees > 0 ? eventModel.MaxAttendees.ToString() : "∞") attendees
                                </MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>

                    <MudText Typo="Typo.h5" Class="mb-4">About this event</MudText>
                    <MudText Typo="Typo.body1" Class="mb-6">@eventModel.Description</MudText>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" sm="4">
                <MudPaper Elevation="3" Class="pa-6 rounded-lg">
                    <MudText Typo="Typo.h5" Class="mb-4">Registration</MudText>
                    
                    @if (!isAuthenticated)
                    {
                        <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Class="mb-4">
                            Please log in to register for this event.
                        </MudAlert>
                        <MudButton Variant="Variant.Filled" 
                                 Color="Color.Primary" 
                                 FullWidth="true"
                                 OnClick="@(() => NavigationManager.NavigateTo("/login"))">
                            Log In
                        </MudButton>
                    }
                    else if (isRegistered)
                    {
                        <MudAlert Severity="Severity.Success" Variant="Variant.Filled" Class="mb-4">
                            You're registered for this event!
                        </MudAlert>
                        <MudButton Variant="Variant.Filled" 
                                 Color="Color.Error" 
                                 FullWidth="true"
                                 OnClick="CancelRegistrationAsync">
                            Cancel Registration
                        </MudButton>
                    }
                    else if (eventModel.MaxAttendees > 0 && eventModel.Registrations.Count() >= eventModel.MaxAttendees)
                    {
                        <MudAlert Severity="Severity.Warning" Variant="Variant.Filled">
                            This event is full.
                        </MudAlert>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" 
                                 Color="Color.Primary" 
                                 FullWidth="true"
                                 OnClick="RegisterForEventAsync">
                            Register Now
                        </MudButton>
                    }

                    <MudDivider Class="my-6" />

                    <MudText Typo="Typo.h5" Class="mb-4">Attendees</MudText>
                    @if (!eventModel.Registrations.Any())
                    {
                        <MudText Color="Color.Secondary">No attendees yet. Be the first to join!</MudText>
                    }
                    else
                    {
                        <MudList Clickable="false">
                            @foreach (var registration in eventModel.Registrations)
                            {
                                <MudListItem>
                                    <div class="d-flex align-center">
                                        <MudAvatar Color="Color.Primary" Class="mr-2">
                                            @(registration.User?.UserName?.FirstOrDefault().ToString().ToUpper() ?? "?")
                                        </MudAvatar>
                                        <MudText>@(registration.User?.UserName ?? "Unknown")</MudText>
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    [Parameter]
    public int Id { get; set; }

    private bool loading = true;
    private Event? eventModel;
    private bool isOrganizer;
    private bool isRegistered;
    private string? currentUserId;
    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentUserId = await UserService.GetCurrentUserIdAsync();
            isAuthenticated = currentUserId != null;
            await LoadEventData();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading event: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task LoadEventData()
    {
        eventModel = await EventService.GetEventByIdAsync(Id);
        if (eventModel != null)
        {
            isOrganizer = eventModel.OrganizerId == currentUserId;
            isRegistered = eventModel.Registrations.Any(r => r.UserId == currentUserId);
        }
    }

    private async Task RegisterForEventAsync()
    {
        try
        {
            if (await RegistrationService.RegisterForEventAsync(Id))
            {
                await LoadEventData();
                Snackbar.Add("Successfully registered for the event!", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error registering for event: {ex.Message}", Severity.Error);
        }
    }

    private async Task CancelRegistrationAsync()
    {
        try
        {
            if (await RegistrationService.CancelRegistrationAsync(Id))
            {
                await LoadEventData();
                Snackbar.Add("Successfully cancelled registration!", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error cancelling registration: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteEventAsync()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to delete this event? This action cannot be undone." },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Event", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                if (await EventService.DeleteEventAsync(Id))
                {
                    Snackbar.Add("Event deleted successfully!", Severity.Success);
                    NavigationManager.NavigateTo("/");
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting event: {ex.Message}", Severity.Error);
            }
        }
    }
}
