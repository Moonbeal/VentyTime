@page "/events-dashboard"
@using VentyTime.Shared.Models
@using VentyTime.Client.Services
@using MudBlazor
@inject IEventService EventService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ILogger<EventDashboard> _logger
@inject ISnackbar Snackbar
@attribute [Authorize]

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-md-3">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Quick Actions</h5>
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" @onclick="CreateNewEvent">
                            <i class="fas fa-plus"></i> Create New Event
                        </button>
                        <button class="btn btn-outline-primary" @onclick="() => activeTab = DashboardTab.Analytics">
                            <i class="fas fa-chart-line"></i> View Analytics
                        </button>
                    </div>
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-body">
                    <h5 class="card-title">Statistics</h5>
                    <div class="stats-list">
                        <div class="stat-item">
                            <span class="stat-label">Total Events</span>
                            <span class="stat-value">@statistics.TotalEvents</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Active Events</span>
                            <span class="stat-value">@statistics.ActiveEvents</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Total Registrations</span>
                            <span class="stat-value">@statistics.TotalRegistrations</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Revenue</span>
                            <span class="stat-value">$@statistics.TotalRevenue.ToString("F2")</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Completed Events</span>
                            <span class="stat-value">@statistics.CompletedEvents</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-9">
            <div class="card">
                <div class="card-body">
                    <ul class="nav nav-tabs">
                        <li class="nav-item">
                            <button class="nav-link @(activeTab == DashboardTab.UpcomingEvents ? "active" : "")"
                                    @onclick="() => activeTab = DashboardTab.UpcomingEvents">
                                Upcoming Events
                            </button>
                        </li>
                        <li class="nav-item">
                            <button class="nav-link @(activeTab == DashboardTab.PastEvents ? "active" : "")"
                                    @onclick="() => activeTab = DashboardTab.PastEvents">
                                Past Events
                            </button>
                        </li>
                        <li class="nav-item">
                            <button class="nav-link @(activeTab == DashboardTab.Analytics ? "active" : "")"
                                    @onclick="() => activeTab = DashboardTab.Analytics">
                                Analytics
                            </button>
                        </li>
                    </ul>

                    <div class="tab-content mt-3">
                        @switch (activeTab)
                        {
                            case DashboardTab.UpcomingEvents:
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>Title</th>
                                                <th>Date</th>
                                                <th>Location</th>
                                                <th>Registrations</th>
                                                <th>Status</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var evt in upcomingEvents)
                                            {
                                                <tr>
                                                    <td>@evt.Title</td>
                                                    <td>@evt.StartDate.ToShortDateString()</td>
                                                    <td>@evt.Location</td>
                                                    <td>@evt.CurrentParticipants/@(evt.MaxAttendees == 0 ? "∞" : evt.MaxAttendees.ToString())</td>
                                                    <td>
                                                        @if (evt.IsFull)
                                                        {
                                                            <span class="badge bg-danger">Full</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-success">Open</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        <div class="btn-group">
                                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => NavigateToEventDetails(evt.Id)">
                                                                <i class="fas fa-eye"></i>
                                                            </button>
                                                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => NavigateToEventEdit(evt.Id)">
                                                                <i class="fas fa-edit"></i>
                                                            </button>
                                                            <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small"
                                                                      OnClick="@(() => CancelEvent(evt))"
                                                                      Disabled="@(evt.HasStarted || evt.IsFinished)">
                                                                Cancel
                                                            </MudButton>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                                break;

                            case DashboardTab.PastEvents:
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>Title</th>
                                                <th>Date</th>
                                                <th>Location</th>
                                                <th>Attendance</th>
                                                <th>Revenue</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var evt in pastEvents)
                                            {
                                                <tr>
                                                    <td>@evt.Title</td>
                                                    <td>@evt.StartDate.ToShortDateString()</td>
                                                    <td>@evt.Location</td>
                                                    <td>@evt.CurrentParticipants/@(evt.MaxAttendees == 0 ? "∞" : evt.MaxAttendees.ToString())</td>
                                                    <td>$@(evt.Price * evt.CurrentParticipants)</td>
                                                    <td>
                                                        <div class="btn-group">
                                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => NavigateToEventDetails(evt.Id)">
                                                                <i class="fas fa-eye"></i>
                                                            </button>
                                                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => ExportEventData(evt.Id)">
                                                                <i class="fas fa-download"></i>
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                                break;

                            case DashboardTab.Analytics:
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="card">
                                            <div class="card-body">
                                                <h5 class="card-title">Registration Trends</h5>
                                                <div class="chart-container">
                                                    <!-- Add chart component here -->
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="card">
                                            <div class="card-body">
                                                <h5 class="card-title">Revenue Analysis</h5>
                                                <div class="chart-container">
                                                    <!-- Add chart component here -->
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                break;
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (showDeleteConfirmation)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete the event "@selectedEvent?.Title"? This action cannot be undone.
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>

@code {
    private enum DashboardTab
    {
        UpcomingEvents,
        PastEvents,
        Analytics
    }

    private DashboardTab activeTab = DashboardTab.UpcomingEvents;
    private bool showDeleteConfirmation = false;
    private EventDto? selectedEvent;
    private DashboardStatistics statistics = new();
    private EventDto eventModel = new EventDto();
    private List<EventDto> upcomingEvents = new();
    private List<EventDto> pastEvents = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            upcomingEvents = await EventService.GetUpcomingEventsAsync();
            pastEvents = await EventService.GetPopularEventsAsync();
            
            // Calculate statistics
            statistics = new DashboardStatistics
            {
                TotalEvents = upcomingEvents.Count + pastEvents.Count,
                ActiveEvents = upcomingEvents.Count,
                TotalRegistrations = upcomingEvents.Sum(e => e.CurrentParticipants) + pastEvents.Sum(e => e.CurrentParticipants),
                TotalRevenue = upcomingEvents.Sum(e => e.Price * e.CurrentParticipants) + pastEvents.Sum(e => e.Price * e.CurrentParticipants),
                CompletedEvents = pastEvents.Count
            };
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error loading dashboard data");
            Snackbar.Add("Error loading dashboard data", Severity.Error);
        }
    }

    private void CreateNewEvent()
    {
        NavigationManager.NavigateTo("/event/create");
    }

    private void NavigateToEventDetails(int eventId)
    {
        NavigationManager.NavigateTo($"/event/{eventId}");
    }

    private void NavigateToEventEdit(int eventId)
    {
        NavigationManager.NavigateTo($"/event/{eventId}/edit");
    }

    private void ShowDeleteConfirmation(EventDto evt)
    {
        selectedEvent = evt;
        showDeleteConfirmation = true;
    }

    private void CancelDelete()
    {
        selectedEvent = null;
        showDeleteConfirmation = false;
    }

    private async Task ConfirmDelete()
    {
        if (selectedEvent != null)
        {
            await EventService.DeleteEventAsync(selectedEvent.Id);
            upcomingEvents = await EventService.GetUpcomingEventsAsync();
            pastEvents = await EventService.GetPopularEventsAsync();
            statistics = new DashboardStatistics
            {
                TotalEvents = upcomingEvents.Count + pastEvents.Count,
                ActiveEvents = upcomingEvents.Count,
                TotalRegistrations = upcomingEvents.Sum(e => e.CurrentParticipants) + pastEvents.Sum(e => e.CurrentParticipants),
                TotalRevenue = upcomingEvents.Sum(e => e.Price * e.CurrentParticipants) + pastEvents.Sum(e => e.Price * e.CurrentParticipants),
                CompletedEvents = pastEvents.Count
            };
        }
        showDeleteConfirmation = false;
        selectedEvent = null;
    }

    private void ExportEventData(int eventId)
    {
        // Implement export functionality
    }

    private void CancelEvent(EventDto evt)
    {
        // Implement cancel event functionality
    }

    private class DashboardStatistics
    {
        public int TotalEvents { get; set; }
        public int ActiveEvents { get; set; }
        public int TotalRegistrations { get; set; }
        public decimal TotalRevenue { get; set; }
        public int CompletedEvents { get; set; }
    }
}

<style>
    .stats-list {
        display: grid;
        gap: 1rem;
    }

    .stat-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem;
        background-color: #f8f9fa;
        border-radius: 0.25rem;
    }

    .stat-label {
        color: #6c757d;
        font-size: 0.875rem;
    }

    .stat-value {
        font-weight: bold;
        color: #0d6efd;
    }

    .chart-container {
        height: 300px;
        margin-top: 1rem;
    }

    .modal {
        background-color: rgba(0, 0, 0, 0.5);
    }

    .table td {
        vertical-align: middle;
    }
</style>
