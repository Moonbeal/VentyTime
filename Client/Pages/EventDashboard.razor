@page "/events-dashboard"
@using VentyTime.Shared.Models
@using VentyTime.Client.Services
@inject IEventService EventService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-md-3">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Quick Actions</h5>
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" @onclick="CreateNewEvent">
                            <i class="fas fa-plus"></i> Create New Event
                        </button>
                        <button class="btn btn-outline-primary" @onclick="() => activeTab = DashboardTab.Analytics">
                            <i class="fas fa-chart-line"></i> View Analytics
                        </button>
                    </div>
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-body">
                    <h5 class="card-title">Statistics</h5>
                    <div class="stats-list">
                        <div class="stat-item">
                            <span class="stat-label">Total Events</span>
                            <span class="stat-value">@statistics.TotalEvents</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Active Events</span>
                            <span class="stat-value">@statistics.ActiveEvents</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Total Registrations</span>
                            <span class="stat-value">@statistics.TotalRegistrations</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Revenue</span>
                            <span class="stat-value">$@statistics.TotalRevenue.ToString("F2")</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">Completed Events</span>
                            <span class="stat-value">@statistics.CompletedEvents</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-9">
            <div class="card">
                <div class="card-body">
                    <ul class="nav nav-tabs">
                        <li class="nav-item">
                            <button class="nav-link @(activeTab == DashboardTab.UpcomingEvents ? "active" : "")"
                                    @onclick="() => activeTab = DashboardTab.UpcomingEvents">
                                Upcoming Events
                            </button>
                        </li>
                        <li class="nav-item">
                            <button class="nav-link @(activeTab == DashboardTab.PastEvents ? "active" : "")"
                                    @onclick="() => activeTab = DashboardTab.PastEvents">
                                Past Events
                            </button>
                        </li>
                        <li class="nav-item">
                            <button class="nav-link @(activeTab == DashboardTab.Analytics ? "active" : "")"
                                    @onclick="() => activeTab = DashboardTab.Analytics">
                                Analytics
                            </button>
                        </li>
                    </ul>

                    <div class="tab-content mt-3">
                        @switch (activeTab)
                        {
                            case DashboardTab.UpcomingEvents:
                                <div class="event-list">
                                    @foreach (var evt in upcomingEvents)
                                    {
                                        <div class="event-card">
                                            <div class="event-header">
                                                <h3 class="event-title">@evt.Title</h3>
                                                <span class="event-badge">Upcoming</span>
                                            </div>
                                            <div class="event-details">
                                                <div class="event-info">
                                                    <i class="fas fa-calendar"></i>
                                                    <span>@evt.StartDate.ToString("MMM dd, yyyy HH:mm")</span>
                                                </div>
                                                <div class="event-info">
                                                    <i class="fas fa-map-marker-alt"></i>
                                                    <span>@evt.Location</span>
                                                </div>
                                            </div>
                                            <div class="event-actions">
                                                <div class="action-row">
                                                    <button class="action-btn view" @onclick="@(() => NavigationManager.NavigateTo($"/event/{evt.Id}"))">
                                                        VIEW DETAILS
                                                    </button>
                                                    <button class="action-btn reg" @onclick="@(() => NavigationManager.NavigateTo($"/event/{evt.Id}/registrations"))">
                                                        REGISTRATIONS
                                                    </button>
                                                </div>
                                                <div class="action-row">
                                                    <button class="action-btn edit" @onclick="@(() => NavigationManager.NavigateTo($"/event/{evt.Id}/edit"))">
                                                        EDIT
                                                    </button>
                                                    <button class="action-btn delete" @onclick="@(() => ShowDeleteConfirmation(evt))">
                                                        DELETE
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                                break;

                            case DashboardTab.PastEvents:
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>Title</th>
                                                <th>Date</th>
                                                <th>Location</th>
                                                <th>Attendance</th>
                                                <th>Revenue</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var evt in pastEvents)
                                            {
                                                <tr>
                                                    <td>@evt.Title</td>
                                                    <td>@evt.StartDate.ToShortDateString()</td>
                                                    <td>@evt.Location</td>
                                                    <td>@evt.CurrentParticipants/@(evt.MaxAttendees == 0 ? "âˆž" : evt.MaxAttendees.ToString())</td>
                                                    <td>$@(evt.Price * evt.CurrentParticipants)</td>
                                                    <td>
                                                        <div class="button-group">
                                                            <button class="action-btn view" @onclick="@(() => NavigationManager.NavigateTo($"/event/{evt.Id}"))">
                                                                <i class="fas fa-eye"></i> <span class="btn-text">VIEW</span>
                                                            </button>
                                                            <button class="action-btn reg" @onclick="@(() => NavigationManager.NavigateTo($"/event/{evt.Id}/registrations"))">
                                                                <i class="fas fa-users"></i> <span class="btn-text">REGS</span>
                                                            </button>
                                                            <button class="action-btn edit" @onclick="@(() => ExportEventData(evt.Id))">
                                                                <i class="fas fa-download"></i> <span class="btn-text">EXPORT</span>
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                                break;

                            case DashboardTab.Analytics:
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="card">
                                            <div class="card-body">
                                                <h5 class="card-title">Registration Trends</h5>
                                                <div class="chart-container">
                                                    <!-- Add chart component here -->
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="card">
                                            <div class="card-body">
                                                <h5 class="card-title">Revenue Analysis</h5>
                                                <div class="chart-container">
                                                    <!-- Add chart component here -->
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                break;
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (showDeleteConfirmation)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to delete the event "@selectedEvent?.Title"? This action cannot be undone.
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>

@code {
    private enum DashboardTab
    {
        UpcomingEvents,
        PastEvents,
        Analytics
    }

    private DashboardTab activeTab = DashboardTab.UpcomingEvents;
    private List<Event> upcomingEvents = new();
    private List<Event> pastEvents = new();
    private bool showDeleteConfirmation = false;
    private Event? selectedEvent;
    private DashboardStatistics statistics = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
        LoadStatistics();
    }

    private async Task LoadEvents()
    {
        var currentUser = await AuthService.GetUserAsync();
        if (currentUser != null)
        {
            var allEvents = await EventService.GetEventsByOrganizerIdAsync(currentUser.Id);
            upcomingEvents = allEvents.Where(e => !e.HasStarted()).OrderBy(e => e.StartDate).ToList();
            pastEvents = allEvents.Where(e => e.HasStarted()).OrderByDescending(e => e.StartDate).ToList();
        }
    }

    private void LoadStatistics()
    {
        // In a real application, you would call a service to get these statistics
        statistics = new DashboardStatistics
        {
            TotalEvents = upcomingEvents.Count + pastEvents.Count,
            ActiveEvents = upcomingEvents.Count,
            TotalRegistrations = upcomingEvents.Sum(e => e.CurrentParticipants) + pastEvents.Sum(e => e.CurrentParticipants),
            TotalRevenue = upcomingEvents.Sum(e => e.Price * e.CurrentParticipants) + pastEvents.Sum(e => e.Price * e.CurrentParticipants),
            CompletedEvents = pastEvents.Count
        };
    }

    private void CreateNewEvent()
    {
        NavigationManager.NavigateTo("/event/create");
    }

    private void NavigateToEventDetails(int eventId)
    {
        NavigationManager.NavigateTo($"/event/{eventId}");
    }

    private void NavigateToEventEdit(int eventId)
    {
        NavigationManager.NavigateTo($"/event/{eventId}/edit");
    }

    private void ShowDeleteConfirmation(Event evt)
    {
        selectedEvent = evt;
        showDeleteConfirmation = true;
    }

    private void CancelDelete()
    {
        selectedEvent = null;
        showDeleteConfirmation = false;
    }

    private async Task ConfirmDelete()
    {
        if (selectedEvent != null)
        {
            await EventService.DeleteEventAsync(selectedEvent.Id);
            await LoadEvents();
            LoadStatistics();
        }
        showDeleteConfirmation = false;
        selectedEvent = null;
    }

    private void ExportEventData(int eventId)
    {
        // Implement export functionality
    }

    private class DashboardStatistics
    {
        public int TotalEvents { get; set; }
        public int ActiveEvents { get; set; }
        public int TotalRegistrations { get; set; }
        public decimal TotalRevenue { get; set; }
        public int CompletedEvents { get; set; }
    }
}

<style>
    .stats-list {
        display: grid;
        gap: 1rem;
    }

    .stat-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem;
        background-color: #f8f9fa;
        border-radius: 0.25rem;
    }

    .stat-label {
        color: #6c757d;
        font-size: 0.875rem;
    }

    .stat-value {
        font-weight: bold;
        color: #0d6efd;
    }

    .chart-container {
        height: 300px;
        margin-top: 1rem;
    }

    .modal {
        background-color: rgba(0, 0, 0, 0.5);
    }

    .table td {
        vertical-align: middle;
    }

    .button-group {
        display: flex;
        flex-wrap: wrap;
        gap: 4px;
        justify-content: flex-start;
        align-items: center;
    }

    .action-btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 4px 8px;
        border-radius: 4px;
        border: none;
        font-size: 0.875rem;
        line-height: 1;
        cursor: pointer;
        transition: all 0.2s ease;
        min-width: 32px;
        white-space: nowrap;
    }

    .action-btn i {
        margin-right: 4px;
    }

    .action-btn.view {
        background-color: #e3f2fd;
        color: #1976d2;
    }

    .action-btn.reg {
        background-color: #e8f5e9;
        color: #2e7d32;
    }

    .action-btn.edit {
        background-color: #fff3e0;
        color: #f57c00;
    }

    .action-btn.delete {
        background-color: #ffebee;
        color: #d32f2f;
    }

    .action-btn:hover {
        filter: brightness(0.95);
    }

    @@media (max-width: 768px) {
        .button-group {
            gap: 2px;
        }

        .action-btn {
            padding: 4px;
            min-width: 28px;
        }

        .action-btn .btn-text {
            display: none;
        }

        .action-btn i {
            margin-right: 0;
        }
    }

    @@media (max-width: 576px) {
        .button-group {
            justify-content: center;
        }
    }

    .event-card {
        background: white;
        border-radius: 8px;
        padding: 16px;
        margin-bottom: 16px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        width: 100%;
        max-width: 100%;
        overflow: hidden;
    }

    .event-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 12px;
    }

    .event-title {
        margin: 0;
        font-size: 1.1rem;
        font-weight: 500;
    }

    .event-badge {
        background: #00c853;
        color: white;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.75rem;
    }

    .event-details {
        margin-bottom: 12px;
    }

    .event-info {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 8px;
        color: #666;
    }

    .event-info i {
        color: #999;
        width: 16px;
    }

    .event-actions {
        display: flex;
        flex-direction: column;
        gap: 4px;
        margin-top: 12px;
    }

    .action-row {
        display: flex;
        gap: 4px;
        width: 100%;
    }

    .action-btn {
        padding: 2px;
        border: none;
        font-size: 0.65rem;
        cursor: pointer;
        transition: all 0.2s ease;
        text-transform: uppercase;
        font-weight: 500;
        background: transparent;
        flex: 1;
        min-width: 0;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        letter-spacing: -0.2px;
    }

    .action-btn.view {
        color: #673ab7;
    }

    .action-btn.reg {
        color: #e91e63;
    }

    .action-btn.edit {
        color: #2196f3;
    }

    .action-btn.delete {
        color: #f44336;
    }

    .action-btn:hover {
        opacity: 0.8;
    }

    @@media (max-width: 768px) {
        .event-actions {
            gap: 2px;
        }

        .action-row {
            gap: 2px;
        }

        .action-btn {
            font-size: 0.6rem;
            padding: 2px 1px;
            letter-spacing: -0.3px;
        }
    }

    @@media (max-width: 480px) {
        .event-actions {
            gap: 4px;
        }

        .action-row {
            flex-direction: column;
            gap: 4px;
        }

        .action-btn {
            width: 100%;
            text-align: left;
            padding: 4px 0;
            font-size: 0.7rem;
            letter-spacing: normal;
        }
    }
</style>
