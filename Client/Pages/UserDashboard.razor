@page "/dashboard"
@using VentyTime.Shared.Models
@using Microsoft.AspNetCore.Components.Web
@inject IUserService UserService
@inject IRegistrationService RegistrationService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IEventService EventService

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (isLoading)
    {
        <div class="d-flex justify-center align-center" style="height: 400px;">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </div>
    }
    else if (user == null)
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="my-4">
            Unable to load user profile. Please try again later.
        </MudAlert>
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" sm="12" md="4">
                <MudPaper Elevation="3" Class="pa-4">
                    <div class="d-flex flex-column align-center mb-4">
                        @if (!string.IsNullOrEmpty(user.AvatarUrl))
                        {
                            <MudAvatar Size="Size.Large" Image="@user.AvatarUrl" Class="my-4" Style="width: 120px; height: 120px;" />
                        }
                        else
                        {
                            <MudAvatar Size="Size.Large" Color="Color.Primary" Class="my-4" Style="width: 120px; height: 120px;">
                                @(user.UserName?[0].ToString().ToUpper() ?? "U")
                            </MudAvatar>
                        }
                        <MudText Typo="Typo.h5" Class="mt-2" Align="Align.Center">@(user.UserName ?? "Unknown")</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2" Align="Align.Center">
                            Member since @(user.CreatedAt.ToString("MMMM yyyy"))
                        </MudText>
                    </div>

                    <MudDivider Class="mb-4" />

                    <MudList Dense="true" DisablePadding="true" Class="pa-0">
                        <MudListItem Class="pa-0 mb-4">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Email" Class="mr-3" Color="Color.Primary" />
                                <div>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">Email</MudText>
                                    <MudText Typo="Typo.body1">@user.Email</MudText>
                                </div>
                            </div>
                        </MudListItem>

                        @if (!string.IsNullOrEmpty(user.PhoneNumber))
                        {
                            <MudListItem Class="pa-0 mb-4">
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@Icons.Material.Filled.Phone" Class="mr-3" Color="Color.Primary" />
                                    <div>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">Phone</MudText>
                                        <MudText Typo="Typo.body1">@user.PhoneNumber</MudText>
                                    </div>
                                </div>
                            </MudListItem>
                        }

                        <MudListItem Class="pa-0 mb-4">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.EventNote" Class="mr-3" Color="Color.Primary" />
                                <div>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">Events Registered</MudText>
                                    <div class="d-flex align-center">
                                        <MudText Typo="Typo.body1" Class="mr-2">@registrations.Count</MudText>
                                        @if (registrations.Any())
                                        {
                                            <MudChip Size="Size.Small" Color="Color.Primary" Label="true">
                                                @registrations.Count(r => r.Event?.StartDate > DateTime.Now) upcoming
                                            </MudChip>
                                        }
                                    </div>
                                </div>
                            </div>
                        </MudListItem>
                    </MudList>

                    <MudButton Variant="Variant.Filled"
                              Color="Color.Primary"
                              StartIcon="@Icons.Material.Filled.Edit"
                              FullWidth="true"
                              OnClick="@(() => NavigationManager.NavigateTo("/profile-settings"))"
                              Class="mt-4">
                        Edit Profile
                    </MudButton>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" sm="12" md="8">
                <MudTabs Elevation="3" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-4">
                    <MudTabPanel Text="Upcoming Events" Icon="@Icons.Material.Filled.Event">
                        @if (!registrations.Any())
                        {
                            <div class="d-flex flex-column align-center py-8">
                                <MudIcon Icon="@Icons.Material.Filled.Event" Color="Color.Secondary" Size="Size.Large" Class="mb-4" />
                                <MudText Color="Color.Secondary" Align="Align.Center" Class="mb-4">
                                    You haven't registered for any events yet
                                </MudText>
                                <MudButton Variant="Variant.Filled" 
                                         Color="Color.Primary"
                                         OnClick="@(() => NavigationManager.NavigateTo("/"))">
                                    Browse Events
                                </MudButton>
                            </div>
                        }
                        else
                        {
                            <div class="events-grid">
                                @foreach (var registration in registrations.OrderBy(r => r?.Event?.StartDate ?? DateTime.MaxValue))
                                {
                                    if (registration.Event != null)
                                    {
                                        <MudCard Elevation="2" Class="event-card" @onclick="@(() => NavigationManager.NavigateTo($"/event/{registration.EventId}"))">
                                            <MudCardHeader>
                                                <CardHeaderContent>
                                                    <MudText Typo="Typo.h6">@registration.Event.Title</MudText>
                                                </CardHeaderContent>
                                                <CardHeaderActions>
                                                    <MudChip Size="Size.Small" 
                                                            Color="@(registration.Event.StartDate > DateTime.Now ? Color.Success : Color.Default)"
                                                            Label="true">
                                                        @(registration.Event.StartDate > DateTime.Now ? "Upcoming" : "Past")
                                                    </MudChip>
                                                </CardHeaderActions>
                                            </MudCardHeader>
                                            <MudCardContent>
                                                <div class="d-flex flex-column gap-2">
                                                    <div class="d-flex align-center">
                                                        <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Small" Class="mr-2" />
                                                        <MudText Typo="Typo.body2">
                                                            @registration.Event.StartDate.ToLocalTime().ToString("MMM dd, yyyy HH:mm")
                                                        </MudText>
                                                    </div>
                                                    <div class="d-flex align-center">
                                                        <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" Class="mr-2" />
                                                        <MudText Typo="Typo.body2">@registration.Event.Location</MudText>
                                                    </div>
                                                </div>
                                            </MudCardContent>
                                        </MudCard>
                                    }
                                }
                            </div>
                        }
                    </MudTabPanel>

                    <MudTabPanel Text="My Events" Icon="@Icons.Material.Filled.EventAvailable">
                        @if (!organizedEvents.Any())
                        {
                            <div class="d-flex flex-column align-center py-8">
                                <MudIcon Icon="@Icons.Material.Filled.AddCircle" 
                                        Color="Color.Secondary" 
                                        Size="Size.Large" 
                                        Class="mb-4" />
                                <MudText Color="Color.Secondary" Class="mb-4">You haven't created any events yet</MudText>
                                <MudButton Variant="Variant.Filled" 
                                         Color="Color.Primary"
                                         OnClick="@(() => NavigationManager.NavigateTo("/events/create"))">
                                    CREATE EVENT
                                </MudButton>
                            </div>
                        }
                        else
                        {
                            <MudList Clickable="true">
                                @foreach (var evt in organizedEvents.OrderByDescending(e => e?.StartDate ?? DateTime.MinValue))
                                {
                                    <MudListItem>
                                        <div class="d-flex" style="gap: 16px; cursor: pointer;" @onclick="@(() => NavigationManager.NavigateTo($"/event/{evt.Id}"))">
                                            @if (!string.IsNullOrEmpty(evt?.ImageUrl))
                                            {
                                                <MudImage ObjectFit="ObjectFit.Cover"
                                                         Src="@evt.ImageUrl"
                                                         Alt="Event image"
                                                         Width="120"
                                                         Height="80"
                                                         Class="rounded-lg" />
                                            }
                                            else
                                            {
                                                <MudPaper Width="120" Height="80" Class="d-flex align-center justify-center rounded-lg">
                                                    <MudIcon Icon="@Icons.Material.Filled.Image" Size="Size.Large" Color="Color.Default" />
                                                </MudPaper>
                                            }
                                            <div class="d-flex flex-column justify-center">
                                                <MudText Typo="Typo.h6">@(evt?.Title ?? "Unknown Event")</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                                    @(evt?.StartDate.ToLocalTime().ToString("f") ?? "Date not set")
                                                </MudText>
                                                <MudText Typo="Typo.body2">@(evt?.Location ?? "Location not set")</MudText>
                                            </div>
                                        </div>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                    </MudTabPanel>
                </MudTabs>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

<style>
    .events-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 16px;
        padding: 16px 0;
    }

    .event-card {
        height: 100%;
        display: flex;
        flex-direction: column;
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        cursor: pointer;
    }

    .event-card:hover {
        transform: translateY(-4px);
        box-shadow: var(--mud-elevation-10);
    }

    @@media (max-width: 599px) {
        .events-grid {
            grid-template-columns: 1fr;
        }
    }

    @@media (min-width: 600px) and (max-width: 959px) {
        .events-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    }
</style>

@code {
    private bool isLoading = true;
    private ApplicationUser? user;
    private List<Registration> registrations = new();
    private List<Event> organizedEvents = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("Starting dashboard initialization...");
            var userId = await UserService.GetCurrentUserIdAsync();
            Console.WriteLine($"Current user ID: {userId}");
            
            if (!string.IsNullOrEmpty(userId))
            {
                user = await UserService.GetUserByIdAsync(userId);
                Console.WriteLine($"User loaded: {user?.UserName}");
                
                if (user != null)
                {
                    organizedEvents = await EventService.GetEventsByOrganizerIdAsync(userId);
                    Console.WriteLine($"Organized events loaded: {organizedEvents.Count}");
                    
                    registrations = await RegistrationService.GetUserRegistrationsAsync();
                    Console.WriteLine($"User registrations loaded: {registrations.Count}");
                    Console.WriteLine($"First registration event: {registrations.FirstOrDefault()?.Event?.Title ?? "None"}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in dashboard: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            Snackbar.Add($"Error loading dashboard: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToEditEvent(int eventId)
    {
        NavigationManager.NavigateTo($"/events/{eventId}/edit");
    }
}
