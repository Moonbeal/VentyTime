@page "/dashboard"
@using VentyTime.Shared.Models
@using VentyTime.Client.Services
@inject IUserService UserService
@inject IEventService EventService
@inject IRegistrationService RegistrationService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
    @if (isLoading)
    {
        <div class="d-flex justify-center">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </div>
    }
    else if (errorMessage != null)
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="my-4">
            @errorMessage
        </MudAlert>
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" sm="12" md="4" lg="3">
                <MudPaper Class="pa-4" Style="@($"background: linear-gradient(to bottom, var(--mud-palette-primary) 30%, var(--mud-palette-background) 30%);")">
                    <div class="d-flex flex-column align-center">
                        <MudAvatar Style="width: 150px; height: 150px; border: 4px solid var(--mud-palette-background);" Class="mud-elevation-5">
                            @if (!string.IsNullOrEmpty(currentUser?.AvatarUrl))
                            {
                                <MudImage Src="@currentUser.AvatarUrl" Alt="Profile" ObjectFit="ObjectFit.Cover" Width="150" Height="150" Class="rounded-circle" />
                            }
                            else
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Large" />
                            }
                        </MudAvatar>
                        <MudText Typo="Typo.h5" Class="mt-4 mb-1">@currentUser?.Email</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                            Member since @currentUser?.CreatedAt.ToString("MMMM yyyy")
                        </MudText>
                        
                        <MudDivider Class="mb-4 mt-2" />
                        
                        <div class="d-flex flex-wrap justify-center gap-2 mb-4">
                            @foreach (var role in userRoles)
                            {
                                <MudChip Color="Color.Primary" Size="Size.Small" Class="rounded-pill" Variant="Variant.Outlined">
                                    @role
                                </MudChip>
                            }
                        </div>
                        
                        <MudButton Variant="Variant.Filled"
                                  Color="Color.Primary"
                                  StartIcon="@Icons.Material.Filled.Settings"
                                  OnClick="@(() => NavigationManager.NavigateTo("/profile-settings"))"
                                  FullWidth="true">
                            Profile Settings
                        </MudButton>
                    </div>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" sm="12" md="8" lg="9">
                <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-4" Class="mud-elevation-4">
                    <MudTabPanel Text="Upcoming Events" Icon="@Icons.Material.Filled.Event">
                        @if (!registeredEvents.Any())
                        {
                            <div class="d-flex flex-column align-center py-8">
                                <MudIcon Icon="@Icons.Material.Filled.Event" 
                                        Color="Color.Secondary" 
                                        Size="Size.Large" 
                                        Class="mb-4" />
                                <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mb-2">No Upcoming Events</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                                    You haven't registered for any events yet.
                                </MudText>
                                <MudButton Variant="Variant.Filled"
                                          Color="Color.Primary"
                                          OnClick="@(() => NavigationManager.NavigateTo("/"))">
                                    Browse Events
                                </MudButton>
                            </div>
                        }
                        else
                        {
                            <MudGrid Spacing="4">
                                @foreach (var evt in registeredEvents.OrderBy(e => e.StartDate))
                                {
                                    <MudItem xs="12" sm="6" md="6">
                                        <MudCard Elevation="2" Class="rounded">
                                            <MudCardHeader>
                                                <CardHeaderContent>
                                                    <MudText Typo="Typo.h6" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                                        @evt.Title
                                                    </MudText>
                                                </CardHeaderContent>
                                                <CardHeaderActions>
                                                    <MudChip Size="Size.Small"
                                                            Color="@(evt.StartDate > DateTime.Now ? Color.Success : Color.Default)"
                                                            Class="rounded-pill">
                                                        @(evt.StartDate > DateTime.Now ? "Upcoming" : "Past")
                                                    </MudChip>
                                                </CardHeaderActions>
                                            </MudCardHeader>
                                            <MudCardContent>
                                                <div class="d-flex flex-column gap-2">
                                                    <div class="d-flex align-center">
                                                        <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Small" Class="mr-2" />
                                                        <MudText Typo="Typo.body2">
                                                            @evt.StartDate.ToLocalTime().ToString("MMM dd, yyyy HH:mm")
                                                        </MudText>
                                                    </div>
                                                    <div class="d-flex align-center">
                                                        <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" Class="mr-2" />
                                                        <MudText Typo="Typo.body2" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                                            @evt.Location
                                                        </MudText>
                                                    </div>
                                                </div>
                                            </MudCardContent>
                                            <MudCardActions Class="d-flex justify-end">
                                                <MudButton Variant="Variant.Text"
                                                          Color="Color.Primary"
                                                          OnClick="@(() => NavigationManager.NavigateTo($"/event/{evt.Id}"))">
                                                    View Details
                                                </MudButton>
                                            </MudCardActions>
                                        </MudCard>
                                    </MudItem>
                                }
                            </MudGrid>
                        }
                    </MudTabPanel>

                    <MudTabPanel Text="My Events" Icon="@Icons.Material.Filled.EventAvailable">
                        @if (!userEvents.Any())
                        {
                            <div class="d-flex flex-column align-center py-8">
                                <MudIcon Icon="@Icons.Material.Filled.AddCircle"
                                        Color="Color.Secondary"
                                        Size="Size.Large"
                                        Class="mb-4" />
                                <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mb-2">No Events Created</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                                    You haven't created any events yet.
                                </MudText>
                                <MudButton Variant="Variant.Filled"
                                          Color="Color.Primary"
                                          OnClick="@(() => NavigationManager.NavigateTo("/events/create"))">
                                    Create Event
                                </MudButton>
                            </div>
                        }
                        else
                        {
                            <MudGrid Spacing="4">
                                @foreach (var evt in userEvents)
                                {
                                    <MudItem xs="12" sm="6" md="6">
                                        <MudCard Elevation="2" Class="rounded">
                                            <MudCardHeader>
                                                <CardHeaderContent>
                                                    <MudText Typo="Typo.h6" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                                        @evt.Title
                                                    </MudText>
                                                </CardHeaderContent>
                                                <CardHeaderActions>
                                                    <MudChip Size="Size.Small"
                                                            Color="@(evt.StartDate > DateTime.Now ? Color.Success : Color.Default)"
                                                            Class="rounded-pill">
                                                        @(evt.StartDate > DateTime.Now ? "Upcoming" : "Past")
                                                    </MudChip>
                                                </CardHeaderActions>
                                            </MudCardHeader>
                                            <MudCardContent>
                                                <div class="d-flex flex-column gap-2">
                                                    <div class="d-flex align-center">
                                                        <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Small" Class="mr-2" />
                                                        <MudText Typo="Typo.body2">
                                                            @evt.StartDate.ToLocalTime().ToString("MMM dd, yyyy HH:mm")
                                                        </MudText>
                                                    </div>
                                                    <div class="d-flex align-center">
                                                        <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" Class="mr-2" />
                                                        <MudText Typo="Typo.body2" Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                                            @evt.Location
                                                        </MudText>
                                                    </div>
                                                </div>
                                            </MudCardContent>
                                            <MudCardActions Class="d-flex justify-end gap-2">
                                                <MudButton Variant="Variant.Text"
                                                          Color="Color.Primary"
                                                          OnClick="@(() => NavigationManager.NavigateTo($"/event/{evt.Id}"))">
                                                    View Details
                                                </MudButton>
                                                <MudButton Variant="Variant.Text"
                                                          Color="Color.Secondary"
                                                          OnClick="@(() => NavigationManager.NavigateTo($"/event/{evt.Id}/edit"))">
                                                    Edit
                                                </MudButton>
                                                <MudButton Variant="Variant.Text"
                                                          Color="Color.Error"
                                                          OnClick="@(() => DeleteEventAsync(evt.Id))">
                                                    Delete
                                                </MudButton>
                                            </MudCardActions>
                                        </MudCard>
                                    </MudItem>
                                }
                            </MudGrid>
                        }
                    </MudTabPanel>
                </MudTabs>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    private ApplicationUser? currentUser;
    private List<Event> userEvents = new();
    private List<Event> registeredEvents = new();
    private List<string> userRoles = new();
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
    }

    private async Task LoadUserData()
    {
        try
        {
            isLoading = true;
            var userId = await UserService.GetCurrentUserIdAsync();
            if (!string.IsNullOrEmpty(userId))
            {
                currentUser = await UserService.GetUserByIdAsync(userId);
                userEvents = await EventService.GetEventsByOrganizerIdAsync(userId);
                registeredEvents = await EventService.GetRegisteredEventsAsync();
                userRoles = (await UserService.GetUserRolesAsync(userId)).ToList();
            }
        }
        catch (Exception)
        {
            errorMessage = "Error loading user data";
            Snackbar.Add(errorMessage, Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteEventAsync(int eventId)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Are you sure you want to delete this event? This action cannot be undone." },
            { "ButtonText", "Delete" },
            { "Color", Color.Error }
        };

        var dialog = await DialogService.ShowAsync<DeleteConfirmationDialog>("Delete Event", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var success = await EventService.DeleteEventAsync(eventId);
                if (success)
                {
                    Snackbar.Add("Event deleted successfully", Severity.Success);
                    await LoadUserData(); // Перезавантажуємо дані
                }
                else
                {
                    Snackbar.Add("Failed to delete event", Severity.Error);
                }
            }
            catch (Exception)
            {
                Snackbar.Add("Error deleting event", Severity.Error);
            }
        }
    }
}
