@page "/dashboard"
@using VentyTime.Shared.Models
@using Microsoft.AspNetCore.Components.Web
@inject IUserService UserService
@inject IRegistrationService RegistrationService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IEventService EventService
@inject IAuthService AuthService
@inject ILogger Logger

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (isLoading)
    {
        <div class="d-flex justify-center align-center" style="height: 400px;">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </div>
    }
    else if (user == null)
    {
        <MudAlert Severity="Severity.Warning">Please log in to view your dashboard.</MudAlert>
    }
    else
    {
        <MudGrid>
            <MudItem xs="12">
                <MudPaper Class="pa-4">
                    <MudText Typo="Typo.h5">Welcome, @user.Username!</MudText>
                    <MudDivider Class="my-4" />
                    <MudGrid>
                        <MudItem xs="12" sm="4">
                            <MudPaper Class="pa-4" Elevation="2">
                                <MudText Typo="Typo.h6">Profile Info</MudText>
                                <MudList>
                                    <MudListItem Icon="@Icons.Material.Filled.Person" Text="@user.Username" />
                                    <MudListItem Icon="@Icons.Material.Filled.Email" Text="@user.Email" />
                                    <MudListItem Icon="@Icons.Material.Filled.Badge" Text="@user.Role.ToString()" />
                                </MudList>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>

            <MudItem xs="12">
                <MudTabs>
                    <MudTabPanel Text="My Events">
                        @if (!organizedEvents.Any())
                        {
                            <MudAlert Severity="Severity.Info">You haven't organized any events yet.</MudAlert>
                        }
                        else
                        {
                            <MudTable Items="@organizedEvents" Dense="true" Hover="true">
                                <HeaderContent>
                                    <MudTh>Title</MudTh>
                                    <MudTh>Date</MudTh>
                                    <MudTh>Location</MudTh>
                                    <MudTh>Actions</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Title">@context.Title</MudTd>
                                    <MudTd DataLabel="Date">@context.StartDate.ToShortDateString()</MudTd>
                                    <MudTd DataLabel="Location">@context.Location</MudTd>
                                    <MudTd>
                                        <MudButton Variant="Variant.Filled" 
                                                  Color="Color.Primary" 
                                                  Size="Size.Small"
                                                  OnClick="@(() => NavigateToEditEvent(context.Id))">
                                            Edit
                                        </MudButton>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        }
                    </MudTabPanel>

                    <MudTabPanel Text="Upcoming Events" Icon="@Icons.Material.Filled.Event">
                        @if (!registrations.Any())
                        {
                            <div class="d-flex flex-column align-center py-8">
                                <MudIcon Icon="@Icons.Material.Filled.EventBusy" 
                                        Color="Color.Secondary" 
                                        Size="Size.Large" 
                                        Class="mb-4" />
                                <MudText Color="Color.Secondary" Class="mb-4">You haven't registered for any events yet</MudText>
                                <MudButton Variant="Variant.Filled" 
                                         Color="Color.Primary"
                                         OnClick="@(() => NavigationManager.NavigateTo("/"))">
                                    Browse Events
                                </MudButton>
                            </div>
                        }
                        else
                        {
                            <MudList Clickable="true">
                                @foreach (var registration in registrations.OrderBy(r => r?.Event?.StartDate ?? DateTime.MaxValue))
                                {
                                    <MudListItem OnClick="@(() => NavigationManager.NavigateTo($"/events/{registration.EventId}"))">
                                        <div class="d-flex" style="gap: 16px;">
                                            @if (!string.IsNullOrEmpty(registration?.Event?.ImageUrl))
                                            {
                                                <MudImage ObjectFit="ObjectFit.Cover"
                                                         Src="@registration.Event.ImageUrl"
                                                         Alt="Event image"
                                                         Width="120"
                                                         Height="80"
                                                         Class="rounded-lg" />
                                            }
                                            else
                                            {
                                                <MudPaper Width="120" Height="80" Class="d-flex align-center justify-center rounded-lg">
                                                    <MudIcon Icon="@Icons.Material.Filled.Image" Size="Size.Large" Color="Color.Default" />
                                                </MudPaper>
                                            }
                                            <div class="d-flex flex-column justify-center">
                                                <MudText Typo="Typo.h6">@(registration?.Event?.Title ?? "Unknown Event")</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                                    @(registration?.Event?.StartDate.ToLocalTime().ToString("f") ?? "Date not set")
                                                </MudText>
                                                <MudText Typo="Typo.body2">@(registration?.Event?.Location ?? "Location not set")</MudText>
                                            </div>
                                        </div>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                    </MudTabPanel>

                    <MudTabPanel Text="My Events" Icon="@Icons.Material.Filled.EventAvailable">
                        @if (!organizedEvents.Any())
                        {
                            <div class="d-flex flex-column align-center py-8">
                                <MudIcon Icon="@Icons.Material.Filled.AddCircle" 
                                        Color="Color.Secondary" 
                                        Size="Size.Large" 
                                        Class="mb-4" />
                                <MudText Color="Color.Secondary" Class="mb-4">You haven't created any events yet</MudText>
                                <MudButton Variant="Variant.Filled" 
                                         Color="Color.Primary"
                                         OnClick="@(() => NavigationManager.NavigateTo("/events/create"))">
                                    Create Event
                                </MudButton>
                            </div>
                        }
                        else
                        {
                            <MudList Clickable="true">
                                @foreach (var evt in organizedEvents.OrderByDescending(e => e?.StartDate ?? DateTime.MinValue))
                                {
                                    <MudListItem OnClick="@(() => NavigationManager.NavigateTo($"/events/{evt.Id}"))">
                                        <div class="d-flex" style="gap: 16px;">
                                            @if (!string.IsNullOrEmpty(evt?.ImageUrl))
                                            {
                                                <MudImage ObjectFit="ObjectFit.Cover"
                                                         Src="@evt.ImageUrl"
                                                         Alt="Event image"
                                                         Width="120"
                                                         Height="80"
                                                         Class="rounded-lg" />
                                            }
                                            else
                                            {
                                                <MudPaper Width="120" Height="80" Class="d-flex align-center justify-center rounded-lg">
                                                    <MudIcon Icon="@Icons.Material.Filled.Image" Size="Size.Large" Color="Color.Default" />
                                                </MudPaper>
                                            }
                                            <div class="d-flex flex-column justify-center">
                                                <MudText Typo="Typo.h6">@(evt?.Title ?? "Unknown Event")</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                                    @(evt?.StartDate.ToLocalTime().ToString("f") ?? "Date not set")
                                                </MudText>
                                                <MudText Typo="Typo.body2">@(evt?.Location ?? "Location not set")</MudText>
                                            </div>
                                        </div>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                    </MudTabPanel>
                </MudTabs>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    private User? user;
    private List<EventDto> organizedEvents = new();
    private string userId = string.Empty;
    private string searchTerm = string.Empty;
    private bool isLoading = true;
    private List<UserEventRegistration> registrations = new();
    private List<EventDto> upcomingEvents = new();
    private List<EventDto> pastEvents = new();
    private List<EventDto> events = new();
    private List<EventDto> filteredEvents => events.Where(e => e.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userId = await AuthService.GetUserIdAsync();
            user = await AuthService.GetCurrentUserAsync();
            if (user != null)
            {
                await LoadOrganizedEvents();
                registrations = await RegistrationService.GetUserRegistrationsAsync();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading user dashboard");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadOrganizedEvents()
    {
        try
        {
            if (userId != null)
            {
                organizedEvents = await EventService.GetEventsByOrganizerIdAsync(userId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading organized events: {ex.Message}");
            organizedEvents = new List<EventDto>();
        }
    }

    private async Task SearchEvents()
    {
        try
        {
            if (userId != null)
            {
                organizedEvents = await EventService.GetEventsByOrganizerIdAsync(userId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching events: {ex.Message}");
            organizedEvents = new List<EventDto>();
        }
    }

    private void NavigateToEditEvent(int eventId)
    {
        NavigationManager.NavigateTo($"/events/{eventId}/edit");
    }
}
