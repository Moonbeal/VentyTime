@page "/dashboard"
@using VentyTime.Shared.Models
@inject IUserService UserService
@inject IRegistrationService RegistrationService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (user == null)
    {
        <MudAlert Severity="Severity.Error">Unable to load user profile</MudAlert>
    }
    else
    {
        <MudGrid>
            <MudItem xs="12" sm="4">
                <MudPaper Class="pa-4">
                    <MudText Typo="Typo.h5" Class="mb-4">Profile</MudText>
                    <MudList>
                        <MudListItem>
                            <MudText>
                                <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-2" />
                                @user.FullName
                            </MudText>
                        </MudListItem>
                        <MudListItem>
                            <MudText>
                                <MudIcon Icon="@Icons.Material.Filled.Email" Class="mr-2" />
                                @user.Email
                            </MudText>
                        </MudListItem>
                    </MudList>
                </MudPaper>
            </MudItem>

            <MudItem xs="12" sm="8">
                <MudPaper Class="pa-4">
                    <MudText Typo="Typo.h5" Class="mb-4">My Registrations</MudText>
                    @if (!registrations.Any())
                    {
                        <MudAlert Severity="Severity.Info">You haven't registered for any events yet.</MudAlert>
                    }
                    else
                    {
                        <MudList>
                            @foreach (var registration in registrations)
                            {
                                <MudListItem>
                                    <MudCard>
                                        <MudCardContent>
                                            <MudText Typo="Typo.h6">@registration.Event?.Title</MudText>
                                            <MudText>@registration.Event?.Description</MudText>
                                            <MudText>
                                                <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Class="mr-2" />
                                                @registration.Event?.GetDateTime().ToString("f")
                                            </MudText>
                                            <MudText>
                                                <MudIcon Icon="@Icons.Material.Filled.LocationOn" Class="mr-2" />
                                                @registration.Event?.Location
                                            </MudText>
                                        </MudCardContent>
                                        <MudCardActions>
                                            <MudButton 
                                                Variant="Variant.Text" 
                                                Color="Color.Primary"
                                                OnClick="@(() => NavigateToEvent(registration.Event?.Id ?? 0))">
                                                View Details
                                            </MudButton>
                                        </MudCardActions>
                                    </MudCard>
                                </MudListItem>
                            }
                        </MudList>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
    private ApplicationUser? user;
    private List<Registration> registrations = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await UserService.GetUserProfileAsync();
            if (user != null)
            {
                registrations = await RegistrationService.GetUserRegistrationsAsync(user.Id);
            }
        }
        catch (Exception)
        {
            // Handle error appropriately
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToEvent(int eventId)
    {
        NavigationManager.NavigateTo($"/events/{eventId}");
    }
}
