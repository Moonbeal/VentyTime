@page "/login"
@using VentyTime.Shared.Models
@using VentyTime.Shared.Models.Auth
@using VentyTime.Client.Auth
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center" Style="min-height: calc(100vh - 64px);">
    <MudPaper Elevation="3" Class="pa-8 rounded-lg" Style="width: 100%; max-width: 400px;">
        <div class="d-flex flex-column align-center mb-8">
            <MudIcon Icon="@Icons.Material.Filled.Login" Color="Color.Primary" Size="Size.Large" Class="mb-4" Style="width: 64px; height: 64px;" />
            <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-2 font-weight-bold">Welcome Back</MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary" Class="text-center">Choose your role to continue</MudText>
        </div>

        <EditForm Model="@loginRequest" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            <div class="mb-6">
                <MudText Typo="Typo.subtitle1" Class="mb-2">Select Your Role</MudText>
                <MudRadioGroup T="UserRole" @bind-Value="loginRequest.SelectedRole" Class="d-flex flex-column gap-2">
                    <MudRadio Color="Color.Primary" Option="@UserRole.User" Dense="true">User</MudRadio>
                    <MudRadio Color="Color.Primary" Option="@UserRole.Organizer" Dense="true">Event Organizer</MudRadio>
                </MudRadioGroup>
            </div>

            <MudTextField @bind-Value="loginRequest.Email"
                         Label="Email"
                         Variant="Variant.Outlined"
                         Class="mb-3"
                         Required="true"
                         RequiredError="Email is required!"
                         InputType="InputType.Email" />

            <MudTextField @bind-Value="loginRequest.Password"
                         Label="Password"
                         Variant="Variant.Outlined"
                         InputType="@PasswordInput"
                         Class="mb-4"
                         Required="true"
                         RequiredError="Password is required!"
                         Adornment="Adornment.End"
                         AdornmentIcon="@PasswordInputIcon"
                         OnAdornmentClick="TogglePasswordVisibility" />

            <div class="d-flex justify-space-between align-center mb-4">
                <MudCheckBox @bind-Checked="loginRequest.RememberMe" Color="Color.Primary" Label="Remember me" />
                <MudLink Href="/forgot-password" Underline="Underline.None">Forgot password?</MudLink>
            </div>

            <MudButton ButtonType="ButtonType.Submit"
                      Variant="Variant.Filled"
                      Color="Color.Primary"
                      Size="Size.Large"
                      FullWidth="true"
                      Disabled="@isLoading"
                      Class="mb-3">
                @if (isLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Logging in...</MudText>
                }
                else
                {
                    <MudText>Login</MudText>
                }
            </MudButton>

            <div class="d-flex justify-center">
                <MudText Class="mr-2">Don't have an account?</MudText>
                <MudLink Href="/register" Underline="Underline.None" Color="Color.Primary">Register here</MudLink>
            </div>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mt-4" Variant="Variant.Filled">@errorMessage</MudAlert>
        }
    </MudPaper>
</MudContainer>

@code {
    private LoginRequest loginRequest = new() { SelectedRole = UserRole.User };
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        if (PasswordInput == InputType.Password)
        {
            PasswordInput = InputType.Text;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
        }
        else
        {
            PasswordInput = InputType.Password;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            var response = await UserService.LoginAsync(loginRequest);
            if (response.Success)
            {
                await LocalStorage.SetItemAsync("authToken", response.Token);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = response.Message ?? "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }
}
