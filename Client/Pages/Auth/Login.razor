@page "/login"
@using VentyTime.Shared.Models
@using VentyTime.Shared.Models.Auth
@using VentyTime.Client.Auth
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-5">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">Login</h3>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }

                    <EditForm Model="@loginRequest" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group mb-3">
                            <label for="email">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="loginRequest.Email" />
                            <ValidationMessage For="@(() => loginRequest.Email)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="password">Password</label>
                            <InputText type="password" id="password" class="form-control" @bind-Value="loginRequest.Password" />
                            <ValidationMessage For="@(() => loginRequest.Password)" />
                        </div>

                        <div class="form-group mb-3">
                            <label for="role">Login as</label>
                            <InputSelect id="role" class="form-control" @bind-Value="loginRequest.SelectedRole">
                                @foreach (var role in Enum.GetValues(typeof(UserRole)).Cast<UserRole>().Where(r => r != UserRole.None))
                                {
                                    <option value="@role">@role.ToString()</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => loginRequest.SelectedRole)" />
                        </div>

                        <div class="text-center">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm mr-1"></span>
                                }
                                Login
                            </button>
                        </div>
                    </EditForm>

                    <div class="mt-3 text-center">
                        <a href="/register">Don't have an account? Register here</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already logged in
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(token))
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            var response = await UserService.LoginAsync(loginRequest);
            if (response.Success)
            {
                await LocalStorage.SetItemAsync("authToken", response.Token);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = response.Message ?? "An error occurred during login";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login";
        }
        finally
        {
            isLoading = false;
        }
    }
}
