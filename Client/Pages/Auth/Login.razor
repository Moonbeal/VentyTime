@page "/login"
@using VentyTime.Shared.Models
@using VentyTime.Shared.Models.Auth
@using VentyTime.Client.Services
@using VentyTime.Client.Auth
@using Microsoft.AspNetCore.Components.Authorization
@using Blazored.LocalStorage
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
    <MudPaper Class="pa-8" Elevation="3">
        <MudForm @ref="form" @bind-IsValid="@success">
            <MudText Typo="Typo.h4" Class="mb-8">Login</MudText>

            <MudTextField @bind-Value="loginRequest.Email"
                         Label="Email"
                         Required="true"
                         RequiredError="Email is required"
                         Class="mb-6" />

            <div class="mb-6">
                <MudTextField @bind-Value="loginRequest.Password"
                             Label="Password"
                             Required="true"
                             RequiredError="Password is required"
                             InputType="@PasswordInput"
                             Adornment="Adornment.End"
                             AdornmentIcon="@PasswordInputIcon"
                             OnAdornmentClick="TogglePasswordVisibility" />
            </div>

            <div class="mb-6">
                <MudText Typo="Typo.subtitle1" Class="mb-2">Select Your Role</MudText>
                <MudSelect T="UserRole" @bind-Value="loginRequest.SelectedRole" Label="Role" AnchorOrigin="Origin.BottomCenter" Class="mb-3">
                    <MudSelectItem Value="@UserRole.Organizer">Event Organizer</MudSelectItem>
                    <MudSelectItem Value="@UserRole.User">User</MudSelectItem>
                    <MudSelectItem Value="@UserRole.Admin">Administrator</MudSelectItem>
                </MudSelect>
            </div>

            <MudCheckBox @bind-Checked="loginRequest.RememberMe" Label="Remember me" Class="mb-6" />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mb-6">@errorMessage</MudAlert>
            }

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       FullWidth="true"
                       OnClick="HandleLogin"
                       Disabled="isLoading">
                @if (isLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Login</MudText>
                }
            </MudButton>

            <MudDivider Class="my-6" />

            <MudText Align="Align.Center">
                Don't have an account?
                <MudLink Href="/register" Underline="Underline.Always">Register</MudLink>
            </MudText>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private MudForm form;
    private bool success;
    private LoginRequest loginRequest = new() { SelectedRole = UserRole.Organizer };
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        if (PasswordInput == InputType.Password)
        {
            PasswordInput = InputType.Text;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
        }
        else
        {
            PasswordInput = InputType.Password;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            Console.WriteLine($"Attempting login with role: {loginRequest.SelectedRole}");
            var response = await UserService.LoginAsync(loginRequest);
            
            if (response.Success)
            {
                Console.WriteLine($"Login successful with role: {response.User?.Role}");
                await LocalStorage.SetItemAsync("authToken", response.Token);
                await ((CustomAuthStateProvider)AuthStateProvider).NotifyUserAuthenticationAsync(response.Token);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Console.WriteLine($"Login failed: {response.Message}");
                errorMessage = response.Message ?? "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Login error: {ex}");
            errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Console.WriteLine($"Initial role: {loginRequest.SelectedRole}");
    }
}
