@page "/profile"
@using VentyTime.Shared.Models
@using VentyTime.Client.Services
@inject IEventService EventService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <!-- Profile Header -->
    <div class="profile-header mb-6">
        <MudPaper Class="pa-8 rounded-lg" Style="background: linear-gradient(135deg, var(--mud-palette-primary) 0%, var(--mud-palette-primary-darken) 100%);">
            <div class="d-flex flex-column flex-md-row align-center justify-space-between">
                <div class="d-flex flex-row align-center">
                    <MudAvatar Color="Color.Surface" Size="Size.Large" Style="width: 120px; height: 120px; font-size: 2.5rem;" Class="mud-elevation-4">
                        @{
                            var initials = currentUser?.FirstName?.FirstOrDefault().ToString().ToUpper() ?? 
                                         currentUser?.LastName?.FirstOrDefault().ToString().ToUpper() ?? 
                                         currentUser?.UserName?.FirstOrDefault().ToString().ToUpper() ?? "U";
                        }
                        @initials
                    </MudAvatar>
                    <div class="ml-6">
                        <MudText Typo="Typo.h4" Color="Color.Surface" Class="mb-1">@($"{currentUser?.FirstName} {currentUser?.LastName}")</MudText>
                        <MudText Typo="Typo.subtitle1" Color="Color.Surface">@currentUser?.Email</MudText>
                    </div>
                </div>
                <div class="d-flex flex-column align-end mt-4 mt-md-0">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Surface"
                              StartIcon="@Icons.Material.Filled.Edit"
                              Size="Size.Large"
                              OnClick="@(() => NavigationManager.NavigateTo("/profile/settings"))">
                        Edit Profile
                    </MudButton>
                </div>
            </div>
        </MudPaper>
    </div>

    <MudGrid>
        <!-- Profile Info Card -->
        <MudItem xs="12" md="4">
            <MudPaper Class="pa-6 rounded-lg" Elevation="0">
                <MudText Typo="Typo.h6" Class="mb-4">Contact Information</MudText>
                <div class="d-flex flex-column gap-4">
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.Email" Class="mr-3" Color="Color.Primary" />
                        <div>
                            <MudText Typo="Typo.caption" Color="Color.Primary">Email</MudText>
                            <MudText>@currentUser?.Email</MudText>
                        </div>
                    </div>
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.Phone" Class="mr-3" Color="Color.Primary" />
                        <div>
                            <MudText Typo="Typo.caption" Color="Color.Primary">Phone</MudText>
                            <MudText>@(string.IsNullOrEmpty(currentUser?.PhoneNumber) ? "No phone number" : currentUser.PhoneNumber)</MudText>
                        </div>
                    </div>
                </div>
            </MudPaper>
        </MudItem>

        <!-- Events Section -->
        <MudItem xs="12" md="8">
            @if (registeredEvents?.Any() == true)
            {
                <div class="mb-6">
                    <MudText Typo="Typo.h5" Class="mb-4">Your Registered Events</MudText>
                    <div class="d-flex flex-column gap-4">
                        @foreach (var evt in registeredEvents)
                        {
                            <MudPaper Class="pa-4 rounded-lg" Elevation="0" Style="border: 1px solid var(--mud-palette-lines-default)">
                                <div class="d-flex justify-space-between align-center">
                                    <div class="d-flex gap-4 align-center">
                                        <div class="event-date d-flex flex-column align-center justify-center" 
                                             style="background: var(--mud-palette-background-grey); width: 80px; height: 80px; border-radius: 12px;">
                                            <MudText Typo="Typo.h5" Color="Color.Primary">@evt.StartDate.ToString("dd")</MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Primary">@evt.StartDate.ToString("MMM")</MudText>
                                        </div>
                                        <div>
                                            <MudText Typo="Typo.h6" Class="mb-1">@evt.Title</MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Primary">@evt.StartDate.ToString("HH:mm")</MudText>
                                        </div>
                                    </div>
                                    <MudButton Variant="Variant.Text" 
                                              Color="Color.Primary"
                                              EndIcon="@Icons.Material.Filled.ChevronRight"
                                              OnClick="@(() => NavigationManager.NavigateTo($"/events/{evt.Id}"))">
                                        View Details
                                    </MudButton>
                                </div>
                            </MudPaper>
                        }
                    </div>
                </div>
            }

            @if (currentUser != null && organizedEvents?.Any() == true)
            {
                <div>
                    <MudText Typo="Typo.h5" Class="mb-4">Events You're Organizing</MudText>
                    <div class="d-flex flex-column gap-4">
                        @foreach (var evt in organizedEvents)
                        {
                            <MudCard>
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">@evt.Title</MudText>
                                        <MudText Typo="Typo.body2">@evt.Description</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardActions>
                                    <MudButton Variant="Variant.Text" Color="Color.Primary" Link="@($"/event/{evt.Id}")">View Details</MudButton>
                                    <MudButton Variant="Variant.Text" Color="Color.Secondary" Link="@($"/event/{evt.Id}/edit")">Edit</MudButton>
                                </MudCardActions>
                            </MudCard>
                        }
                    </div>
                </div>
            }

            @if (currentUser != null)
            {
                <div>
                    <MudText Typo="Typo.h5" Class="mb-4">Admin Panel</MudText>
                    <div class="d-flex flex-column gap-4">
                        <AdminPanel />
                    </div>
                </div>
            }

            @if (registeredEvents?.Any() != true && organizedEvents?.Any() != true)
            {
                <MudPaper Class="pa-6 rounded-lg d-flex flex-column align-center" Elevation="0">
                    <MudIcon Icon="@Icons.Material.Filled.Event" Color="Color.Default" Size="Size.Large" Class="mb-4" />
                    <MudText Typo="Typo.h6" Align="Align.Center">No Events Yet</MudText>
                    <MudText Typo="Typo.body2" Align="Align.Center" Class="mb-4">Start by browsing available events or create your own!</MudText>
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary"
                              OnClick="@(() => NavigationManager.NavigateTo("/events"))">
                        Browse Events
                    </MudButton>
                </MudPaper>
            }
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private ApplicationUser? currentUser;
    private IEnumerable<Event>? registeredEvents;
    private IEnumerable<Event>? organizedEvents;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await AuthService.GetUserAsync();
        if (currentUser != null)
        {
            registeredEvents = await EventService.GetRegisteredEventsAsync();
            organizedEvents = await EventService.GetOrganizedEventsAsync();
        }
    }
}
