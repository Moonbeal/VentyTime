@using VentyTime.Shared.Models
@inject IRegistrationService RegistrationService
@inject IAuthService AuthService

<MudDialog>
    <DialogContent>
        <MudText>Are you sure you want to register for "@Event.Title"?</MudText>
        <MudText Typo="Typo.body2">Date: @Event.StartDate.ToShortDateString()</MudText>
        <MudText Typo="Typo.body2">Time: @Event.StartDate.ToShortTimeString()</MudText>
        <MudText Typo="Typo.body2">Price: @Event.Price.ToString("C")</MudText>
        @if (_errorMessage != null)
        {
            <MudAlert Severity="Severity.Error" Class="mt-4">@_errorMessage</MudAlert>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="ConfirmAsync" Disabled="@_registering">
            @if (_registering)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Registering...</MudText>
            }
            else
            {
                <MudText>Register</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public Event Event { get; set; } = default!;

    private bool _registering;
    private string? _errorMessage;

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task ConfirmAsync()
    {
        try
        {
            _registering = true;
            _errorMessage = null;

            var user = await AuthService.GetCurrentUserAsync();
            if (user == null)
            {
                _errorMessage = "You must be logged in to register for events";
                return;
            }

            var result = await RegistrationService.RegisterForEventAsync(Event.Id, user.Id);
            if (result.Success)
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                _errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = "An error occurred while registering for the event";
        }
        finally
        {
            _registering = false;
        }
    }
}
