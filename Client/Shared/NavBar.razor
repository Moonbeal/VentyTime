@using Microsoft.AspNetCore.Components.Authorization
@using VentyTime.Shared.Models
@using VentyTime.Client.Components
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IUserService UserService
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject INotificationService NotificationService

<MudAppBar Elevation="1">
    <MudContainer MaxWidth="MaxWidth.ExtraLarge">
        <div class="d-flex justify-space-between align-center" style="width: 100%;">
            <!-- Logo -->
            <MudLink Href="" Color="Color.Inherit" Class="d-flex align-center">
                <MudIcon Icon="@Icons.Material.Filled.Schedule" Class="mr-2" />
                <MudText Typo="Typo.h6">VentyTime</MudText>
            </MudLink>

            <!-- Navigation Links -->
            <div class="d-flex align-center">
            </div>

            <!-- Auth Buttons -->
            <AuthorizeView>
                <Authorized>
                    <div class="d-flex align-center">
                        <NotificationList />
                        
                        <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                            <ActivatorContent>
                                <MudAvatar Style="height: 40px; width: 40px;" Class="ma-2">
                                    @if (!string.IsNullOrEmpty(currentUser?.AvatarUrl))
                                    {
                                        <MudImage Src="@currentUser.AvatarUrl" Alt="Profile" ObjectFit="ObjectFit.Cover" Width="40" Height="40" />
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Person" />
                                    }
                                </MudAvatar>
                            </ActivatorContent>
                            <ChildContent>
                                <MudMenuItem OnClick="@(() => NavigationManager.NavigateTo("/dashboard"))">Profile</MudMenuItem>
                                <AuthorizeView Roles="Admin, Organizer">
                                    <Authorized Context="innerAuth">
                                        <MudMenuItem OnClick="@(() => NavigationManager.NavigateTo("/events/create"))">Create Event</MudMenuItem>
                                    </Authorized>
                                </AuthorizeView>
                                <AuthorizeView Roles="Admin">
                                    <Authorized Context="adminContext">
                                        <MudMenuItem OnClick="@(() => NavigationManager.NavigateTo("/admin"))">Admin Panel</MudMenuItem>
                                    </Authorized>
                                </AuthorizeView>
                                <MudDivider />
                                <MudMenuItem OnClick="Logout">Logout</MudMenuItem>
                            </ChildContent>
                        </MudMenu>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="d-flex align-center">
                        <MudButton Variant="Variant.Text" 
                                  Color="Color.Inherit"
                                  OnClick="@(() => NavigationManager.NavigateTo("/login"))"
                                  Class="mx-2">
                            Login
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" 
                                  Color="Color.Secondary"
                                  OnClick="@(() => NavigationManager.NavigateTo("/register"))"
                                  Class="mx-2">
                            Register
                        </MudButton>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </MudContainer>
</MudAppBar>

@code {
    private ApplicationUser? currentUser;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userId = await UserService.GetCurrentUserIdAsync();
            if (!string.IsNullOrEmpty(userId))
            {
                currentUser = await UserService.GetUserByIdAsync(userId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user data: {ex.Message}");
            Snackbar.Add("Error loading user data", Severity.Error);
        }
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        NavigationManager.NavigateTo("/");
    }
}
