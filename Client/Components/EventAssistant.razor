@using MudBlazor

<MudPaper Class="chat-window @(IsOpen ? "open" : "")" Elevation="8">
    <div class="chat-header gradient-header d-flex justify-space-between align-center pa-3">
        <div class="d-flex align-center">
            <MudAvatar Color="Color.Secondary" Class="mr-3">
                <MudIcon Icon="@Icons.Material.Filled.SupportAgent" />
            </MudAvatar>
            <div>
                <MudText Typo="Typo.subtitle1" Color="Color.White">Event Assistant</MudText>
                <MudText Typo="Typo.caption" Color="Color.White">Online</MudText>
            </div>
        </div>
        <MudIconButton Icon="@Icons.Material.Filled.Close" 
                      Color="Color.Inherit" 
                      OnClick="@(() => IsOpen = false)" />
    </div>

    <div class="chat-messages pa-4">
        @foreach (var message in messages)
        {
            <div class="@(message.IsAssistant ? "assistant-message" : "user-message") mb-3">
                <MudText Typo="Typo.body2" Class="message-content">
                    @message.Content
                </MudText>
                <MudText Typo="Typo.caption" Color="Color.Secondary" Class="message-time">
                    @message.Time.ToString("HH:mm")
                </MudText>
            </div>
        }
    </div>

    <div class="chat-input pa-3">
        <MudTextField @bind-Value="currentMessage"
                     Placeholder="Type your message..."
                     Variant="Variant.Outlined"
                     Adornment="Adornment.End"
                     AdornmentIcon="@Icons.Material.Filled.Send"
                     OnAdornmentClick="SendMessage"
                     OnKeyPress="@(e => { if (e.Key == "Enter") SendMessage(); })"
                     Immediate="true"
                     Class="chat-input-field" />
    </div>
</MudPaper>

<MudFab Color="Color.Secondary" 
        StartIcon="@Icons.Material.Filled.SupportAgent" 
        OnClick="@(() => IsOpen = !IsOpen)"
        Class="chat-fab @(IsOpen ? "hidden" : "")" />

<style>
    .chat-window {
        position: fixed;
        bottom: 24px;
        right: 24px;
        width: 360px;
        height: 480px;
        display: flex;
        flex-direction: column;
        border-radius: 12px;
        transform: translateY(120%);
        transition: transform 0.3s ease-in-out;
        z-index: 1000;
    }

    .chat-window.open {
        transform: translateY(0);
    }

    .gradient-header {
        background: linear-gradient(135deg, #8B5CF6 0%, #EC4899 100%);
        color: white;
        border-radius: 12px 12px 0 0;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        background-color: #f8f9fa;
    }

    .assistant-message,
    .user-message {
        max-width: 80%;
        padding: 8px 12px;
        border-radius: 12px;
        position: relative;
    }

    .assistant-message {
        background-color: white;
        margin-right: auto;
        border-bottom-left-radius: 4px;
    }

    .user-message {
        background: linear-gradient(135deg, #8B5CF6 0%, #EC4899 100%);
        color: white;
        margin-left: auto;
        border-bottom-right-radius: 4px;
    }

    .message-time {
        font-size: 0.7rem;
        margin-top: 4px;
        opacity: 0.7;
    }

    .chat-input {
        background-color: white;
        border-top: 1px solid #e0e0e0;
        border-radius: 0 0 12px 12px;
    }

    .chat-input-field {
        margin-bottom: 0;
    }

    .chat-fab {
        position: fixed;
        bottom: 24px;
        right: 24px;
        transition: opacity 0.3s ease-in-out;
        z-index: 999;
    }

    .chat-fab.hidden {
        opacity: 0;
        pointer-events: none;
    }

    ::deep .mud-input-control {
        margin-top: 0;
    }
</style>

@code {
    private bool IsOpen;
    private string currentMessage = "";
    private List<ChatMessage> messages = new()
    {
        new ChatMessage 
        { 
            Content = "Hello! How can I help you with events today?",
            IsAssistant = true,
            Time = DateTime.Now
        }
    };

    private void SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage))
            return;

        messages.Add(new ChatMessage 
        { 
            Content = currentMessage,
            IsAssistant = false,
            Time = DateTime.Now
        });

        // Симуляція відповіді асистента
        messages.Add(new ChatMessage 
        { 
            Content = "I'm looking for some amazing art workshops this weekend!",
            IsAssistant = true,
            Time = DateTime.Now.AddSeconds(1)
        });

        currentMessage = "";
        StateHasChanged();
    }

    private class ChatMessage
    {
        public string Content { get; set; } = "";
        public bool IsAssistant { get; set; }
        public DateTime Time { get; set; }
    }
}
