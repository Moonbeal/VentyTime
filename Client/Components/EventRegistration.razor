@page "/event/{EventId:int}/register"
@using VentyTime.Shared.Models
@using VentyTime.Client.Services
@inject IEventService EventService
@inject IRegistrationService RegistrationService
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject ISnackbar Snackbar
@attribute [Authorize]

<div class="container mt-4">
    @if (Event == null)
    {
        <div class="alert alert-danger">
            Event not found.
        </div>
    }
    else if (!Event.IsRegistrationOpen)
    {
        <div class="alert alert-warning">
            Registration is closed for this event.
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h2>@Event.Title</h2>
                        <p class="text-muted">@Event.Description</p>
                        <div class="mt-3">
                            <p><strong>Date:</strong> @Event.StartDate.ToShortDateString()</p>
                            <p><strong>Time:</strong> @Event.StartDate.ToShortTimeString()</p>
                            <p><strong>Location:</strong> @Event.Location</p>
                            <p><strong>Price:</strong> @Event.Price.ToString("C")</p>
                            <p><strong>Available Spots:</strong> @(Event.MaxAttendees == 0 ? "Unlimited" : $"{Event.MaxAttendees - Event.CurrentParticipants} of {Event.MaxAttendees}")</p>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   OnClick="OpenRegistrationDialog"
                                   Disabled="@(!Event.IsRegistrationOpen || _registering)">
                            @if (_registering)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Registering...</MudText>
                            }
                            else
                            {
                                <MudText>Register Now</MudText>
                            }
                        </MudButton>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public EventDto Event { get; set; } = default!;

    private bool _registering;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var currentUser = await AuthService.GetCurrentUserAsync();
            if (currentUser != null)
            {
                // Removed code that was setting registrationModel properties
            }
        }
        finally
        {
            // Removed code that was setting loading to false
        }
    }

    private async Task OpenRegistrationDialog()
    {
        try
        {
            _registering = true;

            var user = await AuthService.GetCurrentUserAsync();
            if (user == null)
            {
                Snackbar.Add("You must be logged in to register for events", Severity.Warning);
                return;
            }

            var result = await RegistrationService.RegisterForEventAsync(Event.Id, user.Id);
            if (result.Success)
            {
                Snackbar.Add("Successfully registered for the event!", Severity.Success);
                // Removed code that was navigating to event details
            }
            else
            {
                Snackbar.Add(result.Message ?? "Failed to register for the event", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("An error occurred while registering for the event", Severity.Error);
        }
        finally
        {
            _registering = false;
        }
    }
}

<style>
    .modal {
        background-color: rgba(0, 0, 0, 0.5);
    }

    .card {
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }

    .validation-message {
        color: red;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }
</style>
