@using VentyTime.Shared.Models

<MudPaper Class="pa-6 rounded-lg event-details-card">
    <div class="d-flex justify-space-between align-center mb-4">
        <MudText Typo="Typo.h4" Color="Color.Primary">@Event.Title</MudText>
        <div>
            <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Secondary"/>
            <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default"/>
        </div>
    </div>

    <div class="d-flex gap-4 mb-4 flex-wrap">
        <div class="d-flex align-center">
            <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Class="mr-2" />
            <MudText>@Event.StartDate.ToString("MMMM dd, yyyy")</MudText>
        </div>
        <div class="d-flex align-center">
            <MudIcon Icon="@Icons.Material.Filled.Schedule" Class="mr-2" />
            <MudText>@Event.StartTime.ToString(@"hh\:mm") PM - @Event.StartTime.Add(TimeSpan.FromHours(3)).ToString(@"hh\:mm") PM</MudText>
        </div>
        <div class="d-flex align-center">
            <MudIcon Icon="@Icons.Material.Filled.LocationOn" Class="mr-2" />
            <MudText>@Event.Location</MudText>
        </div>
        <div class="d-flex align-center">
            <MudIcon Icon="@Icons.Material.Filled.Group" Class="mr-2" />
            <MudText>@Event.CurrentParticipants/@Event.MaxAttendees participants</MudText>
        </div>
    </div>

    <MudDivider Class="my-4"/>

    <MudText Typo="Typo.body1" Class="mb-4">@Event.Description</MudText>

    <MudText Typo="Typo.h6" Class="mb-3">What you'll learn:</MudText>
    <MudList Dense="true" Class="mb-4">
        @foreach (var item in Event.Description.Split('\n'))
        {
            <MudListItem Icon="@Icons.Material.Filled.Check">@item</MudListItem>
        }
    </MudList>

    <div class="d-flex justify-space-between align-center mt-6">
        <div class="d-flex align-center">
            <MudText Typo="Typo.h5" Color="Color.Secondary" Class="mr-2">Price: $@Event.Price</MudText>
            @if (Event.IsRegistrationOpen)
            {
                <MudChip Color="Color.Success" Size="Size.Small">Registration Open</MudChip>
            }
            else
            {
                <MudChip Color="Color.Error" Size="Size.Small">Sold Out</MudChip>
            }
        </div>
        <div class="d-flex gap-2">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => OnJoinClick.InvokeAsync())">Join event</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => OnTeamClick.InvokeAsync())">Join team</MudButton>
        </div>
    </div>
</MudPaper>

@code {
    [Parameter] public Event Event { get; set; } = default!;
    [Parameter] public EventCallback OnJoinClick { get; set; }
    [Parameter] public EventCallback OnTeamClick { get; set; }
}

<style>
    .event-details-card {
        background: linear-gradient(145deg, #ffffff 0%, #f8f9fa 100%);
        border: 1px solid rgba(139, 92, 246, 0.1);
    }
</style>
