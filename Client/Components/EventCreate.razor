@page "/event/create"
@using VentyTime.Shared.Models
@using VentyTime.Client.Services
@inject IEventService EventService
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-16">
    <MudText Typo="Typo.h3" Class="mb-8">Create New Event</MudText>

    <MudForm @ref="form" @bind-IsValid="@success">
        <MudGrid>
            <MudItem xs="12">
                <MudTextField @bind-Value="eventModel.Title"
                            Label="Event Title"
                            Required="true"
                            RequiredError="Title is required!" />
            </MudItem>

            <MudItem xs="12">
                <MudTextField @bind-Value="eventModel.Description"
                            Label="Description"
                            Lines="3" />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudSelect T="string" Label="Category" @bind-Value="eventModel.Category">
                    <MudSelectItem Value="@("Conference")">Conference</MudSelectItem>
                    <MudSelectItem Value="@("Workshop")">Workshop</MudSelectItem>
                    <MudSelectItem Value="@("Meetup")">Meetup</MudSelectItem>
                    <MudSelectItem Value="@("Party")">Party</MudSelectItem>
                    <MudSelectItem Value="@("Other")">Other</MudSelectItem>
                </MudSelect>
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudNumericField @bind-Value="eventModel.MaxAttendees"
                               Label="Max Attendees"
                               Min="0"
                               Max="1000" />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudDatePicker Label="Event Date"
                             Date="eventModel.StartDate"
                             DateChanged="UpdateEventDate"
                             DisableToolbar="false"
                             DateFormat="MM/dd/yyyy" />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudTimePicker Label="Start Time"
                             Time="eventModel.StartTime"
                             TimeChanged="UpdateEventTime"
                             TimeEditMode="TimeEditMode.Normal" />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudTextField @bind-Value="eventModel.Location"
                            Label="Location"
                            Required="true"
                            RequiredError="Location is required!" />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudNumericField @bind-Value="eventModel.Price"
                               Label="Price"
                               Min="0"
                               Format="N2" />
            </MudItem>

            <MudItem xs="12">
                <InputFile id="fileInput" OnChange="@UploadFiles" hidden accept=".jpg,.jpeg,.png,.gif" />
                <MudButton HtmlTag="label"
                         Variant="Variant.Filled"
                         Color="Color.Primary"
                         StartIcon="@Icons.Material.Filled.CloudUpload"
                         for="fileInput">
                    Upload Image
                </MudButton>
                @if (!string.IsNullOrEmpty(eventModel.ImageUrl))
                {
                    <MudImage Src="@eventModel.ImageUrl" Alt="Event Image" Class="mt-3" Width="200" Height="200" ObjectFit="ObjectFit.Cover" />
                }
            </MudItem>

            <MudItem xs="12" Class="d-flex justify-space-between align-center">
                <MudButton Variant="Variant.Filled"
                          Color="Color.Secondary"
                          OnClick="NavigateBack"
                          Class="ml-auto me-2">
                    Cancel
                </MudButton>
                <MudButton Variant="Variant.Filled"
                          Color="Color.Primary"
                          OnClick="HandleValidSubmit"
                          Disabled="@(!success)">
                    Create Event
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudForm>
</MudContainer>

@code {
    private EventDto eventModel = new EventDto();

    private MudForm? form;
    private bool success;
    private string[] errors = { };

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                Console.WriteLine($"Starting file upload: {file.Name}, Size: {file.Size}, Type: {file.ContentType}");

                // Validate file type
                var allowedTypes = new[] { "image/jpeg", "image/png", "image/gif" };
                if (!allowedTypes.Contains(file.ContentType.ToLower()))
                {
                    var message = $"Invalid file type: {file.ContentType}. Allowed types are: jpg, png, gif";
                    Console.WriteLine(message);
                    Snackbar.Add(message, Severity.Error);
                    return;
                }

                var maxFileSize = 5 * 1024 * 1024; // 5MB limit to match server
                if (file.Size > maxFileSize)
                {
                    var message = $"File size ({file.Size / 1024 / 1024:N1}MB) exceeds maximum allowed size of 5MB";
                    Console.WriteLine(message);
                    Snackbar.Add(message, Severity.Error);
                    return;
                }

                Console.WriteLine("Creating form data...");
                var content = new MultipartFormDataContent();
                var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
                content.Add(fileContent, "file", file.Name);

                Console.WriteLine("Getting HttpClient...");
                var client = HttpClientFactory.CreateClient("VentyTime.ServerAPI");
                Console.WriteLine($"Client BaseAddress: {client.BaseAddress}");
                
                Console.WriteLine("Sending upload request...");
                var response = await client.PostAsync("api/Events/UploadImage", content);
                Console.WriteLine($"Upload response status: {response.StatusCode}");
                Console.WriteLine($"Response headers: {string.Join(", ", response.Headers.Select(h => $"{h.Key}: {string.Join(", ", h.Value)}"))}");

                if (response.IsSuccessStatusCode)
                {
                    var imageUrl = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Upload successful, received URL: {imageUrl}");
                    eventModel.ImageUrl = imageUrl.Trim('"');
                    Snackbar.Add("Image uploaded successfully!", Severity.Success);
                    StateHasChanged();
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    var message = $"Upload failed: {error}";
                    Console.WriteLine($"Upload failed with status {response.StatusCode}: {error}");
                    Console.WriteLine($"Response content: {await response.Content.ReadAsStringAsync()}");
                    Snackbar.Add(message, Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            var message = $"Error uploading file: {ex.Message}";
            Console.WriteLine(message);
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            Console.WriteLine($"Inner exception: {ex.InnerException?.Message}");
            Snackbar.Add(message, Severity.Error);
        }
    }

    private void UpdateEventDate(DateTime? date)
    {
        if (date.HasValue)
        {
            eventModel.StartDate = date.Value.Date.Add(eventModel.StartTime);
        }
    }

    private void UpdateEventTime(TimeSpan? time)
    {
        if (time.HasValue)
        {
            eventModel.StartTime = time.Value;
            eventModel.StartDate = eventModel.StartDate.Date.Add(time.Value);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Set default values to 9:00 AM today
        var defaultTime = new TimeSpan(9, 0, 0);
        eventModel.StartDate = DateTime.Now.Date.Add(defaultTime);
        eventModel.StartTime = defaultTime;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var createdEvent = await EventService.CreateEventAsync(eventModel);
            NavigationManager.NavigateTo($"/event/{createdEvent.Id}");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating event: {ex.Message}", Severity.Error);
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/events");
    }
}
