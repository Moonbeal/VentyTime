@using VentyTime.Client.Services
@using VentyTime.Shared.Models
@inject INotificationService NotificationService
@implements IDisposable

<MudPaper Class="pa-4" Elevation="3">
    <MudText Typo="Typo.h5" Class="mb-4">Notifications</MudText>

    @if (loading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (!notifications.Any())
    {
        <MudAlert Severity="Severity.Info">No notifications</MudAlert>
    }
    else
    {
        <MudList Dense="true">
            @foreach (var notification in notifications.OrderByDescending(n => n.Timestamp))
            {
                <MudListItem>
                    <MudCard Elevation="0" Class="@(notification.IsRead ? "" : "unread-notification")">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@notification.Message</MudText>
                                <MudText Typo="Typo.caption">@notification.Timestamp.ToString("g")</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                @if (!notification.IsRead)
                                {
                                    <MudIconButton Icon="@Icons.Material.Filled.MarkEmailRead"
                                                 Size="Size.Small"
                                                 OnClick="@(() => MarkAsRead(notification.Id))"
                                                 Title="Mark as Read" />
                                }
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                             Size="Size.Small"
                                             OnClick="@(() => DeleteNotification(notification.Id))"
                                             Title="Delete" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText>@notification.Message</MudText>
                        </MudCardContent>
                    </MudCard>
                </MudListItem>
            }
        </MudList>
    }
</MudPaper>

<style>
    .unread-notification {
        background-color: var(--mud-palette-background-grey);
    }
</style>

@code {
    private List<NotificationMessage> notifications = new();
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadNotifications();
    }

    private async Task LoadNotifications()
    {
        try
        {
            notifications = await NotificationService.GetUserNotificationsAsync();
            loading = false;
        }
        catch (Exception)
        {
            await NotificationService.ShowAsync("Failed to load notifications", NotificationType.Error);
        }
    }

    private async Task MarkAsRead(int id)
    {
        try
        {
            await NotificationService.MarkAsReadAsync(id);
            var notification = notifications.FirstOrDefault(n => n.Id == id);
            if (notification != null)
            {
                notification.IsRead = true;
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            await NotificationService.ShowAsync("Failed to mark notification as read", NotificationType.Error);
        }
    }

    private async Task DeleteNotification(int id)
    {
        try
        {
            await NotificationService.DeleteNotificationAsync(id);
            notifications.RemoveAll(n => n.Id == id);
            StateHasChanged();
        }
        catch (Exception)
        {
            await NotificationService.ShowAsync("Failed to delete notification", NotificationType.Error);
        }
    }

    public void Dispose()
    {
        // No subscriptions to dispose
    }
}
