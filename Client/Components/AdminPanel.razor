@using VentyTime.Shared.Models
@using VentyTime.Client.Services
@inject IAuthService AuthService
@inject IUserService UserService
@inject IEventService EventService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@attribute [Authorize(Roles = "Admin")]

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @if (isLoading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
    }
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="my-4">@errorMessage</MudAlert>
    }

    <MudGrid>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 100%;">
                <MudStack>
                    <MudIcon Icon="@Icons.Material.Filled.Person" Color="Color.Primary" Size="Size.Large" />
                    <MudText Typo="Typo.h5" Align="Align.Center">@statistics.TotalUsers</MudText>
                    <MudText Typo="Typo.subtitle1" Align="Align.Center">Total Users</MudText>
                </MudStack>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 100%;">
                <MudStack>
                    <MudIcon Icon="@Icons.Material.Filled.Event" Color="Color.Secondary" Size="Size.Large" />
                    <MudText Typo="Typo.h5" Align="Align.Center">@statistics.ActiveEvents</MudText>
                    <MudText Typo="Typo.subtitle1" Align="Align.Center">Active Events</MudText>
                </MudStack>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 100%;">
                <MudStack>
                    <MudIcon Icon="@Icons.Material.Filled.EventAvailable" Color="Color.Success" Size="Size.Large" />
                    <MudText Typo="Typo.h5" Align="Align.Center">@events.Count</MudText>
                    <MudText Typo="Typo.subtitle1" Align="Align.Center">Total Events</MudText>
                </MudStack>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 100%;">
                <MudStack>
                    <MudIcon Icon="@Icons.Material.Filled.Assessment" Color="Color.Warning" Size="Size.Large" />
                    <MudText Typo="Typo.h5" Align="Align.Center">@(events.Count(e => e.IsFinished()))</MudText>
                    <MudText Typo="Typo.subtitle1" Align="Align.Center">Completed Events</MudText>
                </MudStack>
            </MudPaper>
        </MudItem>

        <MudItem xs="12">
            <MudPaper Elevation="2" Class="pa-4">
                <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pt-6">
                    <MudTabPanel Text="Users" Icon="@Icons.Material.Filled.People">
                        <MudTextField @bind-Value="userSearchTerm" Label="Search Users" 
                                    Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                                    Class="mt-0 mb-4" />
                        
                        <MudTable Items="@filteredUsers" Dense="true" Hover="true" Elevation="0"
                                 Loading="@isLoading" LoadingProgressColor="Color.Info">
                            <HeaderContent>
                                <MudTh>Username</MudTh>
                                <MudTh>Email</MudTh>
                                <MudTh>Role</MudTh>
                                <MudTh>Actions</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>
                                    <MudStack Row="true" AlignItems="AlignItems.Center">
                                        <MudAvatar Size="Size.Small" Color="Color.Secondary">@(context.UserName.FirstOrDefault())</MudAvatar>
                                        <MudText>@context.UserName</MudText>
                                    </MudStack>
                                </MudTd>
                                <MudTd>@context.Email</MudTd>
                                <MudTd>
                                    <MudChip Color="@(GetUserRole(context) == "Admin" ? Color.Error : Color.Default)" 
                                            Size="Size.Small">@GetUserRole(context)</MudChip>
                                </MudTd>
                                <MudTd>
                                    <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Info" 
                                                 Size="Size.Small" OnClick="@(() => ViewUserDetails(context))" />
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudTabPanel>

                    <MudTabPanel Text="Events" Icon="@Icons.Material.Filled.EventNote">
                        <MudTextField @bind-Value="eventSearchTerm" Label="Search Events"
                                    Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                                    Class="mt-0 mb-4" />
                        
                        <MudTable Items="@filteredEvents" Dense="true" Hover="true" Elevation="0"
                                 Loading="@isLoading" LoadingProgressColor="Color.Info">
                            <HeaderContent>
                                <MudTh>Title</MudTh>
                                <MudTh>Date</MudTh>
                                <MudTh>Status</MudTh>
                                <MudTh>Actions</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.Title</MudTd>
                                <MudTd>@context.StartDate.ToShortDateString()</MudTd>
                                <MudTd>
                                    <MudChip Color="@(context.IsActive ? Color.Success : Color.Error)" 
                                            Size="Size.Small">
                                        @(context.IsActive ? "Active" : "Cancelled")
                                    </MudChip>
                                </MudTd>
                                <MudTd>
                                    <MudButtonGroup>
                                        <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Info" 
                                                     Size="Size.Small" OnClick="@(() => ViewEventDetails(context))" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" 
                                                     Size="Size.Small" OnClick="@(() => EditEventDetails(context))" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" 
                                                     Size="Size.Small" OnClick="@(() => DeleteEventAsync(context))" />
                                    </MudButtonGroup>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudTabPanel>
                </MudTabs>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<ApplicationUser> users = new();
    private List<Event> events = new();
    private string userSearchTerm = "";
    private string eventSearchTerm = "";

    private SystemStatistics statistics = new()
    {
        TotalUsers = 0,
        ActiveEvents = 0,
        TotalRevenue = 0
    };

    private Dictionary<string, string> userRoles = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private IDialogReference? dialogRef;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            StateHasChanged();

            users = (await UserService.GetAllUsersAsync()).ToList();
            events = (await EventService.GetEventsAsync()).ToList();

            foreach (var user in users)
            {
                var roles = await UserService.GetUserRolesAsync(user.Id);
                userRoles[user.Id] = roles.FirstOrDefault() ?? "User";
            }

            UpdateStatistics();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load data: {ex.Message}";
            Snackbar.Add(errorMessage, Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void UpdateStatistics()
    {
        statistics = new SystemStatistics
        {
            TotalUsers = users.Count,
            ActiveEvents = events.Count(e => e.IsActive && !e.IsFinished()),
            TotalRevenue = events.Sum(e => e.Price * e.CurrentParticipants)
        };
    }

    private IEnumerable<ApplicationUser> filteredUsers =>
        users?.Where(u =>
            string.IsNullOrEmpty(userSearchTerm) ||
            (u.UserName?.Contains(userSearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (u.Email?.Contains(userSearchTerm, StringComparison.OrdinalIgnoreCase) ?? false)) ?? Enumerable.Empty<ApplicationUser>();

    private IEnumerable<Event> filteredEvents =>
        events?.Where(e =>
            e.IsActive && // Show only active events
            (string.IsNullOrEmpty(eventSearchTerm) ||
            (e.Title?.Contains(eventSearchTerm, StringComparison.OrdinalIgnoreCase) ?? false))) ?? Enumerable.Empty<Event>();

    private async Task DeleteEventAsync(Event eventItem)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Are you sure you want to delete the event '{eventItem.Title}'? This action cannot be undone." },
            { "ButtonText", "Delete Event" },
            { "Color", Color.Error }
        };

        var dialog = await DialogService.Show<ConfirmDialog>("Confirm Event Deletion", parameters).Result;
        if (!dialog.Cancelled)
        {
            var (success, error) = await EventService.DeleteEventAsync(eventItem.Id);
            if (success)
            {
                events.RemoveAll(e => e.Id == eventItem.Id);
                UpdateStatistics();
                StateHasChanged();
                Snackbar.Add("Event deleted successfully", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Failed to delete event: {error ?? "Unknown error"}", Severity.Error);
            }
        }
    }

    private void ViewUserDetails(ApplicationUser user)
    {
        NavigationManager.NavigateTo($"/users/{user.Id}");
    }

    private void ViewEventDetails(Event eventItem)
    {
        NavigationManager.NavigateTo($"/event/{eventItem.Id}");
    }

    private void EditEventDetails(Event eventItem)
    {
        NavigationManager.NavigateTo($"/event/{eventItem.Id}/edit");
    }

    private string GetUserRole(ApplicationUser user)
    {
        return userRoles.TryGetValue(user.Id, out var role) ? role : "User";
    }

    private class SystemStatistics
    {
        public int TotalUsers { get; set; }
        public int ActiveEvents { get; set; }
        public decimal TotalRevenue { get; set; }
    }
}
