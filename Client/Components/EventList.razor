@using VentyTime.Shared.Models
@using VentyTime.Client.Services
@inject IEventService EventService
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

<div class="event-list">
    <div class="filters mb-4">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search events..." @bind="searchTerm" @bind:event="oninput" @onkeyup="HandleSearch" />
            <div class="input-group-append">
                <button class="btn btn-primary" @onclick="HandleSearch">
                    <i class="fas fa-search"></i> Search
                </button>
            </div>
        </div>
        <div class="filter-options mt-2">
            <select class="form-select" @bind="selectedCategory">
                <option value="">All Categories</option>
                <option value="Technology">Technology</option>
                <option value="Business">Business</option>
                <option value="Arts & Culture">Arts & Culture</option>
                <option value="Health & Wellness">Health & Wellness</option>
                <option value="Education">Education</option>
                <option value="Entertainment">Entertainment</option>
                <option value="Sports">Sports</option>
                <option value="Food & Drink">Food & Drink</option>
            </select>
        </div>
    </div>

    @if (events == null)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!events.Any())
    {
        <div class="alert alert-info">
            No events found. Try adjusting your search criteria.
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var evt in filteredEvents)
            {
                <div class="col">
                    <div class="card h-100 event-card">
                        @if (!string.IsNullOrEmpty(evt.ImageUrl))
                        {
                            <img src="@evt.ImageUrl" class="card-img-top" alt="@evt.Title">
                        }
                        <div class="card-body">
                            <h5 class="card-title">@evt.Title</h5>
                            <p class="card-text">@(evt.Description.Length > 100 ? evt.Description.Substring(0, 97) + "..." : evt.Description)</p>
                            <div class="event-details">
                                <p><i class="fas fa-calendar"></i> @evt.StartDate.ToShortDateString()</p>
                                <p><i class="fas fa-clock"></i> @evt.StartTime.ToString(@"hh\:mm")</p>
                                <p><i class="fas fa-map-marker-alt"></i> @evt.Location</p>
                                <p><i class="fas fa-users"></i> @evt.CurrentParticipants/@(evt.MaxAttendees == 0 ? "âˆž" : evt.MaxAttendees.ToString())</p>
                            </div>
                        </div>
                        <div class="card-footer">
                            <button class="btn btn-primary" @onclick="() => NavigateToDetails(evt.Id)">
                                View Details
                            </button>
                            @if (evt.IsRegistrationOpen)
                            {
                                <button class="btn btn-success ms-2" @onclick="() => RegisterForEvent(evt.Id)">
                                    Register
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (totalPages > 1)
        {
            <div class="d-flex justify-content-center mt-4">
                <nav>
                    <ul class="pagination">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
                        </li>
                        @for (int i = 1; i <= totalPages; i++)
                        {
                            var pageNumber = i;
                            <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                <button class="page-link" @onclick="() => ChangePage(pageNumber)">@pageNumber</button>
                            </li>
                        }
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
                        </li>
                    </ul>
                </nav>
            </div>
        }
    }
</div>

@code {
    private List<Event>? events;
    private string searchTerm = "";
    private string selectedCategory = "";
    private int currentPage = 1;
    private const int PageSize = 9;
    private int totalPages => events == null ? 0 : (int)Math.Ceiling(filteredEvents.Count() / (double)PageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        events = await EventService.GetEventsAsync();
    }

    private IEnumerable<Event> filteredEvents
    {
        get
        {
            if (events == null) return Enumerable.Empty<Event>();

            var filtered = events.AsEnumerable();

            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                filtered = filtered.Where(e =>
                    e.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    e.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    e.Location.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
            }

            if (!string.IsNullOrWhiteSpace(selectedCategory))
            {
                filtered = filtered.Where(e => e.Category == selectedCategory);
            }

            // Apply pagination
            return filtered
                .Skip((currentPage - 1) * PageSize)
                .Take(PageSize);
        }
    }

    private async Task HandleSearch()
    {
        currentPage = 1;
        await InvokeAsync(StateHasChanged);
    }

    private void NavigateToDetails(int eventId)
    {
        NavigationManager.NavigateTo($"/event/{eventId}");
    }

    private async Task RegisterForEvent(int eventId)
    {
        if (await AuthService.IsAuthenticated())
        {
            NavigationManager.NavigateTo($"/event/{eventId}/register");
        }
        else
        {
            NavigationManager.NavigateTo($"/login?returnUrl=/event/{eventId}/register");
        }
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }
}

<style>
    .event-card {
        transition: transform 0.2s;
    }

    .event-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .event-card .card-img-top {
        height: 200px;
        object-fit: cover;
    }

    .event-details {
        font-size: 0.9rem;
        color: #666;
    }

    .event-details i {
        width: 20px;
        text-align: center;
        margin-right: 5px;
    }

    .filters {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
    }

    .filter-options {
        display: flex;
        gap: 1rem;
    }
</style>
