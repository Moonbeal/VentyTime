@using VentyTime.Client.Services
@using VentyTime.Shared.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Headers
@using Blazored.LocalStorage
@inject IEventService EventService
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory _httpClientFactory
@inject ILocalStorageService _localStorage

<div class="event-list">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Events</h1>
        <button class="btn btn-primary" @onclick="SeedEvents" disabled="@_isSeedingEvents">
            @if (_isSeedingEvents)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span>Seeding Events...</span>
            }
            else
            {
                <span>Seed Sample Events</span>
            }
        </button>
    </div>

    @if (IsLoading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (error != null)
    {
        <div class="alert alert-danger" role="alert">
            @error
            <button type="button" class="btn-close" @onclick="() => error = null" aria-label="Close"></button>
        </div>
    }
    else if (!events.Any())
    {
        <div class="alert alert-info" role="alert">
            No events found. @if (selectedCategory != null) { <span>Try selecting a different category.</span> }
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var evt in events)
            {
                <div class="col">
                    <div class="card h-100">
                        @if (!string.IsNullOrEmpty(evt.ImageUrl))
                        {
                            <img src="@evt.ImageUrl" class="card-img-top" alt="@evt.Title">
                        }
                        <div class="card-body">
                            <h5 class="card-title">@evt.Title</h5>
                            <p class="card-text">@evt.Description</p>
                            <div class="mb-2">
                                <small class="text-muted">
                                    <i class="bi bi-calendar"></i> @evt.StartDate.ToShortDateString()
                                    <br />
                                    <i class="bi bi-clock"></i> @evt.StartTime.ToString(@"hh\:mm")
                                    <br />
                                    <i class="bi bi-geo-alt"></i> @(evt.IsOnline ? "Online" : evt.Location)
                                </small>
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="badge bg-primary">@evt.Category</span>
                                <button class="btn btn-outline-primary btn-sm" @onclick="() => NavigateToDetails(evt.Id)">
                                    View Details
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<EventDto> events = new();
    private string? selectedCategory;
    private string? error;
    private bool IsLoading = false;
    private bool _isSeedingEvents;

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            IsLoading = true;
            error = null;
            var result = await EventService.GetEventsAsync(
                page: 1,
                pageSize: null,
                selectedCategory);
            events = result.Events.ToList();
        }
        catch (Exception ex)
        {
            error = "Failed to load events. Please try again later.";
            Console.WriteLine($"Error loading events: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnSelectedCategoryChanged(string? newCategory)
    {
        selectedCategory = newCategory;
        await LoadEvents();
    }

    private void NavigateToDetails(int eventId)
    {
        NavigationManager.NavigateTo($"/event/{eventId}");
    }

    private async Task SeedEvents()
    {
        try
        {
            _isSeedingEvents = true;
            error = null;
            var client = await CreateHttpClient();
            var response = await client.PostAsync("api/events/seed", null);
            response.EnsureSuccessStatusCode();
            await LoadEvents();
            await JSRuntime.InvokeVoidAsync("alert", "Successfully seeded 100 sample events!");
        }
        catch (Exception ex)
        {
            error = $"Error seeding events: {ex.Message}";
            Console.WriteLine($"Error seeding events: {ex}");
        }
        finally
        {
            _isSeedingEvents = false;
            StateHasChanged();
        }
    }

    private async Task<HttpClient> CreateHttpClient()
    {
        var client = _httpClientFactory.CreateClient("VentyTime.ServerAPI");
        var token = await _localStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(token))
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
        return client;
    }
}

<style>
    .event-list {
        padding: 20px;
    }

    .card {
        transition: transform 0.2s;
    }

    .card:hover {
        transform: translateY(-5px);
    }

    .card-img-top {
        height: 200px;
        object-fit: cover;
    }

    .alert {
        margin-top: 20px;
    }
</style>
