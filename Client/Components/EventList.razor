@using VentyTime.Shared.Models
@using VentyTime.Client.Services
@using VentyTime.Client.Components
@inject IEventService EventService
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

<div class="event-list">
    <div class="filters mb-4">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search events..." @bind="searchTerm" @bind:event="oninput" @onkeyup="HandleSearch" />
            <div class="input-group-append">
                <button class="btn btn-primary" @onclick="HandleSearch">
                    <i class="fas fa-search"></i> Search
                </button>
            </div>
        </div>
        <div class="filter-options mt-2">
            <select class="form-select" @bind="selectedCategory">
                <option value="">All Categories</option>
                <option value="Technology">Technology</option>
                <option value="Business">Business</option>
                <option value="Arts & Culture">Arts & Culture</option>
                <option value="Health & Wellness">Health & Wellness</option>
                <option value="Education">Education</option>
                <option value="Entertainment">Entertainment</option>
                <option value="Sports">Sports</option>
                <option value="Food & Drink">Food & Drink</option>
            </select>
        </div>
    </div>

    @if (events == null)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!events.Any())
    {
        <div class="alert alert-info">
            No events found. Try adjusting your search criteria.
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var evt in filteredEvents)
            {
                <div class="col">
                    <div class="card h-100 event-card" @onclick="() => NavigateToDetails(evt.Id)">
                        @if (!string.IsNullOrEmpty(evt.ImageUrl))
                        {
                            <img src="@evt.ImageUrl" class="card-img-top" alt="@evt.Title">
                        }
                        <div class="card-body">
                            <h5 class="card-title">@evt.Title</h5>
                            <p class="card-text">@(evt.Description.Length > 100 ? evt.Description.Substring(0, 97) + "..." : evt.Description)</p>
                            <div class="event-details">
                                <p><i class="fas fa-calendar"></i> @evt.StartDate.ToLocalTime().ToString("f")</p>
                                <p><i class="fas fa-map-marker-alt"></i> @evt.Location</p>
                                <p><i class="fas fa-users"></i> @evt.CurrentParticipants/@(evt.MaxAttendees == 0 ? "∞" : evt.MaxAttendees.ToString())</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (totalPages > 1)
        {
            <div class="d-flex justify-content-center mt-4">
                <nav>
                    <ul class="pagination">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
                        </li>
                        @for (int i = 1; i <= totalPages; i++)
                        {
                            var pageNumber = i;
                            <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                <button class="page-link" @onclick="() => ChangePage(pageNumber)">@pageNumber</button>
                            </li>
                        }
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
                        </li>
                    </ul>
                </nav>
            </div>
        }
    }
</div>

@code {
    private List<Event>? events;
    private string searchTerm = "";
    private string selectedCategory = "";
    private int currentPage = 1;
    private int pageSize = 9;
    private Event? selectedEvent;

    [Parameter]
    public List<Event>? Events
    {
        get => events;
        set
        {
            events = value;
            HandleSearch();
        }
    }

    private IEnumerable<Event> filteredEvents
    {
        get
        {
            if (events == null) return Array.Empty<Event>();

            var query = events.AsEnumerable();

            // Поиск по всем релевантным полям
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                var searchTermLower = searchTerm.ToLowerInvariant();
                query = query.Where(e =>
                    e.Title.Contains(searchTermLower, StringComparison.OrdinalIgnoreCase) ||
                    e.Description.Contains(searchTermLower, StringComparison.OrdinalIgnoreCase) ||
                    e.Location.Contains(searchTermLower, StringComparison.OrdinalIgnoreCase) ||
                    e.Category.Contains(searchTermLower, StringComparison.OrdinalIgnoreCase)
                );
            }

            // Фильтрация по категории
            if (!string.IsNullOrWhiteSpace(selectedCategory))
            {
                query = query.Where(e => 
                    e.Category.Equals(selectedCategory, StringComparison.OrdinalIgnoreCase));
            }

            // Сортировка: сначала предстоящие события, потом прошедшие
            query = query.OrderBy(e => e.StartDate < DateTime.Now)
                        .ThenBy(e => e.StartDate);

            // Применяем пагинацию
            return query.Skip((currentPage - 1) * pageSize)
                       .Take(pageSize);
        }
    }

    private int totalPages => events == null ? 0 : 
        (int)Math.Ceiling((double)GetFilteredEventsCount() / pageSize);

    private int GetFilteredEventsCount()
    {
        if (events == null) return 0;

        var query = events.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var searchTermLower = searchTerm.ToLowerInvariant();
            query = query.Where(e =>
                e.Title.Contains(searchTermLower, StringComparison.OrdinalIgnoreCase) ||
                e.Description.Contains(searchTermLower, StringComparison.OrdinalIgnoreCase) ||
                e.Location.Contains(searchTermLower, StringComparison.OrdinalIgnoreCase) ||
                e.Category.Contains(searchTermLower, StringComparison.OrdinalIgnoreCase)
            );
        }

        if (!string.IsNullOrWhiteSpace(selectedCategory))
        {
            query = query.Where(e => 
                e.Category.Equals(selectedCategory, StringComparison.OrdinalIgnoreCase));
        }

        return query.Count();
    }

    private void HandleSearch()
    {
        currentPage = 1;
        StateHasChanged();
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
        }
    }

    private void NavigateToDetails(int eventId)
    {
        NavigationManager.NavigateTo($"/event/{eventId}");
    }

    private async Task RegisterForEvent(int eventId)
    {
        try
        {
            await EventService.RegisterForEventAsync(eventId);
            NavigationManager.NavigateTo($"/event/{eventId}");
        }
        catch (Exception ex)
        {
            // Handle error
            Console.Error.WriteLine($"Error registering for event: {ex.Message}");
        }
    }

    private void ShowEventCard(Event evt)
    {
        selectedEvent = evt;
    }
}

<style>
    .event-card {
        transition: transform 0.2s;
        cursor: pointer;
    }

    .event-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .event-card .card-img-top {
        height: 200px;
        object-fit: cover;
    }

    .event-details {
        font-size: 0.9rem;
        color: #666;
    }

    .event-details i {
        width: 20px;
        text-align: center;
        color: var(--mud-palette-primary);
    }

    .filters {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .filter-options {
        display: flex;
        gap: 1rem;
    }
</style>
