@using VentyTime.Client.Services
@using VentyTime.Shared.Models
@inject INotificationService NotificationService
@implements IDisposable

<div class="notifications-container @(notifications.Any() ? "show" : "")">
    @foreach (var notification in notifications.OrderByDescending(n => n.Timestamp))
    {
        <div class="notification @notification.Type.ToString().ToLowerInvariant()" @key="notification.Id">
            <div class="notification-content">
                <div class="notification-title">@notification.Title</div>
                <MudText Typo="Typo.body2">@notification.Message</MudText>
                <MudText Typo="Typo.caption" Class="mt-1">@GetTimeAgo(notification.Timestamp)</MudText>
                @if (!notification.IsRead)
                {
                    <MudButton Color="Color.Primary" Size="Size.Small" OnClick="() => MarkAsRead(notification.Id)">
                        Mark as Read
                    </MudButton>
                }
            </div>
            <button class="notification-dismiss" @onclick="() => DeleteNotification(notification.Id)">
                <i class="fas fa-times"></i>
            </button>
        </div>
    }
</div>

@code {
    private List<NotificationMessage> notifications = new();
    private System.Timers.Timer? refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadNotifications();
        
        // Set up a timer to refresh notifications every minute
        refreshTimer = new System.Timers.Timer(60000); // 60 seconds
        refreshTimer.Elapsed += async (sender, e) => await LoadNotifications();
        refreshTimer.Start();
    }

    private async Task LoadNotifications()
    {
        try
        {
            notifications = await NotificationService.GetUserNotificationsAsync();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception)
        {
            await NotificationService.ShowAsync("Failed to load notifications", NotificationType.Error);
        }
    }

    private async Task MarkAsRead(int id)
    {
        try
        {
            if (await NotificationService.MarkAsReadAsync(id))
            {
                var notification = notifications.FirstOrDefault(n => n.Id == id);
                if (notification != null)
                {
                    notification.IsRead = true;
                    StateHasChanged();
                }
            }
        }
        catch (Exception)
        {
            await NotificationService.ShowAsync("Failed to mark notification as read", NotificationType.Error);
        }
    }

    private async Task DeleteNotification(int id)
    {
        try
        {
            if (await NotificationService.DeleteNotificationAsync(id))
            {
                notifications.RemoveAll(n => n.Id == id);
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            await NotificationService.ShowAsync("Failed to delete notification", NotificationType.Error);
        }
    }

    private string GetTimeAgo(DateTime timestamp)
    {
        var timeSpan = DateTime.UtcNow - timestamp;

        if (timeSpan.TotalMinutes < 1)
            return "just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays}d ago";
        return timestamp.ToString("MMM dd, yyyy");
    }

    public void Dispose()
    {
        refreshTimer?.Stop();
        refreshTimer?.Dispose();
    }
}

<style>
    .notifications-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        max-width: 400px;
        opacity: 0;
        transform: translateX(100%);
        transition: all 0.3s ease-in-out;
    }

    .notifications-container.show {
        opacity: 1;
        transform: translateX(0);
    }

    .notification {
        display: flex;
        align-items: flex-start;
        padding: 12px;
        margin-bottom: 10px;
        border-radius: 4px;
        background-color: white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        animation: slideIn 0.3s ease-in-out;
    }

    .notification.success {
        border-left: 4px solid #4caf50;
    }

    .notification.warning {
        border-left: 4px solid #ff9800;
    }

    .notification.error {
        border-left: 4px solid #f44336;
    }

    .notification.info {
        border-left: 4px solid #2196f3;
    }

    .notification-content {
        flex: 1;
        margin-right: 12px;
    }

    .notification-title {
        font-weight: bold;
        margin-bottom: 4px;
    }

    .notification-message {
        font-size: 14px;
        margin-bottom: 4px;
    }

    .notification-time {
        font-size: 12px;
        color: #666;
    }

    .notification-dismiss {
        background: none;
        border: none;
        padding: 4px;
        cursor: pointer;
        color: #999;
        transition: color 0.2s;
    }

    .notification-dismiss:hover {
        color: #666;
    }

    @@keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
</style>
