@using VentyTime.Client.Services
@using VentyTime.Shared.Models
@inject INotificationService NotificationService
@implements IDisposable

<div class="notifications-container @(notifications.Any() ? "show" : "")">
    @foreach (var notification in notifications.OrderByDescending(n => n.CreatedAt))
    {
        <div class="notification @(notification.IsRead ? "read" : "unread")" @key="notification.Id">
            <div class="notification-content">
                <div class="notification-title">@notification.Title</div>
                <MudText Typo="Typo.body2">@notification.Message</MudText>
                <MudText Typo="Typo.caption" Class="mt-1">@notification.CreatedAt.ToString("g")</MudText>
            </div>
            <button class="notification-dismiss" @onclick="() => MarkAsRead(notification.Id)">
                <i class="fas fa-times"></i>
            </button>
        </div>
    }
</div>

<style>
    .notifications-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        max-width: 400px;
        opacity: 0;
        transform: translateX(100%);
        transition: all 0.3s ease-in-out;
    }

    .notifications-container.show {
        opacity: 1;
        transform: translateX(0);
    }

    .notification {
        display: flex;
        align-items: flex-start;
        padding: 12px;
        margin-bottom: 10px;
        border-radius: 4px;
        background-color: white;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        animation: slideIn 0.3s ease-in-out;
    }

    .notification.unread {
        border-left: 4px solid var(--mud-palette-primary);
    }

    .notification.read {
        border-left: 4px solid var(--mud-palette-secondary);
        opacity: 0.8;
    }

    .notification-content {
        flex: 1;
    }

    .notification-title {
        font-weight: bold;
        margin-bottom: 4px;
    }

    .notification-dismiss {
        background: none;
        border: none;
        padding: 4px;
        cursor: pointer;
        color: #999;
        transition: color 0.2s;
    }

    .notification-dismiss:hover {
        color: #666;
    }

    @@keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
</style>

@code {
    private List<Notification> notifications = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshNotifications();
        NotificationService.OnNotificationsChanged += OnNotificationsChanged;
    }

    private async Task RefreshNotifications()
    {
        notifications = await NotificationService.GetNotificationsAsync();
        StateHasChanged();
    }

    private async void OnNotificationsChanged()
    {
        await RefreshNotifications();
    }

    private async Task MarkAsRead(int notificationId)
    {
        await NotificationService.MarkAsReadAsync(notificationId);
    }

    public void Dispose()
    {
        NotificationService.OnNotificationsChanged -= OnNotificationsChanged;
    }
}
